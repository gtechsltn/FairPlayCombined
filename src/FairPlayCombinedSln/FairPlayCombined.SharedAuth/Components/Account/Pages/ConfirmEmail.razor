@page "/Account/ConfirmEmail"
@implements IAsyncDisposable

@using System.Text
@using FairPlayCombined.Common.CustomAttributes
@using FairPlayCombined.Interfaces.Common
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.Extensions.Localization

@inject UserManager<ApplicationUser> UserManager
@inject IdentityRedirectManager RedirectManager

@inject IUserFundService userFundService
@inject IStringLocalizer<ConfirmEmail> localizer

<PageTitle>@localizer[ConfirmEmailTextKey]</PageTitle>

<h1>@localizer[ConfirmEmailTextKey]</h1>
<StatusMessage Message="@statusMessage" />

@code {
    private string? statusMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromQuery]
    private string? UserId { get; set; }

    [SupplyParameterFromQuery]
    private string? Code { get; set; }
    private readonly CancellationTokenSource cancellationTokenSource = new();

    protected override async Task OnInitializedAsync()
    {
        if (UserId is null || Code is null)
        {
            RedirectManager.RedirectTo("");
        }

        var user = await UserManager.FindByIdAsync(UserId);
        if (user is null)
        {
            HttpContext.Response.StatusCode = StatusCodes.Status404NotFound;
            statusMessage = $"{localizer[ErrorLoadingUserTextKey]} {UserId}";
        }
        else
        {
            var code = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(Code));
            var result = await UserManager.ConfirmEmailAsync(user, code);
            statusMessage = result.Succeeded ? $"{localizer[ThankYouForConfirmingEmailTextKey]}."
            :
            $"{localizer[ErrorConfirmingEmailTextKey]}.";
            if (result.Succeeded)
            {
                await this.userFundService.InitializeUserFundsAsync(user.Id, this.cancellationTokenSource.Token);
            }
        }
    }

    public ValueTask DisposeAsync()
    {
        this.cancellationTokenSource.Dispose();
        return ValueTask.CompletedTask;
    }

    #region Resource Keys
    [ResourceKey(defaultValue: "Confirm email")]
    public const string ConfirmEmailTextKey = "ConfirmEmailText";
    [ResourceKey(defaultValue: "Error loading user with ID")]
    public const string ErrorLoadingUserTextKey = "ErrorLoadingUserText";
    [ResourceKey(defaultValue: "Thank you for confirming your email")]
    public const string ThankYouForConfirmingEmailTextKey = "ThankYouForConfirmingEmailText";
    [ResourceKey(defaultValue: "Error confirming your email")]
    public const string ErrorConfirmingEmailTextKey = "ErrorConfirmingEmailText";
    #endregion Resource Keys
}
