@page "/Account/ResetPassword"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using FairPlayCombined.Common.CustomAttributes
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.Extensions.Localization

@inject IdentityRedirectManager RedirectManager
@inject UserManager<ApplicationUser> UserManager

@inject IStringLocalizer<ResetPassword> localizer


<PageTitle>@localizer[ResetPasswordTextKey]</PageTitle>

<h1>@localizer[ResetPasswordTextKey]</h1>
<h2>@localizer[ResetYourPasswordTextKey]</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <StatusMessage Message="@Message" />
        <EditForm Model="Input" FormName="reset-password" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />

            <input type="hidden" name="Input.Code" value="@Input.Code" />
            <div class="form-floating @ThemeConfiguration.Divisions.DefaultCss">
                <InputText @bind-Value="Input.Email" class="@ThemeConfiguration.GenericControls.DefaultCss" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                <label for="email" class="@ThemeConfiguration.Labels.DefaultCss">@localizer[EmailTextKey]</label>
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>
            <div class="form-floating @ThemeConfiguration.Divisions.DefaultCss">
                <InputText type="password" @bind-Value="Input.Password" 
                class="@ThemeConfiguration.GenericControls.DefaultCss" 
                autocomplete="new-password" aria-required="true" 
                placeholder=@PleaseEnterYourPasswordText />
                <label for="password" class="@ThemeConfiguration.Labels.DefaultCss">@localizer[PasswordTextKey]</label>
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>
            <div class="form-floating @ThemeConfiguration.Divisions.DefaultCss">
                <InputText type="password" @bind-Value="Input.ConfirmPassword" 
                class="@ThemeConfiguration.GenericControls.DefaultCss" 
                autocomplete="new-password" aria-required="true" 
                placeholder=@PleaseConfirmYourPasswordText />
                <label for="confirm-password"
                       class="@ThemeConfiguration.Labels.DefaultCss">@localizer[ConfirmPasswordTextKey]</label>
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">@localizer[ResetTextKey]</button>
        </EditForm>
    </div>
</div>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? Code { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    protected override void OnInitialized()
    {
        if (Code is null)
        {
            RedirectManager.RedirectTo("Account/InvalidPasswordReset");
        }

        Input.Code = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(Code));
    }

    private async Task OnValidSubmitAsync()
    {
        var user = await UserManager.FindByEmailAsync(Input.Email);
        if (user is null)
        {
            // Don't reveal that the user does not exist
            RedirectManager.RedirectTo("Account/ResetPasswordConfirmation");
        }

        var result = await UserManager.ResetPasswordAsync(user, Input.Code, Input.Password);
        if (result.Succeeded)
        {
            RedirectManager.RedirectTo("Account/ResetPasswordConfirmation");
        }

        identityErrors = result.Errors;
    }

    private sealed class InputModel
    {
        [CustomRequired]
        [CustomEmailAddress]
        public string Email { get; set; } = "";

        [CustomRequired]
        [CustomStringLength(100, MinimumLength = 6)]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(ResourceType =typeof(InputModelLocalizer), Name = nameof(InputModelLocalizer.DisplayForm_ConfirmPassword))]
        [CustomCompare(nameof(Password))]
        public string ConfirmPassword { get; set; } = "";

        [CustomRequired]
        public string Code { get; set; } = "";
    }

    [LocalizerOfT<InputModel>]
    public class InputModelLocalizer
    {
        public IStringLocalizer<InputModelLocalizer>? Localizer { get; set; }

        public string DisplayForm_ConfirmPassword => Localizer![ConfirmPasswordTextKey];

        [ResourceKey(defaultValue: "Confirm password")]
        public const string DisplayFor_ConfirmPasswordTextKey = "DisplayFor_ConfirmPasswordText";
    }

    #region Resource Keys
    [ResourceKey(defaultValue: "Reset password")]
    public const string ResetPasswordTextKey = "ResetPasswordText";
    [ResourceKey(defaultValue: "Reset your password")]
    public const string ResetYourPasswordTextKey = "ResetYourPasswordText";
    [ResourceKey(defaultValue: "Email")]
    public const string EmailTextKey = "EmailText";
    [ResourceKey(defaultValue: "Please enter your password")]
    public const string PleaseEnterYourPasswordTextKey = "PleaseEnterYourPasswordText";
    public string PleaseEnterYourPasswordText => localizer[PleaseEnterYourPasswordTextKey];
    [ResourceKey(defaultValue: "Password")]
    public const string PasswordTextKey = "PasswordText";
    [ResourceKey(defaultValue: "Please confirm your password")]
    public const string PleaseConfirmYourPasswordTextKey = "PleaseConfirmYourPasswordText";
    public string PleaseConfirmYourPasswordText => localizer[PleaseConfirmYourPasswordTextKey];
    [ResourceKey(defaultValue: "Confirm password")]
    public const string ConfirmPasswordTextKey = "ConfirmPasswordText";
    [ResourceKey(defaultValue: "Reset")]
    public const string ResetTextKey = "Reset";
    #endregion Resource Keys
}
