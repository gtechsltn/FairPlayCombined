@page "/Account/ExternalLogin"

@using System.ComponentModel.DataAnnotations
@using System.Security.Claims
@using System.Text
@using System.Text.Encodings.Web
@using FairPlayCombined.Common.CustomAttributes
@using FairPlayCombined.Common.ValidationAttributes
@using FairPlayCombined.Models.Auth.ExternalLogin
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.Extensions.Localization
@using Microsoft.Extensions.Logging

@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject IEmailSender<ApplicationUser> EmailSender
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject ILogger<ExternalLogin> Logger
@inject IStringLocalizer<ExternalLogin> localizer

<PageTitle>@localizer[RegisterTextKey]</PageTitle>

<StatusMessage Message="@message" />
<h1>@localizer[RegisterTextKey]</h1>
<h2>@localizer[AssociateYourProviderAccountTextKey, @ProviderDisplayName!].</h2>
<hr />

<div class="alert alert-info">
    @localizer[SuccessfullyAuthenticatedWithProviderTextKey] <strong>@ProviderDisplayName</strong>.
    @localizer[EnterYourInformationTextKey].
</div>

<div class="row">
    <div class="col-md-4">
        <EditForm Model="Input" OnValidSubmit="OnValidSubmitAsync" FormName="confirmation" method="post">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="@ThemeConfiguration.Divisions.DefaultCss">
                <label for="email" class="@ThemeConfiguration.Labels.DefaultCss">@localizer[EmailTextKey]</label>
                <InputText @bind-Value="Input.Email" 
                class="@ThemeConfiguration.GenericControls.DefaultCss" autocomplete="email" 
                placeholder="@EnterYourEmailText" />
                <ValidationMessage For="() => Input.Email" />
            </div>
            <div class="@ThemeConfiguration.Divisions.DefaultCss">
                <label for="name" class="@ThemeConfiguration.Labels.DefaultCss">@localizer[NameTextKey]</label>
                <InputText @bind-Value="Input.Name" 
                class="@ThemeConfiguration.GenericControls.DefaultCss" autocomplete="name"
                placeholder="@EnterYourNameText" />
                <ValidationMessage For="() => Input.Name" />
            </div>
            <div class="@ThemeConfiguration.Divisions.DefaultCss">
                <label for="lastname" class="@ThemeConfiguration.Labels.DefaultCss">@localizer[LastnameTextKey]</label>
                <InputText @bind-Value="Input.Lastname" 
                class="@ThemeConfiguration.GenericControls.DefaultCss" autocomplete="lastname" 
                placeholder="@EnterYourLastname" />
                <ValidationMessage For="() => Input.Lastname" />
            </div>
            <div class="@ThemeConfiguration.Divisions.DefaultCss">
                <label for="linkedinprofileurl"
                class="@ThemeConfiguration.Labels.DefaultCss">@localizer[LinkedInProfileUrlTextKey]</label>
                <InputText @bind-Value="Input.LinkedInProfileUrl"
                class="@ThemeConfiguration.GenericControls.DefaultCss"
                autocomplete="linkedinprofileurl" 
                placeholder="@EnterYourLinkedInProfileURL" />
                <ValidationMessage For="() => Input.LinkedInProfileUrl" />
            </div>
            <div class="@ThemeConfiguration.Divisions.DefaultCss">
                <label for="instagramprofileurl"
                class="@ThemeConfiguration.Labels.DefaultCss">@localizer[InstagramProfileUrlTextKey]</label>
                <InputText @bind-Value="Input.InstagramProfileUrl"
                class="@ThemeConfiguration.GenericControls.DefaultCss"
                autocomplete="instagramprofileurl" 
                placeholder="@EnterYourInstagramProfileUrl" />
                <ValidationMessage For="() => Input.InstagramProfileUrl" />
            </div>
            <div class="@ThemeConfiguration.Divisions.DefaultCss">
                <label for="xformerlytwitterurl"
                class="@ThemeConfiguration.Labels.DefaultCss">@localizer[XFormerlyTwitterProfileUrlTextKey]</label>
                <InputText @bind-Value="Input.XformerlyTwitterUrl"
                class="@ThemeConfiguration.GenericControls.DefaultCss"
                autocomplete="xformerlytwitterurl" 
                placeholder="@EnterYourXFormerlyTwitterProfileUrl" />
                <ValidationMessage For="() => Input.XformerlyTwitterUrl" />
            </div>
            <div class="@ThemeConfiguration.Divisions.DefaultCss">
                <label for="websiteurl"
                class="@ThemeConfiguration.Labels.DefaultCss">@localizer[WebsiteUrlTextKey]</label>
                <InputText @bind-Value="Input.WebsiteUrl"
                class="@ThemeConfiguration.GenericControls.DefaultCss"
                autocomplete="websiteurl" 
                placeholder="@EnterYourWebsiteURL" />
                <ValidationMessage For="() => Input.WebsiteUrl" />
            </div>
            <div class="@ThemeConfiguration.Divisions.DefaultCss">
                <label for="reasontocreateaccount"
                class="@ThemeConfiguration.Labels.DefaultCss">@localizer[ReasonToCreateAccountTextKey]</label>
                <InputTextArea @bind-Value="Input.ReasonToCreateAccount"
                class="@ThemeConfiguration.GenericControls.DefaultCss"
                autocomplete="reasontocreateaccount"
                placeholder="@EnterYourReasonToCreateAccount" />
                <ValidationMessage For="() => Input.ReasonToCreateAccount" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">@localizer[RegisterTextKey]</button>
        </EditForm>
    </div>
</div>

@code {
    public const string LoginCallbackAction = "LoginCallback";

    private string? message;
    private ExternalLoginInfo externalLoginInfo = default!;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? RemoteError { get; set; }

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    [SupplyParameterFromQuery]
    private string? Action { get; set; }

    private string? ProviderDisplayName => externalLoginInfo.ProviderDisplayName;

    protected override async Task OnInitializedAsync()
    {
        if (RemoteError is not null)
        {
            RedirectManager.RedirectToWithStatus("Account/Login", $"{localizer[ErrorFromExternalProviderTextKey]}: {RemoteError}", HttpContext);
        }

        var info = await SignInManager.GetExternalLoginInfoAsync();
        if (info is null)
        {
            RedirectManager.RedirectToWithStatus("Account/Login", $"{localizer[ErrorLoadingExternalLoginInformationTextKey]}.", HttpContext);
        }

        externalLoginInfo = info;

        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            if (Action == LoginCallbackAction)
            {
                await OnLoginCallbackAsync();
                return;
            }

            // We should only reach this page via the login callback, so redirect back to
            // the login page if we get here some other way.
            RedirectManager.RedirectTo("Account/Login");
        }
    }

    private async Task OnLoginCallbackAsync()
    {
        var userFromManager = await UserManager.FindByLoginAsync(externalLoginInfo.LoginProvider,
            externalLoginInfo.ProviderKey);
        if (userFromManager != null)
        {
            await this.SignInManager.UpdateExternalAuthenticationTokensAsync(externalLoginInfo);
        }
        // Sign in the user with this external login provider if the user already has a login.
        var result = await SignInManager.ExternalLoginSignInAsync(
            externalLoginInfo.LoginProvider,
            externalLoginInfo.ProviderKey,
            isPersistent: false,
            bypassTwoFactor: true);

        if (result.Succeeded)
        {
            var props = new AuthenticationProperties();
            props.StoreTokens(externalLoginInfo!.AuthenticationTokens!);
            Logger.LogInformation(
                "{Name} logged in with {LoginProvider} provider.",
                externalLoginInfo.Principal.Identity?.Name,
                externalLoginInfo.LoginProvider);
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.IsLockedOut)
        {
            RedirectManager.RedirectTo("Account/Lockout");
        }

        // If the user does not have an account, then ask the user to create an account.
        if (externalLoginInfo.Principal.HasClaim(c => c.Type == ClaimTypes.Email))
        {
            Input.Email = externalLoginInfo.Principal.FindFirstValue(ClaimTypes.Email) ?? "";
        }
    }

    private async Task OnValidSubmitAsync()
    {
        var emailStore = GetEmailStore();
        var user = CreateUser();
        user.Name = Input.Name;
        user.Lastname = Input.Lastname;
        if (!String.IsNullOrWhiteSpace(Input.LinkedInProfileUrl))
        {
            user.LinkedInProfileUrl = Input.LinkedInProfileUrl;
        }
        if (!String.IsNullOrWhiteSpace(Input.InstagramProfileUrl))
        {
            user.InstagramProfileUrl = Input.InstagramProfileUrl;
        }
        if (!String.IsNullOrWhiteSpace(Input.XformerlyTwitterUrl))
        {
            user.XformerlyTwitterUrl = Input.XformerlyTwitterUrl;
        }
        if (!String.IsNullOrWhiteSpace(Input.WebsiteUrl))
        {
            user.WebsiteUrl = Input.WebsiteUrl;
        }
        user.ReasonToCreateAccount = Input.ReasonToCreateAccount;
        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);

        var result = await UserManager.CreateAsync(user);
        if (result.Succeeded)
        {
            result = await UserManager.AddLoginAsync(user, externalLoginInfo);
            if (result.Succeeded)
            {
                Logger.LogInformation("User created an account using {Name} provider.", externalLoginInfo.LoginProvider);

                var userId = await UserManager.GetUserIdAsync(user);
                var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
                code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));

                var callbackUrl = NavigationManager.GetUriWithQueryParameters(
                    NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
                    new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code });
                await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

                // If account confirmation is required, we need to show the link if we don't have a real email sender
                if (UserManager.Options.SignIn.RequireConfirmedAccount)
                {
                    RedirectManager.RedirectTo("Account/RegisterConfirmation", new() { ["email"] = Input.Email });
                }

                await SignInManager.SignInAsync(user, isPersistent: false, externalLoginInfo.LoginProvider);
                RedirectManager.RedirectTo(ReturnUrl);
            }
        }

        message = $"Error: {string.Join(",", result.Errors.Select(error => error.Description))}";
    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"{localizer[CantCreateAnInstanceOfTextKey, nameof(ApplicationUser)]}. " +
                $"{localizer[EnsureClassIsValidTextKey, nameof(ApplicationUser)]}");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException($"{localizer[DefaultUIRequiresUserStoreWithEmailTextKey]}.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    #region Resource Keys
    [ResourceKey(defaultValue: "Register")]
    public const string RegisterTextKey = "RegisterText";
    [ResourceKey(defaultValue: "Associate your {0} account")]
    public const string AssociateYourProviderAccountTextKey = "AssociateYourProviderAccountText";
    [ResourceKey(defaultValue: "You've successfully authenticated with")]
    public const string SuccessfullyAuthenticatedWithProviderTextKey = "SuccessfullyAuthenticatedWithProviderText";
    [ResourceKey(defaultValue: "Please enter your information below and submit it to finish logging in")]
    public const string EnterYourInformationTextKey = "EnterYourInformationText";
    [ResourceKey(defaultValue:"Email")]
    public const string EmailTextKey = "EmailText";
    [ResourceKey(defaultValue: "Please enter your email")]
    public const string EnterYourEmailTextKey = "EnterYourEmailText";
    private string EnterYourEmailText => localizer[EnterYourEmailTextKey];
    [ResourceKey(defaultValue: "Name")]
    public const string NameTextKey = "NameText";
    [ResourceKey(defaultValue: "Please enter your name")]
    public const string EnterYourNameTextKey = "EnterYourNameText";
    private string EnterYourNameText => localizer[EnterYourNameTextKey];
    [ResourceKey(defaultValue: "Lastname")]
    public const string LastnameTextKey = "LastnameText";
    [ResourceKey(defaultValue: "Please enter your lastname")]
    public const string EnterYourLastnameTextKey = "EnterYourLastnameText";
    private string EnterYourLastname => localizer[EnterYourLastnameTextKey];
    [ResourceKey(defaultValue: "LinkedIn Profile Url")]
    public const string LinkedInProfileUrlTextKey = "LinkedInProfileUrlText";
    [ResourceKey(defaultValue: "Please enter your Linkedin profile URL")]
    public const string EnterYourLinkedInProfileURLTextKey = "EnterYourLinkedInProfileURLText";
    private string EnterYourLinkedInProfileURL => localizer[EnterYourLinkedInProfileURLTextKey];
    [ResourceKey(defaultValue: "Instagram Profile Url")]
    public const string InstagramProfileUrlTextKey = "InstagramProfileUrlText";
    [ResourceKey(defaultValue: "Please enter your Instagram profile URL")]
    public const string EnterYourInstagramProfileUrlTextKey = "EnterYourInstagramProfileUrlText";
    private string EnterYourInstagramProfileUrl => localizer[EnterYourInstagramProfileUrlTextKey];
    [ResourceKey(defaultValue: "X (formerlyTwitter) Profile Url")]
    public const string XFormerlyTwitterProfileUrlTextKey = "XFormerlyTwitterProfileUrlText";
    [ResourceKey(defaultValue: "Please enter your X(formerly Twitter) profile URL")]
    public const string EnterYourXFormerlyTwitterProfileUrlTextKey = "EnterYourXFormerlyTwitterProfileUrlText";
    private string EnterYourXFormerlyTwitterProfileUrl => localizer[EnterYourXFormerlyTwitterProfileUrlTextKey];
    [ResourceKey(defaultValue: "Website Url")]
    public const string WebsiteUrlTextKey = "WebsiteUrlText";
    [ResourceKey(defaultValue: "Please enter your Website URL")]
    public const string EnterYourWebsiteURLTextKey = "EnterYourWebsiteURLText";
    private string EnterYourWebsiteURL => localizer[EnterYourWebsiteURLTextKey];
    [ResourceKey(defaultValue: "Reason to create account")]
    public const string ReasonToCreateAccountTextKey = "ReasonToCreateAccountText";
    [ResourceKey("Enter your reason to create account")]
    public const string EnterYourReasonToCreateAccountTextKey = "EnterYourReasonToCreateAccountText";
    private string EnterYourReasonToCreateAccount => localizer[EnterYourReasonToCreateAccountTextKey];
    [ResourceKey(defaultValue: "Error from external provider")]
    public const string ErrorFromExternalProviderTextKey = "ErrorFromExternalProviderText";
    [ResourceKey(defaultValue: "Error loading external login information")]
    public const string ErrorLoadingExternalLoginInformationTextKey = "ErrorLoadingExternalLoginInformationText";
    [ResourceKey(defaultValue: "Can't create an instance of '{0}'")]
    public const string CantCreateAnInstanceOfTextKey = "CantCreateAnInstanceOfText";
    [ResourceKey(defaultValue: "Ensure that '{0}' is not an abstract class and has a parameterless constructor")]
    public const string EnsureClassIsValidTextKey = "EnsureClassIsValidText";
    [ResourceKey(defaultValue: "The default UI requires a user store with email support")]
    public const string DefaultUIRequiresUserStoreWithEmailTextKey = "DefaultUIRequiresUserStoreWithEmailText";
    #endregion Resource Keys

}
