@page "/Account/LoginWith2fa"

@using System.ComponentModel.DataAnnotations
@using FairPlayCombined.Common.CustomAttributes
@using Microsoft.AspNetCore.Identity
@using Microsoft.Extensions.Localization
@using Microsoft.Extensions.Logging

@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@inject IdentityRedirectManager RedirectManager

@inject ILogger<LoginWith2fa> Logger
@inject IStringLocalizer<LoginWith2fa> localizer

<PageTitle>@localizer[TwoFactorAuthenticationTextKey]</PageTitle>

<h1>@localizer[TwoFactorAuthenticationTextKey]</h1>
<hr />
<StatusMessage Message="@message" />
<p>@localizer[LoginProtectedTextKey]</p>
<div class="row">
    <div class="col-md-4">
        <EditForm Model="Input" FormName="login-with-2fa" OnValidSubmit="OnValidSubmitAsync" method="post">
            <input type="hidden" name="ReturnUrl" value="@ReturnUrl" />
            <input type="hidden" name="RememberMe" value="@RememberMe" />
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating @ThemeConfiguration.Divisions.DefaultCss">
                <InputText @bind-Value="Input.TwoFactorCode" 
                class="@ThemeConfiguration.GenericControls.DefaultCss" autocomplete="off" />
                <label for="two-factor-code"
                       class="@ThemeConfiguration.Labels.DefaultCss">@localizer[AuthenticatorCodeTextKey]</label>
                <ValidationMessage For="() => Input.TwoFactorCode" class="text-danger" />
            </div>
            <div class="checkbox @ThemeConfiguration.Divisions.DefaultCss">
                <label for="remember-machine" class="@ThemeConfiguration.Labels.DefaultCss">
                    <InputCheckbox @bind-Value="Input.RememberMachine" />
                    @localizer[RememberThisMachineTextKey]
                </label>
            </div>
            <div>
                <button type="submit" class="w-100 btn btn-lg btn-primary">@localizer[LoginTextKey]</button>
            </div>
        </EditForm>
    </div>
</div>
<p>
    @localizer[DontHaveAccessToYourAuthenticatorDeviceTextKey]
    <a href="Account/LoginWithRecoveryCode?ReturnUrl=@ReturnUrl">@localizer[LoginWithRecoveryCodeTextKey]</a>.
</p>

@code {
    private string? message;
    private ApplicationUser user = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    [SupplyParameterFromQuery]
    private bool RememberMe { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Ensure the user has gone through the username & password screen first
        user = await SignInManager.GetTwoFactorAuthenticationUserAsync() ??
            throw new InvalidOperationException("Unable to load two-factor authentication user.");
    }

    private async Task OnValidSubmitAsync()
    {
        var authenticatorCode = Input.TwoFactorCode!.Replace(" ", string.Empty).Replace("-", string.Empty);
        var result = await SignInManager.TwoFactorAuthenticatorSignInAsync(authenticatorCode, RememberMe, Input.RememberMachine);
        var userId = await UserManager.GetUserIdAsync(user);

        if (result.Succeeded)
        {
            Logger.LogInformation("User with ID '{UserId}' logged in with 2fa.", userId);
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User with ID '{UserId}' account locked out.", userId);
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            Logger.LogWarning("Invalid authenticator code entered for user with ID '{UserId}'.", userId);
            message = "Error: Invalid authenticator code.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [StringLength(7, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Text)]
        [Display(Name = "Authenticator code")]
        public string? TwoFactorCode { get; set; }

        [Display(Name = "Remember this machine")]
        public bool RememberMachine { get; set; }
    }

    #region Resource Keys
    [ResourceKey(defaultValue: "Two-factor authentication")]
    public const string TwoFactorAuthenticationTextKey = "TwoFactorAuthenticationText";
    [ResourceKey(defaultValue: "Your login is protected with an authenticator app. Enter your authenticator code below")]
    public const string LoginProtectedTextKey = "LoginProtectedText";
    [ResourceKey(defaultValue: "Authenticator code")]
    public const string AuthenticatorCodeTextKey = "AuthenticatorCodeText";
    [ResourceKey(defaultValue: "Remember this machine")]
    public const string RememberThisMachineTextKey = "RememberThisMachineText";
    [ResourceKey(defaultValue: "Log in")]
    public const string LoginTextKey = "LoginText";
    [ResourceKey(defaultValue: "Don't have access to your authenticator device?")]
    public const string DontHaveAccessToYourAuthenticatorDeviceTextKey = "DontHaveAccessToYourAuthenticatorDeviceText";
    [ResourceKey(defaultValue: "log in with a recovery code")]
    public const string LoginWithRecoveryCodeTextKey = "LoginWithRecoveryCodeText";
    #endregion Resource Keys
}
