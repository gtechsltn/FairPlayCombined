@page "/Account/ResendEmailConfirmation"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using FairPlayCombined.Common.CustomAttributes
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.Extensions.Localization

@inject UserManager<ApplicationUser> UserManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

@inject IStringLocalizer<ResendEmailConfirmation> localizer

<PageTitle>@localizer[ResendEmailConfirmationTextKey]</PageTitle>

<h1>@localizer[ResendEmailConfirmationTextKey]</h1>
<h2>@localizer[EnterYourEmailTextKey]</h2>
<hr />
<StatusMessage Message="@message" />
<div class="row">
    <div class="col-md-4">
        <EditForm Model="Input" FormName="resend-email-confirmation" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating @ThemeConfiguration.Divisions.DefaultCss">
                <InputText @bind-Value="Input.Email" 
                class="@ThemeConfiguration.GenericControls.DefaultCss" 
                aria-required="true" placeholder="name@example.com" />
                <label for="email" class="@ThemeConfiguration.Labels.DefaultCss">@localizer[EmailTextKey]</label>
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">@localizer[ResendTextKey]</button>
        </EditForm>
    </div>
</div>

@code {
    private string? message;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    private async Task OnValidSubmitAsync()
    {
        var user = await UserManager.FindByEmailAsync(Input.Email!);
        if (user is null)
        {
            message = localizer[VerificationEmailSentTextKey];
            return;
        }

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code });
        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        message = localizer[VerificationEmailSentTextKey];
    }

    private sealed class InputModel
    {
        [CustomRequired]
        [CustomEmailAddress]
        public string Email { get; set; } = "";
    }

    #region Resource Keys
    [ResourceKey(defaultValue: "Resend email confirmation")]
    public const string ResendEmailConfirmationTextKey = "ResendEmailConfirmationText";
    [ResourceKey(defaultValue: "Enter your email")]
    public const string EnterYourEmailTextKey = "EnterYourEmailText";
    [ResourceKey(defaultValue: "Email")]
    public const string EmailTextKey = "Email";
    [ResourceKey(defaultValue: "Resend")]
    public const string ResendTextKey = "ResendText";
    [ResourceKey(defaultValue: "Verification email sent. Please check your email")]
    public const string VerificationEmailSentTextKey = "VerificationEmailSentText";
    #endregion Resource Keys
}
