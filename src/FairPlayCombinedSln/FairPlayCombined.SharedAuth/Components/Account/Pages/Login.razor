@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using FairPlayCombined.Common.CustomAttributes
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using Microsoft.Extensions.Localization
@using Microsoft.Extensions.Logging
@using System.Globalization

@inject ILogger<Login> Logger
@inject IStringLocalizer<Login> localizer

@inject SignInManager<ApplicationUser> SignInManager
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>
    @localizer[LoginTextKey]
</PageTitle>

<h1>
    @localizer[LoginTextKey]
</h1>
<div class="row">
    <div class="col-md-4">
        <section>
            <StatusMessage Message="@errorMessage" />
            <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                <DataAnnotationsValidator />
                <h2>@localizer[UseLocalAccountToLoginTextKey]</h2>
                <hr />
                <ValidationSummary class="text-danger" role="alert" />
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.Email" class="form-control" 
                    autocomplete="username" aria-required="true" placeholder="name@example.com" />
                    <label for="email" class="form-label">@localizer[EmailTextKey]</label>
                    <ValidationMessage For="() => Input.Email" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="Input.Password" class="form-control" 
                    autocomplete="current-password" aria-required="true" placeholder="@PasswordText" />
                    <label for="password" class="form-label">@localizer[PasswordTextKey]</label>
                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                </div>
                <div class="checkbox mb-3">
                    <label class="form-label">
                        <InputCheckbox @bind-Value="Input.RememberMe" class="darker-border-checkbox form-check-input" />
                        @localizer[RememberMeTextKey]
                    </label>
                </div>
                <div>
                    <button type="submit" class="w-100 btn btn-lg btn-primary">
                        @localizer[LoginTextKey]
                    </button>
                </div>
                <div>
                    <p>
                        <a href="Account/ForgotPassword">
                            @localizer[ForgotYourPasswordTextKey]
                            </a>
                    </p>
                    <p>
                        <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">
                            @localizer[RegisterAsNewUserTextKey]
                        </a>
                    </p>
                    <p>
                        <a href="Account/ResendEmailConfirmation">
                            @localizer[ResendEmailConfirmationTextKey]
                            </a>
                    </p>
                </div>
            </EditForm>
        </section>
    </div>
    <div class="col-md-6 col-md-offset-2">
        <section>
            <h3>
                @localizer[UseAnotherServiceToLoginTextKey]
            </h3>
            <hr />
            <ExternalLoginPicker />
        </section>
    </div>
</div>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var c = CultureInfo.CurrentCulture;
        var d = localizer[InvalidLoginAttemptTextKey];
        Logger.LogDebug(d);
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = localizer[InvalidLoginAttemptTextKey];
        }
    }

    private sealed class InputModel
    {
        [CustomRequired]
        [CustomEmailAddress]
        public string Email { get; set; } = "";

        [CustomRequired]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(
            ResourceType = typeof(InputModelLocalizer),
            Name = nameof(InputModelLocalizer.DisplayFor_RememberMe))]
        public bool RememberMe { get; set; }
    }

    [LocalizerOfT<InputModel>]
    public class InputModelLocalizer
    {
        public IStringLocalizer<InputModelLocalizer>? Localizer { get; set; }

        [ResourceKey(defaultValue: "Remember me?")]
        public const string DisplayFor_RememberMe_TextKey = "DisplayFor_RememberMe_Text";
        public string DisplayFor_RememberMe => Localizer![DisplayFor_RememberMe_TextKey];
    }

    #region Resource Keys
    [ResourceKey(defaultValue: "Log in")]
    public const string LoginTextKey = "LoginText";
    [ResourceKey(defaultValue: "Use a local account to log in.")]
    public const string UseLocalAccountToLoginTextKey = "UseLocalAccountToLoginText";
    [ResourceKey(defaultValue: "Email")]
    public const string EmailTextKey = "EmailText";
    [ResourceKey(defaultValue: "PasswordTextKey")]
    public const string PasswordTextKey = "PasswordText";
    public string PasswordText => localizer[PasswordTextKey];
    [ResourceKey(defaultValue: "Remember me")]
    public const string RememberMeTextKey = "RememberMeText";
    [ResourceKey(defaultValue: "Forgot your password?")]
    public const string ForgotYourPasswordTextKey = "ForgotYourPasswordText";
    [ResourceKey(defaultValue: "Register as a new user")]
    public const string RegisterAsNewUserTextKey = "RegisterAsNewUserText";
    [ResourceKey(defaultValue: "Resend email confirmation")]
    public const string ResendEmailConfirmationTextKey = "ResendEmailConfirmationText";
    [ResourceKey(defaultValue: "Use another service to log in.")]
    public const string UseAnotherServiceToLoginTextKey = "UseAnotherServiceToLogInText";
    [ResourceKey(defaultValue: "Error: Invalid login attempt.")]
    public const string InvalidLoginAttemptTextKey = "InvalidLoginAttemptText";
    #endregion Resource Keys
}
