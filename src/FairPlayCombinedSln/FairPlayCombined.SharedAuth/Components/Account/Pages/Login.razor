@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using Microsoft.Extensions.Logging

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>

<FluentLabel Typo="Microsoft.FluentUI.AspNetCore.Components.Typography.H1">
    Log in
</FluentLabel>
<div class="row">
    <div class="col-md-4">
        <section>
            <StatusMessage Message="@errorMessage" />
            <FluentEditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                <DataAnnotationsValidator />
                <FluentLabel Typo="Typography.H2">Use a local account to log in.</FluentLabel>
                <hr />
                <FluentValidationSummary class="text-danger" role="alert" />
                <div class="form-floating @ThemeConfiguration.Divisions.DefaultCss">
                    <FluentTextField @bind-Value="Input.Email" AutoComplete="username" 
                    aria-required="true" Placeholder="name@example.com" 
                    InputMode="InputMode.Email" TextFieldType="TextFieldType.Email" />
                    <FluentLabel for="email">Email</FluentLabel>
                    <FluentValidationMessage For="() => Input.Email" class="text-danger" />
                </div>
                <div class="form-floating @ThemeConfiguration.Divisions.DefaultCss">
                    <FluentTextField TextFieldType="TextFieldType.Password" 
                    @bind-Value="Input.Password" AutoComplete="current-password" aria-required="true" 
                    Placeholder="password" />
                    <FluentLabel for="password">Password</FluentLabel>
                    <FluentValidationMessage For="() => Input.Password" class="text-danger" />
                </div>
                <div class="checkbox @ThemeConfiguration.Divisions.DefaultCss">
                    <FluentLabel>
                        <FluentCheckbox @bind-Value="Input.RememberMe" class="darker-border-checkbox form-check-input" />
                        Remember me
                    </FluentLabel>
                </div>
                <div>
                    <FluentButton Type="ButtonType.Submit">Log in</FluentButton>
                </div>
                <div>
                    <p>
                        <FluentAnchor Href="Account/ForgotPassword">Forgot your password?</FluentAnchor>
                    </p>
                    <p>
                        <FluentAnchor Href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Register as a new user</FluentAnchor>
                    </p>
                    <p>
                        <FluentAnchor Href="Account/ResendEmailConfirmation">Resend email confirmation</FluentAnchor>
                    </p>
                </div>
            </FluentEditForm>
        </section>
    </div>
    <div class="col-md-6 col-md-offset-2">
        <section>
            <FluentLabel Typo="Typography.H3">Use another service to log in.</FluentLabel>
            <hr />
            <ExternalLoginPicker />
        </section>
    </div>
</div>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
