@page "/Account/Manage/GenerateRecoveryCodes"

@using Microsoft.AspNetCore.Identity
@using Microsoft.Extensions.Logging

@inject UserManager<ApplicationUser> UserManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject ILogger<GenerateRecoveryCodes> Logger

@inject IStringLocalizer<GenerateRecoveryCodes> localizer

<PageTitle>@localizer[Generate2faRecoverCodesTextKey]</PageTitle>

@if (recoveryCodes is not null)
{
    <ShowRecoveryCodes RecoveryCodes="recoveryCodes.ToArray()" StatusMessage="@message" />
}
else
{
    <h3>@localizer[Generate2faRecoverCodesTextKey]</h3>
    <div class="alert alert-warning" role="alert">
        <p>
            <span class="glyphicon glyphicon-warning-sign"></span>
            <strong>@localizer[StoreCodesInSafePlaceTextKey]</strong>
        </p>
        <p>
            @localizer[DoNotLoseYourCodesTextKey]
        </p>
        <p>
            @localizer[GeneratingCodesDoNotChangeAuthenticatorKeysTextKey]
            <a href="Account/Manage/ResetAuthenticator">
                @localizer[ResetAuthenticatorKeysTextKey]
            </a>
        </p>
    </div>
    <div>
        <form @formname="generate-recovery-codes" @onsubmit="OnSubmitAsync" method="post">
            <AntiforgeryToken />
            <button class="btn btn-danger" type="submit">@localizer[GenerateRecoveryCodesTextKey]</button>
        </form>
    </div>
}

@code {
    private string? message;
    private ApplicationUser user = default!;
    private IEnumerable<string>? recoveryCodes;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);

        var isTwoFactorEnabled = await UserManager.GetTwoFactorEnabledAsync(user);
        if (!isTwoFactorEnabled)
        {
            throw new InvalidOperationException(localizer[CannotGenerateRecoveryCodesTextKey]);
        }
    }

    private async Task OnSubmitAsync()
    {
        var userId = await UserManager.GetUserIdAsync(user);
        recoveryCodes = await UserManager.GenerateNewTwoFactorRecoveryCodesAsync(user, 10);
        message = localizer[SuccessGeneratingRecoveryCodesTextKey];

        Logger.LogInformation("User with ID '{UserId}' has generated new 2FA recovery codes.", userId);
    }

    #region Resource Keys
    [ResourceKey(defaultValue: "Generate two-factor authentication (2FA) recovery codes")]
    public const string Generate2faRecoverCodesTextKey = "Generate2faRecoverCodesText";
    [ResourceKey(defaultValue: "Put these codes in a safe place")]
    public const string StoreCodesInSafePlaceTextKey = "StoreCodesInSafePlaceText";
    [ResourceKey(defaultValue: "If you lose your device and don't have the recovery codes you will lose access to your account")]
    public const string DoNotLoseYourCodesTextKey = "DoNotLoseYourCodesText";
    [ResourceKey(defaultValue: "Generating new recovery codes does not change the keys used in authenticator apps")]
    public const string GeneratingCodesDoNotChangeAuthenticatorKeysTextKey = "GeneratingCodesDoNotChangeAuthenticatorKeysText";
    [ResourceKey(defaultValue: "If you wish to change the key used in an authenticator app you should reset your authenticator keys")]
    public const string ResetAuthenticatorKeysTextKey = "ResetAuthenticatorKeysText";
    [ResourceKey(defaultValue: "Generate Recovery Codes")]
    public const string GenerateRecoveryCodesTextKey = "GenerateRecoveryCodesText";
    [ResourceKey(defaultValue: "Cannot generate recovery codes for user because they do not have 2FA enabled")]
    public const string CannotGenerateRecoveryCodesTextKey = "CannotGenerateRecoveryCodesText";
    [ResourceKey(defaultValue: "You have generated new recovery codes")]
    public const string SuccessGeneratingRecoveryCodesTextKey = "SuccessGeneratingRecoveryCodesText";
    #endregion
}
