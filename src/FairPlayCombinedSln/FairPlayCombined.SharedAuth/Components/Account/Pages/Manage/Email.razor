@page "/Account/Manage/Email"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities

@inject UserManager<ApplicationUser> UserManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject IdentityUserAccessor UserAccessor
@inject NavigationManager NavigationManager

@inject IStringLocalizer<Email> localizer

<PageTitle>@localizer[ManageEmailTextKey]</PageTitle>

<h3>@localizer[ManageEmailTextKey]</h3>

<StatusMessage Message="@message" />
<div class="row">
    <div class="col-md-6">
        <form @onsubmit="OnSendEmailVerificationAsync" @formname="send-verification" id="send-verification-form" method="post">
            <AntiforgeryToken />
        </form>
        <EditForm Model="Input" FormName="change-email" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            @if (isEmailConfirmed)
            {
                <div class="form-floating @ThemeConfiguration.Divisions.DefaultCss input-group">
                    <input type="text" value="@email"
                           class="@ThemeConfiguration.GenericControls.DefaultCss"
                           placeholder=@PleaseEnterYourEmailText disabled />
                    <div class="input-group-append">
                        <span class="h-100 input-group-text text-success font-weight-bold">✓</span>
                    </div>
                    <label for="email" class="@ThemeConfiguration.Labels.DefaultCss">@localizer[EmailTextKey]</label>
                </div>
            }
            else
            {
                <div class="form-floating @ThemeConfiguration.Divisions.DefaultCss">
                    <input type="text" value="@email"
                           class="@ThemeConfiguration.GenericControls.DefaultCss"
                           placeholder=@PleaseEnterYourEmailText disabled />
                    <label for="email" class="@ThemeConfiguration.Labels.DefaultCss">@localizer[EmailTextKey]</label>
                    <button type="submit" class="btn btn-link" form="send-verification-form">@localizer[SendVerificationEmailTextKey]</button>
                </div>
            }
            <div class="form-floating @ThemeConfiguration.Divisions.DefaultCss">
                <InputText @bind-Value="Input.NewEmail"
                           class="@ThemeConfiguration.GenericControls.DefaultCss"
                           autocomplete="email" aria-required="true" placeholder=@PleaseEnterNewEmailText />
                <label for="new-email" class="@ThemeConfiguration.Labels.DefaultCss">@localizer[NewEmailTextKey]</label>
                <ValidationMessage For="() => Input.NewEmail" class="text-danger" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">@localizer[ChangeEmailTextKey]</button>
        </EditForm>
    </div>
</div>

@code {
    private string? message;
    private ApplicationUser user = default!;
    private string? email;
    private bool isEmailConfirmed;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm(FormName = "change-email")]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        email = await UserManager.GetEmailAsync(user);
        isEmailConfirmed = await UserManager.IsEmailConfirmedAsync(user);

        Input.NewEmail ??= email;
    }

    private async Task OnValidSubmitAsync()
    {
        if (Input.NewEmail is null || Input.NewEmail == email)
        {
            message = localizer[EmailUnchangedTextKey];
            return;
        }

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateChangeEmailTokenAsync(user, Input.NewEmail);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmailChange").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["email"] = Input.NewEmail, ["code"] = code });

        await EmailSender.SendConfirmationLinkAsync(user, Input.NewEmail, HtmlEncoder.Default.Encode(callbackUrl));

        message = localizer[ConfirmationLinkSentTextKey];
    }

    private async Task OnSendEmailVerificationAsync()
    {
        if (email is null)
        {
            return;
        }

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code });

        await EmailSender.SendConfirmationLinkAsync(user, email, HtmlEncoder.Default.Encode(callbackUrl));

        message = localizer[VerificationEmailSentTextKey];
    }

    private sealed class InputModel
    {
        [CustomRequired]
        [CustomEmailAddress]
        [Display(ResourceType = typeof(InputModelLocalizer), 
            Name =nameof(InputModelLocalizer.DisplayFor_NewEmail_Text))]
        public string? NewEmail { get; set; }
    }

    [LocalizerOfT<InputModel>]
    public class InputModelLocalizer
    {
        public static IStringLocalizer<InputModelLocalizer>? Localizer { get; set; }

        [ResourceKey(defaultValue: "New email")]
        public const string DisplayFor_NewEmail_TextKey = "DisplayFor_NewEmail_Text";
        public string DisplayFor_NewEmail_Text => Localizer![DisplayFor_NewEmail_TextKey];
    }

    #region Resource Keys
    [ResourceKey(defaultValue: "Manage email")]
    public const string ManageEmailTextKey = "ManageEmailText";
    [ResourceKey(defaultValue: "Please enter your email")]
    public const string PleaseEnterYourEmailTextKey = "PleaseEnterYourEmailText";
    public string PleaseEnterYourEmailText => localizer[PleaseEnterYourEmailTextKey];
    [ResourceKey(defaultValue: "Email")]
    public const string EmailTextKey = "EmailText";
    [ResourceKey(defaultValue: "Send verification email")]
    public const string SendVerificationEmailTextKey = "SendVerificationEmailText";
    [ResourceKey(defaultValue: "Please enter new email")]
    public const string PleaseEnterNewEmailTextKey = "PleaseEnterNewEmailText";
    public string PleaseEnterNewEmailText => localizer[PleaseEnterNewEmailTextKey];
    [ResourceKey(defaultValue: "New email")]
    public const string NewEmailTextKey = "NewEmailText";
    [ResourceKey(defaultValue: "Change email")]
    public const string ChangeEmailTextKey = "ChangeEmailText";
    [ResourceKey(defaultValue: "Your email is unchanged")]
    public const string EmailUnchangedTextKey = "EmailUnchangedText";
    [ResourceKey(defaultValue: "Confirmation link to change email sent. Please check your email")]
    public const string ConfirmationLinkSentTextKey = "ConfirmationLinkSentText";
    [ResourceKey(defaultValue: "Verification email sent. Please check your email")]
    public const string VerificationEmailSentTextKey = "VerificationEmailSentText";
    #endregion Resource Keys
}
