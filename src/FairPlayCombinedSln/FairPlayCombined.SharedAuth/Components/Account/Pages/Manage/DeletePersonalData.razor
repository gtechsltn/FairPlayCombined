@page "/Account/Manage/DeletePersonalData"

@using System.ComponentModel.DataAnnotations

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject ILogger<DeletePersonalData> Logger

@inject IStringLocalizer<DeletePersonalData> localizer

<PageTitle>@localizer[DeletePersonalDataTextKey]</PageTitle>

<StatusMessage Message="@message" />

<h3>@localizer[DeletePersonalDataTextKey]</h3>

<div class="alert alert-warning" role="alert">
    <p>
        <strong>@localizer[PermanentDeleteMessageTextKey]</strong>
    </p>
</div>

<div>
    <EditForm Model="Input" FormName="delete-user" OnValidSubmit="OnValidSubmitAsync" method="post">
        <DataAnnotationsValidator />
        <ValidationSummary class="text-danger" role="alert" />
        @if (requirePassword)
        {
            <div class="form-floating @ThemeConfiguration.Divisions.DefaultCss">
                <InputText type="password" @bind-Value="Input.Password"
                           class="@ThemeConfiguration.GenericControls.DefaultCss"
                           autocomplete="current-password" aria-required="true"
                           placeholder=@PleaseEnterPasswordText />
                <label for="password" class="@ThemeConfiguration.Labels.DefaultCss">@localizer[PasswordTextKey]</label>
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>
        }
        <button class="w-100 btn btn-lg btn-danger" type="submit">@localizer[DeleteDataAndCloseAccountTextKey]</button>
    </EditForm>
</div>

@code {
    private string? message;
    private ApplicationUser user = default!;
    private bool requirePassword;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        Input ??= new();
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        requirePassword = await UserManager.HasPasswordAsync(user);
    }

    private async Task OnValidSubmitAsync()
    {
        if (requirePassword && !await UserManager.CheckPasswordAsync(user, Input.Password))
        {
            message = localizer[IncorrectPasswordTextKey];
            return;
        }

        var result = await UserManager.DeleteAsync(user);
        if (!result.Succeeded)
        {
            throw new InvalidOperationException(localizer[UnexpectedErrorTextKey]);
        }

        await SignInManager.SignOutAsync();

        var userId = await UserManager.GetUserIdAsync(user);
        Logger.LogInformation("User with ID '{UserId}' deleted themselves.", userId);

        RedirectManager.RedirectToCurrentPage();
    }

    private sealed class InputModel
    {
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";
    }

    #region Resource Keys
    [ResourceKey(defaultValue: "Delete Personal Data")]
    public const string DeletePersonalDataTextKey = "DeletePersonalDataText";
    [ResourceKey(defaultValue: "Deleting this data will permanently remove your account, and this cannot be recovered")]
    public const string PermanentDeleteMessageTextKey = "PermanentDeleteMessageText";
    [ResourceKey(defaultValue: "Please enter your password")]
    public const string PleaseEnterPasswordTextKey = "PleaseEnterPasswordText";
    public string PleaseEnterPasswordText => localizer[PleaseEnterPasswordTextKey];
    [ResourceKey(defaultValue: "Password")]
    public const string PasswordTextKey = "PasswordText";
    [ResourceKey(defaultValue: "Delete data and close my account")]
    public const string DeleteDataAndCloseAccountTextKey = "DeleteDataAndCloseAccountText";
    [ResourceKey(defaultValue: "Error: Incorrect password")]
    public const string IncorrectPasswordTextKey = "IncorrectPasswordText";
    [ResourceKey(defaultValue: "Unexpected error occurred deleting user")]
    public const string UnexpectedErrorTextKey = "UnexpectedErrorText";
    #endregion Resource Keys
}
