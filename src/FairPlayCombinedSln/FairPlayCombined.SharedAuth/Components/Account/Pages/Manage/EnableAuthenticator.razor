@page "/Account/Manage/EnableAuthenticator"

@using System.ComponentModel.DataAnnotations
@using System.Globalization
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.Extensions.Logging

@inject UserManager<ApplicationUser> UserManager
@inject IdentityUserAccessor UserAccessor
@inject UrlEncoder UrlEncoder
@inject IdentityRedirectManager RedirectManager
@inject ILogger<EnableAuthenticator> Logger
@inject IStringLocalizer<EnableAuthenticator> localizer

<PageTitle>@localizer[ConfigureAuthenticatorAppTextKey]</PageTitle>

@if (recoveryCodes is not null)
{
    <ShowRecoveryCodes RecoveryCodes="recoveryCodes.ToArray()" StatusMessage="@message" />
}
else
{
    <StatusMessage Message="@message" />
    <h3>@localizer[ConfigureAuthenticatorAppTextKey]</h3>
    <div>
        <p>@localizer[StepsIntroTextKey]:</p>
        <ol class="list">
            <li>
                <p>
                    @localizer[DownloadAuthenticatorAppTextKey]
                    <ul class="list">
                        <li>
                            <a href="https://go.microsoft.com/fwlink/?Linkid=825072">Android</a>
                        </li>
                        <li>
                            <a href="https://go.microsoft.com/fwlink/?Linkid=825073">iOS</a>
                        </li>
                    </ul>
                    @localizer[GoogleAuthenticatorTextKey]
                    <ul class="list">
                        <li>
                            <a href="https://play.google.com/store/apps/details?id=com.google.android.apps.authenticator2&amp;hl=en">Android</a>
                        </li>
                        <li>
                            <a href="https://itunes.apple.com/us/app/google-authenticator/id388497605?mt=8">iOS</a>
                        </li>
                    </ul>
                </p>
            </li>
            <li>
                <p>@localizer[ScanQROrEnterKeyTextKey]: <kbd>@sharedKey</kbd></p>
                <div class="alert alert-info"> <a href="https://go.microsoft.com/fwlink/?Linkid=852423">@localizer[LearnHowToEnableQRCodeGenerationTextKey]</a></div>
                <div></div>
                <div data-url="@authenticatorUri"></div>
            </li>
            <li>
                <p>
                    @localizer[UniqueCodeMessageTextKey]
                </p>
                <div class="row">
                    <div class="col-md-6">
                        <EditForm Model="Input" FormName="send-code" OnValidSubmit="OnValidSubmitAsync" method="post">
                            <DataAnnotationsValidator />
                            <div class="form-floating @ThemeConfiguration.Divisions.DefaultCss">
                                <InputText @bind-Value="Input.Code" 
                                class="@ThemeConfiguration.GenericControls.DefaultCss" 
                                autocomplete="off" placeholder=@PleaseEnterCodeText />
                                <label for="code" class="control-label @ThemeConfiguration.Labels.DefaultCss">@localizer[VerificationCodeTextKey]</label>
                                <ValidationMessage For="() => Input.Code" class="text-danger" />
                            </div>
                            <button type="submit" class="w-100 btn btn-lg btn-primary">@localizer[VerifyTextKey]</button>
                            <ValidationSummary class="text-danger" role="alert" />
                        </EditForm>
                    </div>
                </div>
            </li>
        </ol>
    </div>
}

@code {
    private const string AuthenticatorUriFormat = "otpauth://totp/{0}:{1}?secret={2}&issuer={0}&digits=6";

    private string? message;
    private ApplicationUser user = default!;
    private string? sharedKey;
    private string? authenticatorUri;
    private IEnumerable<string>? recoveryCodes;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);

        await LoadSharedKeyAndQrCodeUriAsync(user);
    }

    private async Task OnValidSubmitAsync()
    {
        // Strip spaces and hyphens
        var verificationCode = Input.Code.Replace(" ", string.Empty).Replace("-", string.Empty);

        var is2faTokenValid = await UserManager.VerifyTwoFactorTokenAsync(
            user, UserManager.Options.Tokens.AuthenticatorTokenProvider, verificationCode);

        if (!is2faTokenValid)
        {
            message = localizer[InvalidVerificationCodeTextKey];
            return;
        }

        await UserManager.SetTwoFactorEnabledAsync(user, true);
        var userId = await UserManager.GetUserIdAsync(user);
        Logger.LogInformation("User with ID '{UserId}' has enabled 2FA with an authenticator app.", userId);

        message = localizer[VerifiedAuthenticatorAppTextKey];

        if (await UserManager.CountRecoveryCodesAsync(user) == 0)
        {
            recoveryCodes = await UserManager.GenerateNewTwoFactorRecoveryCodesAsync(user, 10);
        }
        else
        {
            RedirectManager.RedirectToWithStatus("Account/Manage/TwoFactorAuthentication", message, HttpContext);
        }
    }

    private async ValueTask LoadSharedKeyAndQrCodeUriAsync(ApplicationUser user)
    {
        // Load the authenticator key & QR code URI to display on the form
        var unformattedKey = await UserManager.GetAuthenticatorKeyAsync(user);
        if (string.IsNullOrEmpty(unformattedKey))
        {
            await UserManager.ResetAuthenticatorKeyAsync(user);
            unformattedKey = await UserManager.GetAuthenticatorKeyAsync(user);
        }

        sharedKey = FormatKey(unformattedKey!);

        var email = await UserManager.GetEmailAsync(user);
        authenticatorUri = GenerateQrCodeUri(email!, unformattedKey!);
    }

    private string FormatKey(string unformattedKey)
    {
        var result = new StringBuilder();
        int currentPosition = 0;
        while (currentPosition + 4 < unformattedKey.Length)
        {
            result.Append(unformattedKey.AsSpan(currentPosition, 4)).Append(' ');
            currentPosition += 4;
        }
        if (currentPosition < unformattedKey.Length)
        {
            result.Append(unformattedKey.AsSpan(currentPosition));
        }

        return result.ToString().ToLowerInvariant();
    }

    private string GenerateQrCodeUri(string email, string unformattedKey)
    {
        return string.Format(
            CultureInfo.InvariantCulture,
            AuthenticatorUriFormat,
            UrlEncoder.Encode("Microsoft.AspNetCore.Identity.UI"),
            UrlEncoder.Encode(email),
            unformattedKey);
    }

    private sealed class InputModel
    {
        [CustomRequired]
        [CustomStringLength(7, MinimumLength = 6)]
        [DataType(DataType.Text)]
        [Display(ResourceType = typeof(InputModelLocalizer),
        Name = nameof(InputModelLocalizer.DisplayFor_VerificationCode))]
        public string Code { get; set; } = "";
    }

    [LocalizerOfT<InputModel>]
    public class InputModelLocalizer
    {
        public static IStringLocalizer<InputModelLocalizer>? Localizer { get; set; }

        [ResourceKey(defaultValue: "Verification Code")]
        public const string DisplayFor_VerificationCode_TextKey = "DisplayFor_VerificationCode_Text";
        public string DisplayFor_VerificationCode => Localizer![DisplayFor_VerificationCode_TextKey];
    }

    #region Resource Keys
    [ResourceKey(defaultValue: "Configure authenticator app")]
    public const string ConfigureAuthenticatorAppTextKey = "ConfigureAuthenticatorAppText";
    [ResourceKey(defaultValue: "To use an authenticator app go through the following steps")]
    public const string StepsIntroTextKey = "StepsIntroText";
    [ResourceKey(defaultValue: "Download a two-factor authenticator app like Microsoft Authenticator")]
    public const string DownloadAuthenticatorAppTextKey = "DownloadAuthenticatorAppText";
    [ResourceKey(defaultValue: "Google Authenticator")]
    public const string GoogleAuthenticatorTextKey = "GoogleAuthenticatorText";
    [ResourceKey(defaultValue: "Scan the QR Code or enter this key into your two factor authenticator app. Spaces and casing do not matter")]
    public const string ScanQROrEnterKeyTextKey = "ScanQROrEnterKeyText";
    [ResourceKey(defaultValue: "Learn how to enable QR code generation")]
    public const string LearnHowToEnableQRCodeGenerationTextKey = "LearnHowToEnableQRCodeGenerationText";
    [ResourceKey(defaultValue: "Once you have scanned the QR code or input the key above, your two factor authentication app will provide you with a unique code. Enter the code in the confirmation box below")]
    public const string UniqueCodeMessageTextKey = "UniqueCodeMessageText";
    [ResourceKey(defaultValue: "Please enter the code")]
    public const string PleaseEnterCodeTextKey = "PleaseEnterCodeText";
    public string PleaseEnterCodeText => localizer[PleaseEnterCodeTextKey];
    [ResourceKey(defaultValue: "Verification Code")]
    public const string VerificationCodeTextKey = "VerificationCodeText";
    [ResourceKey(defaultValue: "Verify")]
    public const string VerifyTextKey = "VerifyText";
    [ResourceKey(defaultValue: "Error: Verification code is invalid.")]
    public const string InvalidVerificationCodeTextKey = "InvalidVerificationCodeText";
    [ResourceKey(defaultValue: "Your authenticator app has been verified")]
    public const string VerifiedAuthenticatorAppTextKey = "VerifiedAuthenticatorAppText";
    #endregion Resource Keys
}
