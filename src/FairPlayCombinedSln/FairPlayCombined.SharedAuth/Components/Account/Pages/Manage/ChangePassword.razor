@page "/Account/Manage/ChangePassword"

@using System.ComponentModel.DataAnnotations
@using FairPlayCombined.Common.CustomAttributes
@using Microsoft.AspNetCore.Identity
@using Microsoft.Extensions.Localization


@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject ILogger<ChangePassword> Logger
@inject IStringLocalizer<ChangePassword> localizer

<PageTitle>@localizer[ChangePasswordTextKey]</PageTitle>

<h3>@localizer[ChangePasswordTextKey]</h3>
<StatusMessage Message="@message" />
<div class="row">
    <div class="col-md-6">
        <EditForm Model="Input" FormName="change-password" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating @ThemeConfiguration.Divisions.DefaultCss">
                <InputText type="password" @bind-Value="Input.OldPassword" 
                class="@ThemeConfiguration.GenericControls.DefaultCss" 
                autocomplete="current-password" aria-required="true" 
                placeholder=@PleaseEnterOldPasswordText />
                <label for="old-password" class="@ThemeConfiguration.Labels.DefaultCss">@localizer[OldPasswordTextKey]</label>
                <ValidationMessage For="() => Input.OldPassword" class="text-danger" />
            </div>
            <div class="form-floating @ThemeConfiguration.Divisions.DefaultCss">
                <InputText type="password" @bind-Value="Input.NewPassword" 
                class="@ThemeConfiguration.GenericControls.DefaultCss" 
                autocomplete="new-password" aria-required="true" 
                placeholder=@PleaseEnterNewPasswordText />
                <label for="new-password" class="@ThemeConfiguration.Labels.DefaultCss">@localizer[NewPasswordTextKey]</label>
                <ValidationMessage For="() => Input.NewPassword" class="text-danger" />
            </div>
            <div class="form-floating @ThemeConfiguration.Divisions.DefaultCss">
                <InputText type="password" @bind-Value="Input.ConfirmPassword" 
                class="@ThemeConfiguration.GenericControls.DefaultCss" 
                autocomplete="new-password" aria-required="true" 
                placeholder=@PleaseConfirmPasswordText />
                <label for="confirm-password" class="@ThemeConfiguration.Labels.DefaultCss">@localizer[ConfirmPasswordTextKey]</label>
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">@localizer[UpdatePasswordTextKey]</button>
        </EditForm>
    </div>
</div>

@code {
    private string? message;
    private ApplicationUser user = default!;
    private bool hasPassword;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        hasPassword = await UserManager.HasPasswordAsync(user);
        if (!hasPassword)
        {
            RedirectManager.RedirectTo("Account/Manage/SetPassword");
        }
    }

    private async Task OnValidSubmitAsync()
    {
        var changePasswordResult = await UserManager.ChangePasswordAsync(user, Input.OldPassword, Input.NewPassword);
        if (!changePasswordResult.Succeeded)
        {
            message = $"Error: {string.Join(",", changePasswordResult.Errors.Select(error => error.Description))}";
            return;
        }

        await SignInManager.RefreshSignInAsync(user);
        Logger.LogInformation("User changed their password successfully.");

        RedirectManager.RedirectToCurrentPageWithStatus(localizer[PasswordChangedTextKey], HttpContext);
    }

    private sealed class InputModel
    {
        [CustomRequired]
        [DataType(DataType.Password)]
        [Display(ResourceType = typeof(InputModelLocalizer),
            Name = nameof(InputModelLocalizer.DisplayFor_OldPassword))]
        public string OldPassword { get; set; } = "";

        [CustomRequired]
        [CustomStringLength(100, MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(ResourceType = typeof(InputModelLocalizer), 
            Name =nameof(InputModelLocalizer.DisplayFor_NewPassword))]
        public string NewPassword { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(ResourceType = typeof(InputModelLocalizer),
            Name = nameof(InputModelLocalizer.DisplayFor_ConfirmNewPassword))]
        [CustomCompare(nameof(NewPassword))]
        public string ConfirmPassword { get; set; } = "";
    }

    [LocalizerOfT<InputModel>]
    public class InputModelLocalizer
    {
        public IStringLocalizer<InputModelLocalizer>? Localizer { get; set; }

        [ResourceKey(defaultValue: "New password")]
        public const string DisplayFor_NewPassword_TextKey = "DisplayFor_NewPassword_Text";
        public string DisplayFor_NewPassword => Localizer![DisplayFor_NewPassword_TextKey];

        [ResourceKey(defaultValue: "Current password")]
        public const string DisplayFor_OldPassword_TextKey = "DisplayFor_OldPassword_Text";
        public string DisplayFor_OldPassword => Localizer![DisplayFor_OldPassword_TextKey];

        [ResourceKey(defaultValue: "Confirm new password")]
        public const string DisplayFor_ConfirmNewPassword_TextKey = "DisplayFor_ConfirmNewPassword_Text";
        public string DisplayFor_ConfirmNewPassword => Localizer![DisplayFor_ConfirmNewPassword_TextKey];
    }

    #region Resource Keys
    [ResourceKey(defaultValue: "Change password")]
    public const string ChangePasswordTextKey = "ChangePasswordText";
    [ResourceKey(defaultValue: "Please enter your old password")]
    public const string PleaseEnterOldPasswordTextKey = "PleaseEnterOldPasswordText";
    public string PleaseEnterOldPasswordText => localizer[PleaseEnterOldPasswordTextKey];
    [ResourceKey(defaultValue: "Old password")]
    public const string OldPasswordTextKey = "OldPasswordText";
    [ResourceKey(defaultValue: "Please enter your new password")]
    public const string PleaseEnterNewPasswordTextKey = "PleaseEnterNewPasswordText";
    public string PleaseEnterNewPasswordText => localizer[PleaseEnterNewPasswordTextKey];
    [ResourceKey(defaultValue: "New password")]
    public const string NewPasswordTextKey = "NewPasswordText";
    [ResourceKey(defaultValue: "Please confirm your new password")]
    public const string PleaseConfirmPasswordTextKey = "PleaseConfirmPasswordText";
    public string PleaseConfirmPasswordText => localizer[PleaseConfirmPasswordTextKey];
    [ResourceKey(defaultValue: "Confirm password")]
    public const string ConfirmPasswordTextKey = "ConfirmPasswordText";
    [ResourceKey(defaultValue: "Update Password")]
    public const string UpdatePasswordTextKey = "UpdatePasswordText";
    [ResourceKey(defaultValue: "Your password has been changed")]
    public const string PasswordChangedTextKey = "PasswordChangedText";
    #endregion Resource Keys
}
