@page "/Account/Manage/TwoFactorAuthentication"

@using Microsoft.AspNetCore.Http.Features
@using Microsoft.AspNetCore.Identity

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager

@inject IStringLocalizer<TwoFactorAuthentication> localizer

<PageTitle>@localizer[TwoFactorAuthTextKey]</PageTitle>

<StatusMessage />
<h3>@localizer[TwoFactorAuthTextKey]</h3>
@if (canTrack)
{
    if (is2faEnabled)
    {
        if (recoveryCodesLeft == 0)
        {
            <div class="alert alert-danger">
                <strong>@localizer[NoRecoveryCodesLeftTextKey]</strong>
                <p><a href="Account/Manage/GenerateRecoveryCodes">@localizer[MustGenerateNewSetOfCodesTextKey]</a></p>
            </div>
        }
        else if (recoveryCodesLeft == 1)
        {
            <div class="alert alert-danger">
                <strong>@localizer[CodesLeftTextKey, 1]</strong>
                <p><a href="Account/Manage/GenerateRecoveryCodes">@localizer[CanGenerateNewSetOfCodesTextKey]</a>.</p>
            </div>
        }
        else if (recoveryCodesLeft <= 3)
        {
            <div class="alert alert-warning">
                <strong>@localizer[CodesLeftTextKey, recoveryCodesLeft]</strong>
                <p> <a href="Account/Manage/GenerateRecoveryCodes">@localizer[ShouldGenerateNewSetOfCodesTextKey]</a>.</p>
            </div>
        }

        if (isMachineRemembered)
        {
            <form style="display: inline-block" @formname="forget-browser" @onsubmit="OnSubmitForgetBrowserAsync" method="post">
                <AntiforgeryToken />
                <button type="submit" class="@ThemeConfiguration.Buttons.PrimaryButtonCss">@localizer[ForgetBrowserTextKey]</button>
            </form>
        }

        <a href="Account/Manage/Disable2fa" class="@ThemeConfiguration.Buttons.PrimaryButtonCss">@localizer[Disable2FATextKey]</a>
        <a href="Account/Manage/GenerateRecoveryCodes" class="@ThemeConfiguration.Buttons.PrimaryButtonCss">@localizer[ResetRecoveryCodesTextKey]</a>
    }

    <h4>@localizer[AuthenticatorAppTextKey]</h4>
    @if (!hasAuthenticator)
    {
        <a href="Account/Manage/EnableAuthenticator" class="@ThemeConfiguration.Buttons.PrimaryButtonCss">@localizer[AddAuthenticatorAppTextKey]</a>
    }
    else
    {
        <a href="Account/Manage/EnableAuthenticator" class="@ThemeConfiguration.Buttons.PrimaryButtonCss">@localizer[SetupAuthenticatorAppTextKey]</a>
        <a href="Account/Manage/ResetAuthenticator" class="@ThemeConfiguration.Buttons.PrimaryButtonCss">@localizer[ResetAuthenticatorAppTextKey]</a>
    }
}
else
{
    <div class="alert alert-danger">
        <strong>@localizer[PrivacyAndCookiePolicyNotAcceptedTextKey]</strong>
        <p>@localizer[MustAcceptPolicyTextKey]</p>
    </div>
}

@code {
    private bool canTrack;
    private bool hasAuthenticator;
    private int recoveryCodesLeft;
    private bool is2faEnabled;
    private bool isMachineRemembered;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        var user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        canTrack = HttpContext.Features.Get<ITrackingConsentFeature>()?.CanTrack ?? true;
        hasAuthenticator = await UserManager.GetAuthenticatorKeyAsync(user) is not null;
        is2faEnabled = await UserManager.GetTwoFactorEnabledAsync(user);
        isMachineRemembered = await SignInManager.IsTwoFactorClientRememberedAsync(user);
        recoveryCodesLeft = await UserManager.CountRecoveryCodesAsync(user);
    }

    private async Task OnSubmitForgetBrowserAsync()
    {
        await SignInManager.ForgetTwoFactorClientAsync();

        RedirectManager.RedirectToCurrentPageWithStatus(
            localizer[ForgottenBrowserTextKey], HttpContext);
    }

    #region Resource Keys
    [ResourceKey(defaultValue: "Two-factor authentication (2FA)")]
    public const string TwoFactorAuthTextKey = "TwoFactorAuthText";
    [ResourceKey(defaultValue: "You have no recovery codes left")]
    public const string NoRecoveryCodesLeftTextKey = "NoRecoveryCodesLeftText";
    [ResourceKey(defaultValue: "You must generate a new set of recovery codes before you can log in with a recovery code")]
    public const string MustGenerateNewSetOfCodesTextKey = "MustGenerateNewSetOfCodesText";
    [ResourceKey(defaultValue: "You have {0} recovery code left")]
    public const string CodesLeftTextKey = "CodesLeftText";
    [ResourceKey(defaultValue: "You can generate a new set of recovery codes")]
    public const string CanGenerateNewSetOfCodesTextKey = "CanGenerateNewSetOfCodesText";
    [ResourceKey(defaultValue: "You should generate a new set of recovery codes")]
    public const string ShouldGenerateNewSetOfCodesTextKey = "ShouldGenerateNewSetOfCodesText";
    [ResourceKey(defaultValue: "Forget this browser")]
    public const string ForgetBrowserTextKey = "ForgetBrowserText";
    [ResourceKey(defaultValue: "Disable 2FA")]
    public const string Disable2FATextKey = "Disable2FAText";
    [ResourceKey(defaultValue: "Reset recovery codes")]
    public const string ResetRecoveryCodesTextKey = "ResetRecoveryCodesText";
    [ResourceKey(defaultValue: "Authenticator app")]
    public const string AuthenticatorAppTextKey = "AuthenticatorAppText";
    [ResourceKey(defaultValue: "Add authenticator app")]
    public const string AddAuthenticatorAppTextKey = "AddAuthenticatorAppText";
    [ResourceKey(defaultValue: "Set up authenticator app")]
    public const string SetupAuthenticatorAppTextKey = "SetupAuthenticatorAppText";
    [ResourceKey(defaultValue: "Reset authenticator app")]
    public const string ResetAuthenticatorAppTextKey = "ResetAuthenticatorAppText";
    [ResourceKey(defaultValue: "Privacy and cookie policy have not been accepted")]
    public const string PrivacyAndCookiePolicyNotAcceptedTextKey = "PrivacyAndCookiePolicyNotAcceptedText";
    [ResourceKey(defaultValue: "You must accept the policy before you can enable two factor authentication")]
    public const string MustAcceptPolicyTextKey = "MustAcceptPolicyText";
    [ResourceKey(defaultValue: "The current browser has been forgotten. When you login again from this browser you will be prompted for your 2fa code")]
    public const string ForgottenBrowserTextKey = "ForgottenBrowserTextK";
    #endregion Resource Keys
}
