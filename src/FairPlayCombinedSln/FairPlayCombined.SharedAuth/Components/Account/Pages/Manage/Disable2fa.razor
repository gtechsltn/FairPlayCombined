@page "/Account/Manage/Disable2fa"

@using Microsoft.AspNetCore.Identity
@using Microsoft.Extensions.Logging

@inject UserManager<ApplicationUser> UserManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject ILogger<Disable2fa> Logger

@inject IStringLocalizer<Disable2fa> localizer

<PageTitle>@localizer[Disable2faTextKey]</PageTitle>

<StatusMessage />
<h3>@localizer[Disable2faTextKey]</h3>

<div class="alert alert-warning" role="alert">
    <p>
        <strong>@localizer[OnlyDisable2faTextKey]</strong>
    </p>
    <p>
        @localizer[DoesNotChangeKeysTextKey] 
        <a href="Account/Manage/ResetAuthenticator">
            @localizer[ResetAuthenticatorKeysTextKey]
        </a>
    </p>
</div>

<div>
    <form @formname="disable-2fa" @onsubmit="OnSubmitAsync" method="post">
        <AntiforgeryToken />
        <button class="btn btn-danger" type="submit">@localizer[Disable2FAShortTextKey]</button>
    </form>
</div>

@code {
    private ApplicationUser user = default!;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);

        if (HttpMethods.IsGet(HttpContext.Request.Method) && !await UserManager.GetTwoFactorEnabledAsync(user))
        {
            throw new InvalidOperationException(localizer[CannotDisableTextKey]);
        }
    }

    private async Task OnSubmitAsync()
    {
        var disable2faResult = await UserManager.SetTwoFactorEnabledAsync(user, false);
        if (!disable2faResult.Succeeded)
        {
            throw new InvalidOperationException(localizer[UnexpectedErrorTextKey]);
        }

        var userId = await UserManager.GetUserIdAsync(user);
        Logger.LogInformation("User with ID '{UserId}' has disabled 2fa.", userId);
        RedirectManager.RedirectToWithStatus(
            "Account/Manage/TwoFactorAuthentication",
            localizer[DisabledSuccessTextKey],
            HttpContext);
    }

    #region Resource Keys
    [ResourceKey(defaultValue: "Disable two-factor authentication (2FA)")]
    public const string Disable2faTextKey = "Disable2faText";
    [ResourceKey(defaultValue: "This action only disables 2FA")]
    public const string OnlyDisable2faTextKey = "OnlyDisable2faText";
    [ResourceKey(defaultValue: "Disabling 2FA does not change the keys used in authenticator apps.")]
    public const string DoesNotChangeKeysTextKey = "DoesNotChangeKeysText";
    [ResourceKey(defaultValue: "Reset your authenticator keys to change the key used in an authenticator app")]
    public const string ResetAuthenticatorKeysTextKey = "ResetAuthenticatorKeysText";
    [ResourceKey(defaultValue: "Disable 2FA")]
    public const string Disable2FAShortTextKey = "Disable2FAShortText";
    [ResourceKey(defaultValue: "Cannot disable 2FA for user as it's not currently enabled")]
    public const string CannotDisableTextKey = "CannotDisableText";
    [ResourceKey(defaultValue: "Unexpected error occurred disabling 2FA")]
    public const string UnexpectedErrorTextKey = "UnexpectedErrorText";
    [ResourceKey(defaultValue: "2fa has been disabled. You can reenable 2fa when you setup an authenticator app")]
    public const string DisabledSuccessTextKey = "DisabledSuccessText";
    #endregion Resource Keys
}
