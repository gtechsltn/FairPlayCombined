@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using FairPlayCombined.Common.CustomAttributes
@using FairPlayCombined.Common.ValidationAttributes
@using FairPlayCombined.Models.Auth.Register
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.Extensions.Localization
@using Microsoft.Extensions.Logging

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

@inject IStringLocalizer<Register> localizer

<PageTitle>@localizer[RegisterTextKey]</PageTitle>

<h1>@localizer[RegisterTextKey]</h1>

<div class="row">
    <div class="col">
        <p>
            @localizer[UserAcceptanceTextKey]:
        </p>
        <ul>
            <li>
                <FluentAnchor IconStart="@(new Icons.Regular.Size20.Link())" Href="/PrivacyPolicy" Target="_blank">@localizer[PrivacyPolicyTextKey]</FluentAnchor>
            </li>
            <li>
                <FluentAnchor IconStart="@(new Icons.Regular.Size20.Link())" Href="/UsageTerms" Target="_blank">@localizer[UsageTermsTextKey]</FluentAnchor>
            </li>
        </ul>
    </div>
</div>

<div class="row">
    <div class="col-md-4">
        <StatusMessage Message="@Message" />
        <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
            <DataAnnotationsValidator />
            <h2>@localizer[CreateNewAccountTextKey]</h2>
            <hr />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="@ThemeConfiguration.Divisions.DefaultCss">
                <label for="email">@localizer[EmailTextKey]</label>
                <InputText @bind-Value="Input.Email"
                class="@ThemeConfiguration.GenericControls.DefaultCss"
                autocomplete="username" aria-required="true" placeholder="name@example.com" />
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>
            <div class="@ThemeConfiguration.Divisions.DefaultCss">
                <label for="password">@localizer[PasswordTextKey]</label>
                <InputText type="password" @bind-Value="Input.Password"
                class="@ThemeConfiguration.GenericControls.DefaultCss"
                autocomplete="new-password" aria-required="true" placeholder="@PasswordText" />
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>
            <div class="@ThemeConfiguration.Divisions.DefaultCss">
                <label for="confirm-password">@localizer[ConfirmPasswordTextKey]</label>
                <InputText type="password" @bind-Value="Input.ConfirmPassword"
                class="@ThemeConfiguration.GenericControls.DefaultCss"
                autocomplete="new-password" aria-required="true" placeholder="@PasswordText" />
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
            </div>
            <div class="@ThemeConfiguration.Divisions.DefaultCss">
                <label for="name">@localizer[NameTextKey]</label>
                <InputText @bind-Value="Input.Name"
                class="@ThemeConfiguration.GenericControls.DefaultCss"
                autocomplete="name" aria-required="true" placeholder="@NameText" />
                <ValidationMessage For="() => Input.Name" class="text-danger" />
            </div>
            <div class="@ThemeConfiguration.Divisions.DefaultCss">
                <label for="lastname">@localizer[LastnameTextKey]</label>
                <InputText @bind-Value="Input.Lastname"
                class="@ThemeConfiguration.GenericControls.DefaultCss"
                autocomplete="lastname" aria-required="true" placeholder="@LastnameText" />
                <ValidationMessage For="() => Input.Lastname" class="text-danger" />
            </div>
            <div class="@ThemeConfiguration.Divisions.DefaultCss">
                <label for="linkedinprofileurl"
                class="@ThemeConfiguration.Labels.DefaultCss">@localizer[LinkedInProfileUrlTextKey]</label>
                <InputText @bind-Value="Input.LinkedInProfileUrl"
                class="@ThemeConfiguration.GenericControls.DefaultCss"
                autocomplete="linkedinprofileurl" placeholder="@EnterLinkedInProfileURL" />
                <ValidationMessage For="() => Input.LinkedInProfileUrl" />
            </div>
            <div class="@ThemeConfiguration.Divisions.DefaultCss">
                <label for="instagramprofileurl"
                class="@ThemeConfiguration.Labels.DefaultCss">@localizer[InstagramProfileUrlTextKey]</label>
                <InputText @bind-Value="Input.InstagramProfileUrl"
                class="@ThemeConfiguration.GenericControls.DefaultCss"
                autocomplete="instagramprofileurl" placeholder="@EnterInstagramProfileURL" />
                <ValidationMessage For="() => Input.InstagramProfileUrl" />
            </div>
            <div class="@ThemeConfiguration.Divisions.DefaultCss">
                <label for="xformerlytwitterurl"
                class="@ThemeConfiguration.Labels.DefaultCss">@localizer[XFormerlyTwitterProfileUrlTextKey]</label>
                <InputText @bind-Value="Input.XformerlyTwitterUrl"
                class="@ThemeConfiguration.GenericControls.DefaultCss"
                autocomplete="xformerlytwitterurl" placeholder="@EnterXFormerlyTwitterProfileURL" />
                <ValidationMessage For="() => Input.XformerlyTwitterUrl" />
            </div>
            <div class="@ThemeConfiguration.Divisions.DefaultCss">
                <label for="websiteurl"
                class="@ThemeConfiguration.Labels.DefaultCss">@localizer[WebsiteUrlTextKey]</label>
                <InputText @bind-Value="Input.WebsiteUrl"
                class="@ThemeConfiguration.GenericControls.DefaultCss"
                autocomplete="websiteUrl" placeholder="@EnterWebsiteURL" />
                <ValidationMessage For="() => Input.WebsiteUrl" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">@localizer[RegisterTextKey]</button>
        </EditForm>
    </div>
    <div class="col-md-6 col-md-offset-2">
        <section>
            <h3>@localizer[UseAnotherServiceToRegisterTextKey]</h3>
            <hr />
            <ExternalLoginPicker />
        </section>
    </div>
</div>

@code {

    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();
        user.Name = Input.Name;
        user.Lastname = Input.Lastname;
        if (!String.IsNullOrWhiteSpace(Input.LinkedInProfileUrl))
        {
            user.LinkedInProfileUrl = Input.LinkedInProfileUrl;
        }
        if (!String.IsNullOrWhiteSpace(Input.InstagramProfileUrl))
        {
            user.InstagramProfileUrl = Input.InstagramProfileUrl;
        }
        if (!String.IsNullOrWhiteSpace(Input.XformerlyTwitterUrl))
        {
            user.XformerlyTwitterUrl = Input.XformerlyTwitterUrl;
        }
        if (!String.IsNullOrWhiteSpace(Input.WebsiteUrl))
        {
            user.WebsiteUrl = Input.WebsiteUrl;
        }
        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        Logger.LogInformation("User created a new account with password.");

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo(
                "Account/RegisterConfirmation",
                new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"{localizer[CantCreateAnInstanceOfTextKey, nameof(ApplicationUser)]}. " +
                $"{localizer[EnsureClassIsValidTextKey, nameof(ApplicationUser)]}.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException($"{DefaultUIRequiresUserStoreWithEmailTextKey}.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    #region Resource Keys
    [ResourceKey(defaultValue: "Register")]
    public const string RegisterTextKey = "RegisterText";
    [ResourceKey(defaultValue: "Create a new account")]
    public const string CreateNewAccountTextKey = "CreateNewAccountText";
    [ResourceKey(defaultValue: "Password")]
    public const string PasswordTextKey = "PasswordText";
    public string PasswordText => localizer[PasswordTextKey];
    [ResourceKey(defaultValue: "Confirm Password")]
    public const string ConfirmPasswordTextKey = "ConfirmPasswordText";
    [ResourceKey(defaultValue: "Name")]
    public const string NameTextKey = "NameText";
    public string NameText => localizer[NameTextKey];
    [ResourceKey(defaultValue: "Email")]
    public const string EmailTextKey = "EmailText";
    [ResourceKey(defaultValue: "Lastname")]
    public const string LastnameTextKey = "LastnameText";
    public string LastnameText => localizer[LastnameTextKey];
    [ResourceKey(defaultValue: "LinkedIn Profile Url")]
    public const string LinkedInProfileUrlTextKey = "LinkedInProfileUrlText";
    [ResourceKey(defaultValue: "Please enter your Linkedin profile URL")]
    public const string EnterLinkedInProfileURLTextKey = "EnterLinkedInProfileURLText";
    public string EnterLinkedInProfileURL => localizer[EnterLinkedInProfileURLTextKey];
    [ResourceKey(defaultValue: "Instagram Profile Url")]
    public const string InstagramProfileUrlTextKey = "InstagramProfileUrlText";
    [ResourceKey(defaultValue: "Please enter your Instagram profile URL")]
    public const string EnterInstagramProfileTextKey = "EnterInstagramProfileText";
    public string EnterInstagramProfileURL => localizer[EnterInstagramProfileTextKey];
    [ResourceKey(defaultValue: "X (formerlyTwitter) Profile Url")]
    public const string XFormerlyTwitterProfileUrlTextKey = "XFormerlyTwitterProfileUrlText";
    [ResourceKey(defaultValue: "Please enter your X(formerly Twitter) profile URL")]
    public const string EnterXFormerlyTwitterProfileURLTextKey = "EnterXFormerlyTwitterProfileURLText";
    public string EnterXFormerlyTwitterProfileURL => localizer[EnterXFormerlyTwitterProfileURLTextKey];
    [ResourceKey(defaultValue: "Website Url")]
    public const string WebsiteUrlTextKey = "WebsiteUrlText";
    [ResourceKey(defaultValue: "Please enter your Website URL")]
    public const string EnterWebsiteURLTextKey = "EnterWebsiteURLText";
    public string EnterWebsiteURL => localizer[EnterWebsiteURLTextKey];
    [ResourceKey(defaultValue: "Use another service to register")]
    public const string UseAnotherServiceToRegisterTextKey = "UseAnotherServiceToRegisterText";
    [ResourceKey(defaultValue: "Can't create an instance of '{0}'")]
    public const string CantCreateAnInstanceOfTextKey = "CantCreateAnInstanceOfText";
    [ResourceKey(defaultValue: "Ensure that '{0}' is not an abstract class and has a parameterless constructor")]
    public const string EnsureClassIsValidTextKey = "EnsureClassIsValidText";
    [ResourceKey(defaultValue: "The default UI requires a user store with email support")]
    public const string DefaultUIRequiresUserStoreWithEmailTextKey = "DefaultUIRequiresUserStoreWithEmailText";
    [ResourceKey(defaultValue: "Close")]
    public const string CloseTextKey = "CloseText";
    [ResourceKey(defaultValue: "By creating an account you accept the following")]
    public const string UserAcceptanceTextKey = "UserAcceptanceText";
    [ResourceKey(defaultValue: "Privacy Policy")]
    private const string PrivacyPolicyTextKey = "PrivacyPolicyText";
    [ResourceKey(defaultValue: "Usage Terms")]
    public const string UsageTermsTextKey = "UsageTermsText";
    #endregion Resource Keys
}
