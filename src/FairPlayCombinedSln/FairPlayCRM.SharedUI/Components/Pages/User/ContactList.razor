@implements IAsyncDisposable

@using FairPlayCombined.Common
@using FairPlayCombined.Common.CustomAttributes
@using FairPlayCombined.Interfaces.Common
@using FairPlayCombined.Models.Common.Contact
@using Microsoft.Extensions.Localization

@attribute [Route(Constants.Routes.FairPlayCrmRoutes.UserRoutes.ListContacts)]
@attribute [Authorize]

@inject IStringLocalizer<ContactList> localizer
@inject IContactService contactService

<PageTitle>@nameof(FairPlayCRM) - @localizer[ListContactsPageTitleTextKey]</PageTitle>

<h3>
    @localizer[ListContactsPageTitleTextKey]
</h3>

<LoadingIndicator ShowSpinners="@this.IsBusy"></LoadingIndicator>

@if (this.ItemsProvider != null)
{
    <div style="display: table; table-layout: fixed; width: 100%;">
        <div style="overflow-x: auto;">
            <FluentDataGrid ItemsProvider="@this.ItemsProvider" Pagination="@paginationState">
                <TemplateColumn Title="Information">
                    <div>
                        <FluentLabel Typo="Typography.Body" Weight="FontWeight.Bold">
                            @($"{context.Name} {context.Lastname}")
                        </FluentLabel>
                    </div>
                    <div>
                        <FluentStack Orientation="Orientation.Horizontal" Wrap="true">
                            @if (!String.IsNullOrWhiteSpace(context.EmailAddress))
                            {
                                <FluentLabel Typo="Typography.Body">
                                    <FluentAnchor Type="" Href="@($"mailto:{context.EmailAddress}")" Target="_blank">
                                        <FluentIcon Value="@(new Icons.Regular.Size16.Globe())"
                                                    Color="Color.Accent" Slot="start"></FluentIcon>
                                        Email
                                    </FluentAnchor>
                                </FluentLabel>
                            }
                            @if (!String.IsNullOrWhiteSpace(context.BusinessPhoneNumber))
                            {
                                <FluentLabel Typo="Typography.Body">
                                    <FluentAnchor Type="" Href="@($"tel:{context.BusinessPhoneNumber}")" Target="_blank">
                                        <FluentIcon Value="@(new Icons.Regular.Size16.Phone())"
                                                    Color="Color.Accent" Slot="start"></FluentIcon>
                                        Business Phone Number
                                    </FluentAnchor>
                                </FluentLabel>
                            }
                            @if (!String.IsNullOrWhiteSpace(context.MobilePhoneNumber))
                            {
                                <FluentLabel Typo="Typography.Body">
                                    <FluentAnchor Type="" Href="@($"tel:{context.MobilePhoneNumber}")" Target="_blank">
                                        <FluentIcon Value="@(new Icons.Regular.Size16.Phone())"
                                                    Color="Color.Accent" Slot="start"></FluentIcon>
                                        Mobile Phone Number
                                    </FluentAnchor>
                                </FluentLabel>
                            }
                            @if (!String.IsNullOrWhiteSpace(context.LinkedInProfileUrl))
                            {
                                <FluentLabel Typo="Typography.Body">
                                    <FluentAnchor Href="@context.LinkedInProfileUrl" Target="_blank">
                                        <FluentIcon Value="@(new Icons.Regular.Size16.Globe())"
                                                    Color="Color.Accent" Slot="start"></FluentIcon>
                                        LinkedIn
                                    </FluentAnchor>
                                </FluentLabel>
                            }
                            @if (!String.IsNullOrWhiteSpace(context.InstagramUrl))
                            {
                                <FluentLabel Typo="Typography.Body">
                                    <FluentAnchor Href="@context.InstagramUrl" Target="_blank">
                                        <FluentIcon Value="@(new Icons.Regular.Size16.Globe())"
                                                    Color="Color.Accent" Slot="start"></FluentIcon>
                                        Instagram
                                    </FluentAnchor>
                                </FluentLabel>
                            }
                            @if (!String.IsNullOrWhiteSpace(context.YouTubeChannelUrl))
                            {
                                <FluentLabel Typo="Typography.Body">
                                    <FluentAnchor Href="@context.YouTubeChannelUrl" Target="_blank">
                                        <FluentIcon Value="@(new Icons.Regular.Size16.Globe())"
                                                    Color="Color.Accent" Slot="start"></FluentIcon>
                                        YouTube Channel
                                    </FluentAnchor>
                                </FluentLabel>
                            }
                            @if (!String.IsNullOrWhiteSpace(context.XformerlyTwitterUrl))
                            {
                                <FluentLabel Typo="Typography.Body">
                                    <FluentAnchor Href="@context.XformerlyTwitterUrl" Target="_blank">
                                        <FluentIcon Value="@(new Icons.Regular.Size16.Globe())"
                                                    Color="Color.Accent" Slot="start"></FluentIcon>
                                        X (Formerly Twitter)
                                    </FluentAnchor>
                                </FluentLabel>
                            }
                        </FluentStack>
                    </div>
                </TemplateColumn>
            </FluentDataGrid>
        </div>
    </div>
    <FluentPaginator State="@this.paginationState"></FluentPaginator>
}

@code {
    private GridItemsProvider<ContactModel>? ItemsProvider { get; set; }
    private PaginationState paginationState { get; set; } = new()
        {
            ItemsPerPage = FairPlayCombined.Common.Constants.Pagination.PageSize
        };
    private readonly CancellationTokenSource cancellationTokenSource = new();
    private bool IsBusy { get; set; }

    protected override void OnInitialized()
    {
        ItemsProvider ??= async req =>
        {
            this.IsBusy = true;
            StateHasChanged();
            PaginationRequest paginationRequest = new()
                {
                    PageSize = paginationState.ItemsPerPage,
                    StartIndex = req.StartIndex,
                    SortingItems = new SortingItem[]
                    {
                        new SortingItem()
                        {
                            PropertyName=nameof(ContactModel.Name),
                            SortType = FairPlayCombined.Common.GeneratorsAttributes.SortType.Ascending
                        },
                        new SortingItem()
                        {
                            PropertyName=nameof(ContactModel.Lastname),
                            SortType = FairPlayCombined.Common.GeneratorsAttributes.SortType.Ascending
                        }
                    }
                };
            var items = await this.contactService.GetPaginatedContactAsync(paginationRequest, this.cancellationTokenSource.Token);
            var result = GridItemsProviderResult.From<ContactModel>(items.Items!, items.TotalItems);
            this.IsBusy = false;
            StateHasChanged();
            return result;
        };
    }

    public ValueTask DisposeAsync()
    {
        this.cancellationTokenSource.Cancel(throwOnFirstException: false);
        this.cancellationTokenSource.Dispose();
        return ValueTask.CompletedTask;
    }

    #region Resource Keys
    [ResourceKey(defaultValue: "List Contacts")]
    public const string ListContactsPageTitleTextKey = "ListContactsPageTitleText";
    #endregion Resource Keys
}
