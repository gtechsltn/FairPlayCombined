@page "/"
@using Blazored.Toast.Services
@using FairPlayCombined.Common.FairPlaySocial
@using FairPlayCombined.Common.GeneratorsAttributes
@using FairPlayCombined.Interfaces
@using FairPlayCombined.Models.FairPlaySocial.Notification
@using FairPlayCombined.Models.FairPlaySocial.Post
@using FairPlayCombined.Models.Pagination
@using FairPlayCombined.Services.FairPlaySocial
@using FairPlaySocial.Components.Spinners
@using Microsoft.AspNetCore.SignalR.Client
@rendermode RenderMode.InteractiveServer
@attribute [StreamRendering(enabled: true)]
@inject PostService postService
@inject IToastService toastService
@inject NavigationManager navigationManager
@inject IUserProviderService userProviderSerice

<PageTitle>Home</PageTitle>

<LoadingIndicator ShowSpinners="this.IsBusy"></LoadingIndicator>
<div class="grid-container">
    <QuickGrid ItemsProvider="ItemsProvider" Pagination="paginationState">
        <TemplateColumn>
            <div class="card">
                @if (context.PhotoId != null)
                {
                    <img src="@($"api/photoimage/{context.PhotoId}")" class="card-img-top" alt="...">
                }
                <div class="card-body">
                    <h5 class="card-title">
                        @context.OwnerApplicationUserName
                    </h5>
                    <p class="card-text">
                        @context.Text
                    </p>
                    <a href="#" class="btn btn-primary">Go somewhere</a>
                </div>
            </div>
        </TemplateColumn>
    </QuickGrid>
</div>
<div class="mb-3">
    <Paginator State="paginationState"></Paginator>
</div>
<AuthorizeView Context="authContext">
    <Authorized>
        <EditForm FormName="frmCreatePost" Model="this.createPostModel"
                  OnValidSubmit="OnValidCreatePostAsync" Enhance>
            <div class="mb-3">
                <label class="form-label">New Post Text</label>
                <InputText class="form-control" @bind-Value="this.createPostModel.Text"></InputText>
            </div>
            <div class="mb-3">
                <button class="btn btn-primary" type="submit">Send</button>
            </div>
        </EditForm>
    </Authorized>
</AuthorizeView>


@code {
    [SupplyParameterFromForm(FormName = "frmCreatePost")]
    private CreatePostModel createPostModel { get; set; } = new();

    private const string PendingNotificationsMessage = """You have pending notifications. Refresh page to reflect latest changes""";
    private HubConnection? HubConnection { get; set; }
    private Queue<PostNotificationModel> NotificationsQueue { get; set; } = new();
    private GridItemsProvider<PostModel>? ItemsProvider;
    PaginationState paginationState = new()
        {
            ItemsPerPage = FairPlayCombined.Common.Constants.Pagination.PageSize
        };
    private CancellationTokenSource cancellationTokenSource = new();
    private bool IsBusy { get; set; }
    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationStateTask { get; set; }
    protected override async Task OnInitializedAsync()
    {
        var state = await AuthenticationStateTask!;
        if (state.User.Identity != null && state.User.Identity.IsAuthenticated)
        {
            this.createPostModel = new()
                {
                    OwnerApplicationUserId = this.userProviderSerice.GetCurrentUserId()
                };
        }
        ItemsProvider = async req =>
        {
            this.IsBusy = true;
            StateHasChanged();
            PaginationRequest paginationRequest = new PaginationRequest()
                {
                    PageSize = paginationState.ItemsPerPage,
                    StartIndex = req.StartIndex,
                    SortingItems = req.GetSortByProperties().Select(p => new SortingItem()
                    {
                        PropertyName = p.PropertyName,
                        SortType = p.Direction == SortDirection.Ascending ? SortType.Ascending : SortType.Descending
                    }).ToArray()
                };

            var items = await this.postService
        .GetPaginatedPostWithCustomProjectionAsync(paginationRequest,
        p => new PostModel()
            {
                PostId = p.PostId,
                PostVisibilityId = p.PostVisibilityId,
                PhotoId = p.PhotoId,
                PostTypeId = p.PostTypeId,
                ReplyToPostId = p.ReplyToPostId,
                GroupId = p.GroupId,
                Text = p.Text,
                OwnerApplicationUserId = p.OwnerApplicationUserId,
                OwnerApplicationUserName = p.OwnerApplicationUser.UserName
            }, cancellationToken: this.cancellationTokenSource.Token
        );
            var result = GridItemsProviderResult.From<PostModel>(items!.Items!, items.TotalItems);
            this.IsBusy = false;
            StateHasChanged();
            return result;
        };
        var hubUrl = navigationManager.ToAbsoluteUri(FairPlayCombined.Common.FairPlaySocial.Constants.Hubs.HomeFeedHub);
        this.HubConnection = new HubConnectionBuilder()
            .WithUrl(hubUrl)
            .Build();
        this.HubConnection.On(Constants.Hubs.ReceiveMessage,
            (Action<PostNotificationModel>)(async (model) =>
        {
            await InvokeAsync(() =>
            {
                this.NotificationsQueue.Enqueue(model);
                if (this.NotificationsQueue.Count == 1)
                    this.toastService!
                        .ShowSuccess(PendingNotificationsMessage);
                StateHasChanged();
            });
        }));
        await this.HubConnection.StartAsync();
    }

    private async Task OnValidCreatePostAsync()
    {
        try
        {
            var postId = 
            await this.postService
            .CreatePostAsync(this.createPostModel, this.cancellationTokenSource.Token);
            this.createPostModel.Text = String.Empty;
            await this.postService
            .SendPostCreatedNotificationAsync(postId, this.cancellationTokenSource.Token);
            await this.paginationState.SetCurrentPageIndexAsync(0);
        }
        catch (Exception ex)
        {
            this.toastService.ShowError(ex.Message);
        }
    }
}