@page "/User/MyFunds"
@implements IAsyncDisposable

@attribute [Authorize(Roles = FairPlayCombined.Common.Constants.RoleName.BasicPlanUser)]

@using FairPlayCombined.Interfaces.Common
@using FairPlayTube.SharedUI.Components.PayPal

@rendermode @(new InteractiveServerRenderMode(prerender:false))
@inject IUserFundService userFundService
@inject IToastService toastService

@if (this.AvailableFunds != null)
{
    <FluentLabel Typo="Typography.Header">Available Funds: @(this.AvailableFunds.Value.ToString("c"))</FluentLabel>
}
<PayPalCheckout OnFundsAdded="OnFundsAdded"></PayPalCheckout>
@code
{
    private decimal? AvailableFunds { get; set; }
    private readonly CancellationTokenSource cancellationTokenSource = new();
    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadDataAsync();
        }
        catch (Exception ex)
        {
            this.toastService.ShowError(ex.Message);
        }
    }

    private async Task LoadDataAsync()
    {
        this.AvailableFunds = await this.userFundService
        .GetMyAvailableFundsAsync(this.cancellationTokenSource.Token);
        StateHasChanged();
    }

    private async Task OnFundsAdded()
    {
        await LoadDataAsync();
    }

    public async ValueTask DisposeAsync()
    {
        await this.cancellationTokenSource.CancelAsync();
        this.cancellationTokenSource.Dispose();
    }
}