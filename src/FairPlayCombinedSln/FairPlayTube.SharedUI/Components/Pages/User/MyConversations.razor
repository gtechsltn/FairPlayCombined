@page "/User/MyConversations"
@implements IDisposable

@attribute [Authorize(Roles = FairPlayCombined.Common.Constants.RoleName.BasicPlanUser)]

@using FairPlayCombined.Interfaces.Common
@using FairPlayCombined.Interfaces.FairPlayTube
@using FairPlayCombined.Models.Common.AspNetUsers
@using FairPlayCombined.Models.FairPlayTube.Conversation
@using FairPlayCombined.Models.Common.UserMessage
@using FairPlayCombined.Models.Pagination
@using FairPlayTube.SharedUI.Components.Spinners


@rendermode @(new InteractiveServerRenderMode(prerender:false))
@attribute [StreamRendering(enabled: true)]

@inject IUserMessageService userMessageService
@inject IToastService toastService
@inject IAspNetUsersService aspNetUsersService

<PageTitle>MyConversations</PageTitle>

<FluentLabel Typo="Typography.H3">
    MyConversations
</FluentLabel>

<LoadingIndicator ShowSpinners="this.IsBusy"></LoadingIndicator>

<div class="container">
    <div class="row" style="max-height:250px;">
        <div class="col">
            <div class="@ThemeConfiguration.Grids.GridContainerCss">
                <FluentDataGrid ItemsProvider="AspNetUsersItemsProvider" Pagination="this.paginationState">
                    <TemplateColumn>
                        <FluentButton Appearance="Appearance.Lightweight" Type="ButtonType.Button" OnClick="@( async () => await SelectUserAsync(context))"
                                      aria-current="true">
                            @if (context.Id == this.SelectedUser?.Id)
                            {
                                <strong>
                                    @context.UserName
                                </strong>
                            }
                            else
                            {
                                @context.UserName
                            }
                        </FluentButton>
                    </TemplateColumn>
                </FluentDataGrid>
                <FluentPaginator State="this.paginationState"></FluentPaginator>
            </div>
        </div>
        <div class="col" style="max-height: 250px; overflow:auto;">
            @if (this.SelectedUser != null)
            {
                if (this.AllMyConversationsWithSelectedUser?.Length > 0)
                {
                    foreach (var singleConversation in this.AllMyConversationsWithSelectedUser)
                    {
                        <div class="row">
                            <div class="col">
                                <FluentCard>
                                    <FluentHeader>
                                        <strong>
                                            [@singleConversation.RowCreationDateTime!.Value.LocalDateTime]
                                            <br />
                                            @singleConversation.FromApplicationUserFullName
                                        </strong>
                                    </FluentHeader>
                                    <FluentBodyContent>
                                        @singleConversation.Message
                                    </FluentBodyContent>
                                </FluentCard>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <p>You have no conversations with this user</p>
                }
            }
            else
            {
                <p>Please select a user</p>
            }
        </div>
    </div>
    <div class="row">
        <div class="col">
            @if (this.SelectedUser != null)
            {
                <FluentEditForm Model="MessageToSend" OnValidSubmit="SendMessageAsync">
                    <div class="mb-3">
                        <DataAnnotationsValidator></DataAnnotationsValidator>
                        <FluentValidationSummary></FluentValidationSummary>
                    </div>
                    <div class="mb-3">
                        <FluentTextField style="width:100%;" @bind-Value="MessageToSend!.Message">
                        </FluentTextField>
                        <FluentButton Type="ButtonType.Submit" Appearance="Appearance.Accent">Send</FluentButton>
                    </div>
                </FluentEditForm>
            }
        </div>
    </div>
</div>

@code {
    private GridItemsProvider<AspNetUsersModel>? AspNetUsersItemsProvider;
    private readonly PaginationState paginationState = new()
        {
            ItemsPerPage = Constants.Pagination.PageSize
        };
    private bool IsBusy { get; set; }
    public AspNetUsersModel? SelectedUser { get; private set; }
    private UserMessageModel[]? AllMyConversationsWithSelectedUser { get; set; }
    private UserMessageModel? MessageToSend { get; set; } = new UserMessageModel();
    private readonly CancellationTokenSource cancellationTokenSource = new();

    protected override void OnInitialized()
    {
        this.IsBusy = true;
        AspNetUsersItemsProvider = async req =>
        {
            StateHasChanged();
            PaginationRequest paginationRequest = new()
                {
                    PageSize = paginationState.ItemsPerPage,
                    StartIndex = req.StartIndex
                };
            var items = await aspNetUsersService.GetPaginatedAspNetUsersAsync(paginationRequest,
            this.cancellationTokenSource.Token);
            StateHasChanged();
            var result = GridItemsProviderResult.From<AspNetUsersModel>(items!.Items!, items.TotalItems);
            return result;
        };
        this.IsBusy = false;
    }

    private async Task SendMessageAsync()
    {
        try
        {
            IsBusy = true;

            this.MessageToSend!.ToApplicationUserId = this.SelectedUser!.Id;
            await this.userMessageService.SendMessageAsync(this.MessageToSend,
            this.cancellationTokenSource.Token);
            await LoadMyConversationsWithSelectedUser();
            this.MessageToSend.Message = String.Empty;
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message);
        }
        finally
        {
            IsBusy = false;
        }
    }

    private async Task LoadMyConversationsWithSelectedUser()
    {
        this.AllMyConversationsWithSelectedUser =
        await this.userMessageService
        .GetMyConversationsWithUserAsync(this.SelectedUser!.Id,
        this.cancellationTokenSource.Token);
    }

    private async Task SelectUserAsync(AspNetUsersModel aspNetUsersModel)
    {
        this.SelectedUser = aspNetUsersModel;
        await LoadMyConversationsWithSelectedUser();
        StateHasChanged();
    }

    void IDisposable.Dispose()
    {
        this.cancellationTokenSource.Dispose();
    }
}
