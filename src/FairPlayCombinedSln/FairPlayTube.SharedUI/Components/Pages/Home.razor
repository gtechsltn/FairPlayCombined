@page "/"
@implements IAsyncDisposable
@using FairPlayCombined.Common
@using FairPlayCombined.Common.CustomAttributes
@using FairPlayCombined.Interfaces.Common
@using FairPlayCombined.Interfaces.FairPlayTube
@using FairPlayCombined.Models.FairPlayTube.VideoInfo
@using FairPlayCombined.Models.Pagination
@using FairPlayTube.SharedUI.Components.Spinners
@using Microsoft.Extensions.Localization

@attribute [StreamRendering(enabled: true)]

@inject IVideoInfoService videoInfoService
@inject NavigationManager navigationManager
@inject IStringLocalizer<Home> localizer
@inject IApiResolver apiResolver

<PageTitle>@localizer[HomeTextKey]</PageTitle>

<h1>@localizer[HomeTextKey]</h1>

<LoadingIndicator ShowSpinners="this.IsBusy"></LoadingIndicator>

@if (this.PageItems != null)
{
    <FluentStack Orientation="Orientation.Horizontal" Wrap="true">
        @foreach (var singleItem in this.PageItems.Value.Items)
        {
            <div>
                <div>
                    <img src="@($"{apiBaseUrl}/api/video/{singleItem.VideoId}/thumbnail")" width="300" />
                </div>
                <div>
                    <FluentLabel Alignment="HorizontalAlignment.Center"
                                 Typo="Typography.Subject"
                                 Class="multiline-text" style="width:250px; height:50px;">
                        @singleItem.Name
                    </FluentLabel>
                    <FluentLabel Typo="Typography.Body">
                        <FluentIcon Value="@(new Icons.Regular.Size20.PeopleAudience())"></FluentIcon>
                        <strong>@localizer[LifetimeSessionsTextKey]:</strong> @singleItem.LifetimeSessions</FluentLabel>
                    <FluentLabel Typo="Typography.Body">
                        <FluentIcon Value="@(new Icons.Regular.Size20.Eye())"></FluentIcon>
                        <strong>@localizer[LifetimeViewersTextKey]:</strong> @singleItem.LifetimeViewers</FluentLabel>
                    <FluentLabel Typo="Typography.Body">
                        <FluentIcon Value="@(new Icons.Regular.Size20.Timer())"></FluentIcon>
                        <strong>@localizer[WatchTimeTextKey]:</strong> @singleItem.LifetimeWatchTime</FluentLabel>
                    <FluentLabel Typo="Typography.Body">
                        <FluentIcon Value="@(new Icons.Regular.Size20.CalendarDate())"></FluentIcon>
                        <strong>@localizer[PublishedTextKey]:</strong> @singleItem.PublishedOnString</FluentLabel>
                </div>
                <div>
                    <FluentButton Type="ButtonType.Button" Appearance="Appearance.Accent"
                                  IconStart="@(new Icons.Regular.Size16.Play())"
                                  OnClick="@( () => OnPlayVideoClicked(singleItem.VideoId!))">Play</FluentButton>
                </div>
            </div>
        }
    </FluentStack>
}
<FluentPaginator State="this.paginationState" CurrentPageIndexChanged="CurrentPageIndexChanged"></FluentPaginator>

@code
{
    private bool IsBusy { get; set; }
    private GridItemsProvider<VideoInfoModel>? ItemsProvider;
    private readonly PaginationState paginationState = new()
        {
            ItemsPerPage = Constants.Pagination.PageSize
        };
    private GridItemsProviderResult<VideoInfoModel>? PageItems { get; set; }
    private readonly CancellationTokenSource cancellationTokenSource = new();
    private string apiBaseUrl => apiResolver.GetBaseUrl();
    protected override async Task OnInitializedAsync()
    {
        ItemsProvider = async req =>
        {
            this.IsBusy = true;
            StateHasChanged();
            PaginationRequest paginationRequest = new()
                {
                    PageSize = paginationState.ItemsPerPage,
                    StartIndex = req.StartIndex,
                    SortingItems = new SortingItem[]
                    {
                        new SortingItem()
                        {
                            PropertyName=nameof(VideoInfoModel.VideoInfoId),
                            SortType = FairPlayCombined.Common.GeneratorsAttributes.SortType.Descending
                        }
                    }
                };
            var items = await videoInfoService.GetPaginatedCompletedVideoInfoAsync(paginationRequest,
            this.cancellationTokenSource.Token);
            this.IsBusy = false;
            StateHasChanged();
            var result = GridItemsProviderResult.From<VideoInfoModel>(items!.Items!, items.TotalItems);
            await this.paginationState.SetTotalItemCountAsync(result.TotalItemCount);
            return result;
        };
        this.PageItems = await this.ItemsProvider(new GridItemsProviderRequest<VideoInfoModel>()
            {
                CancellationToken = this.cancellationTokenSource.Token,
                StartIndex = 0

            });
        StateHasChanged();
    }

    private void OnPlayVideoClicked(string videoId)
    {
        this.navigationManager.NavigateTo($"/Public/WatchVideo/{videoId}");
    }

    private async Task CurrentPageIndexChanged(int page)
    {
        this.PageItems = await this.ItemsProvider!(new GridItemsProviderRequest<VideoInfoModel>()
            {
                CancellationToken = this.cancellationTokenSource.Token,
                StartIndex = page

            });
    }

    public ValueTask DisposeAsync()
    {
        this.cancellationTokenSource.Dispose();
        return ValueTask.CompletedTask;
    }

    #region Resource Keys
    [ResourceKey(defaultValue: "Home")]
    public const string HomeTextKey = "HomeText";
    [ResourceKey(defaultValue: "Lifetime Sessions")]
    public const string LifetimeSessionsTextKey = "LifetimeSessionsText";
    [ResourceKey(defaultValue: "Lifetime Viewers")]
    public const string LifetimeViewersTextKey = "LifetimeViewersText";
    [ResourceKey(defaultValue: "Watch Time(hh:mm:ss)")]
    public const string WatchTimeTextKey = "WatchTimeText";
    [ResourceKey(defaultValue: "Published")]
    public const string PublishedTextKey = "PublishedText";
    [ResourceKey(defaultValue: "Play")]
    public const string PlayTextKey = "PlayText";
    #endregion
}
