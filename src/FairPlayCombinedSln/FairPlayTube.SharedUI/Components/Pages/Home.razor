@page "/"
@attribute [StreamRendering(enabled: true)]
@implements IAsyncDisposable

@using FairPlayCombined.Common
@using FairPlayCombined.Common.CustomAttributes
@using FairPlayCombined.Interfaces.Common
@using FairPlayCombined.Interfaces.FairPlayTube
@using FairPlayCombined.Models.FairPlayTube.VideoInfo
@using FairPlayCombined.Models.Pagination
@using FairPlayTube.SharedUI.Components.Html
@using FairPlayTube.SharedUI.Components.Paginators
@using FairPlayTube.SharedUI.Components.Spinners


@inject IVideoInfoService videoInfoService
@inject IStringLocalizer<Home> localizer
@inject IApiResolver apiResolver

@inject NavigationManager navigationManager
@inject PersistentComponentState ApplicationState

<HeadContent>
    <link rel="canonical" href="@this.navigationManager.Uri" />
    <meta name="description" content="FairPlayTube: Empowering creators with innovative video tools for digital marketing and entrepreneurship, helping you grow your audience and brand seamlessly" />
    <meta name="keywords" content="digital marketing, entrepreneurship, money, monetization, creator, video, content creator, YouTube, portal" />
    <meta name="robots" content="index, follow" />

    <meta name="thumbnail" content="@($"{apiBaseUrl}/favicon.png")" />

    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:site" content="@@pticostarica" />
    <meta name="twitter:title" content="FairPlayTube" />
    <meta name="twitter:description" content="FairPlayTube - The Next Generation Of Video Sharing Portals" />
    <meta name="twitter:image" content="@($"{apiBaseUrl}/favicon.png")" />

    <meta property="og:title" content="FairPlayTube" />
    <meta property="og:description" content="FairPlayTube - The Next Generation Of Video Sharing Portals" />

    <meta property="og:image" content="@($"{apiBaseUrl}/favicon.png")" />
    <meta property="og:image:secure_url" content="@($"{apiBaseUrl}/favicon.png")" />
    <meta property="og:image:type" content="image/jpeg" />
    <meta property="og:image:width" content="400" />
    <meta property="og:image:height" content="300" />
    <meta property="og:image:alt" content="FairPlayTube Logo" />


    <script type="application/ld+json">
        {
          "@@context": "https://schema.org/",
          "@@type": "WebSite",
          "name": "FairPlayTube",
          "url": "@this.navigationManager.Uri",
          "potentialAction": {
            "@@type": "SearchAction",
            "target": "@($"{this.navigationManager.Uri}?SearchTerm={{search_term_string}}")",
            "query-input": "required name=search_term_string"
          }
        }
    </script>
</HeadContent>

<PageTitle>@nameof(Constants.ApplicationTitles.FairPlayTube) - @localizer[HomeTitleTextKey]</PageTitle>

<h1>@localizer[HomeTitleTextKey]</h1>

<LoadingIndicator ShowSpinners="this.IsBusy"></LoadingIndicator>

<SharePage Description="@localizer[SharePageMessageTextKey]" Url="@this.navigationManager.Uri"></SharePage>


<FluentAccordion>
    <FluentAccordionItem Expanded="true">
        <HeadingTemplate>
            <FluentLabel Typo="Typography.H2">
                @localizer[WhatIsTextKey, nameof(Constants.ApplicationTitles.FairPlayTube)]
            </FluentLabel>
        </HeadingTemplate>
        <ChildContent>
            <FluentLabel Typo="Typography.Body">
                @localizer[WhatIsDescriptionTextKey, nameof(Constants.ApplicationTitles.FairPlayTube)]
            </FluentLabel>
        </ChildContent>
    </FluentAccordionItem>
    <FluentAccordionItem Expanded="true">
        <HeadingTemplate>
            <FluentLabel Typo="Typography.H3">
                @localizer[FeaturesTextKey]
            </FluentLabel>
        </HeadingTemplate>
        <ChildContent>
            <ul>
                <li>
                    <FluentLabel Typo="Typography.Body">
                        <FluentIcon Value="@(new Icons.Regular.Size20.Image())"></FluentIcon>
                        @localizer[FeatureCreateThumbnailTextKey]
                    </FluentLabel>
                </li>
                <li>
                    <FluentLabel Typo="Typography.Body">
                        <FluentIcon Value="@(new Icons.Regular.Size20.DocumentText())"></FluentIcon>
                        @localizer[FeatureCreateSocialMediaPostsTextKey]
                    </FluentLabel>
                </li>
            </ul>
            <div style="text-align:center;">
                <iframe style="width:100%;"
                        src="https://www.youtube.com/embed/5v2GNcrEabg?si=Rwv8MfgrcetxZmRu"
                        title="FairPlayTube Features Demo" frameborder="0"
                        allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share; xr-spatial-tracking; allowvr"
                        referrerpolicy="strict-origin-when-cross-origin"
                        allowfullscreen></iframe>
            </div>
            <div style="text-align:center;">
                <iframe style="width:100%;"
                        src="https://www.youtube.com/embed/mxXoD2YXCxQ?si=F3m6iIzQztXzEB-o"
                        title="FairPlayTube Features Demo" frameborder="0"
                        allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share; xr-spatial-tracking; allowvr"
                        referrerpolicy="strict-origin-when-cross-origin"
                        allowfullscreen></iframe>
            </div>
            <FluentLabel Color="Color.Warning">
                <FluentIcon Value="@(new Icons.Regular.Size20.Info())"></FluentIcon>
                @localizer[LimitedFuncntionalityTextKey]:
                <FluentAnchor data-enhance-nav="false" Appearance="Appearance.Hypertext"
                              Target="_blank"
                              Href="https://us11.list-manage.com/contact-form?u=8b82a1556651be6b90abb39cb&form_id=ec99fae0af90bd739e8a29962e37657a">
                    @localizer[RequestDemoTextKey]
                </FluentAnchor>
            </FluentLabel>
        </ChildContent>
    </FluentAccordionItem>
    <FluentAccordionItem Expanded="true">
        <HeadingTemplate>
            <FluentLabel Typo="Typography.H3">
                @localizer[VideosTextKey]
            </FluentLabel>
        </HeadingTemplate>
        <ChildContent>
            <CustomFluentPaginator State="this.paginationState" CurrentPageIndexChanged="CurrentPageIndexChanged">
            </CustomFluentPaginator>

            @if (this.PageItems != null)
            {
                <FluentStack Orientation="Orientation.Horizontal" Wrap="true">
                    @foreach (var singleItem in this.PageItems.Value.Items)
                    {
                        <div>
                            <div>
                                <FluentButton Type="ButtonType.Button" Appearance="Appearance.Accent"
                                style="width:100%;"
                                IconStart="@(new Icons.Regular.Size16.Play())"
                                OnClick="@( () => OnPlayVideoClicked(singleItem.VideoId!))">@localizer[PlayVideoTextKey]</FluentButton>
                            </div>
                            <div>
                                <Image Src="@($"{apiBaseUrl}/api/video/{singleItem.VideoId}/thumbnail")"
                                Width="300" Alt="@singleItem.Name">
                                </Image>
                            </div>
                            <div>
                                <FluentLabel Alignment="HorizontalAlignment.Center"
                                Typo="Typography.Body" Weight="FontWeight.Bold"
                                Class="multiline-text" style="width:250px; height:50px;">
                                    @singleItem.Name
                                </FluentLabel>
                                <FluentAccordion>
                                    <FluentAccordionItem Expanded="true">
                                        <HeadingTemplate>
                                            <FluentLabel Typo="Typography.Body" Weight="FontWeight.Bold">@localizer[VideoDescriptionTextKey]</FluentLabel>
                                        </HeadingTemplate>
                                        <ChildContent>
                                            <FluentTextArea Rows="3" style="width:100%;" Value="@singleItem.Description"></FluentTextArea>
                                        </ChildContent>
                                    </FluentAccordionItem>
                                    <FluentAccordionItem Heading=@localizer[VideoMoreInfoTextKey] Expanded="true">
                                        <HeadingTemplate>
                                            <FluentLabel Weight="FontWeight.Bold">@localizer[VideoMoreInfoTextKey]</FluentLabel>
                                        </HeadingTemplate>
                                        <ChildContent>
                                            <FluentLabel Typo="Typography.Body">
                                                <FluentIcon Value="@(new Icons.Regular.Size20.PeopleAudience())"></FluentIcon>
                                                <strong>@localizer[LifetimeSessionsTextKey]:</strong> @singleItem.LifetimeSessions
                                            </FluentLabel>
                                            <FluentLabel Typo="Typography.Body">
                                                <FluentIcon Value="@(new Icons.Regular.Size20.Eye())"></FluentIcon>
                                                <strong>@localizer[LifetimeViewersTextKey]:</strong> @singleItem.LifetimeViewers
                                            </FluentLabel>
                                            <FluentLabel Typo="Typography.Body">
                                                <FluentIcon Value="@(new Icons.Regular.Size20.Timer())"></FluentIcon>
                                                <strong>@localizer[WatchTimeTextKey]:</strong> @singleItem.LifetimeWatchTime
                                            </FluentLabel>
                                            <FluentLabel Typo="Typography.Body">
                                                <FluentIcon Value="@(new Icons.Regular.Size20.CalendarDate())"></FluentIcon>
                                                <strong>@localizer[PublishedTextKey]:</strong> @singleItem.PublishedOnString
                                            </FluentLabel>
                                        </ChildContent>
                                    </FluentAccordionItem>
                                </FluentAccordion>
                            </div>
                        </div>
                    }
                </FluentStack>
            }

            <FluentPaginator State="this.paginationState" CurrentPageIndexChanged="CurrentPageIndexChanged">
                <PaginationTextTemplate>
                    @localizer[PaginatorTextKey, this.paginationState.CurrentPageIndex + 1, this.paginationState.LastPageIndex!.Value + 1]
                </PaginationTextTemplate>
                <SummaryTemplate>
                    @localizer[PaginatorSummaryTextKey, this.paginationState.TotalItemCount!.Value]
                </SummaryTemplate>
            </FluentPaginator>
        </ChildContent>
    </FluentAccordionItem>
    <FluentAccordionItem Expanded="true">
        <HeadingTemplate>
            <FluentLabel Typo="Typography.H3">
                @localizer[ScheduleMeetingTextKey]
            </FluentLabel>
        </HeadingTemplate>
        <ChildContent>
            <!-- Calendly inline widget begin -->
            <div class="calendly-inline-widget" data-url="https://calendly.com/eduardo-fonseca" style="min-width:320px;height:700px;"></div>
            <script type="text/javascript" src="https://assets.calendly.com/assets/external/widget.js" async></script>
            <!-- Calendly inline widget end -->
        </ChildContent>
    </FluentAccordionItem>
    <FluentAccordionItem Expanded="true">
        <HeadingTemplate>
            <FluentLabel Typo="Typography.H3">
                @localizer[SubscribeToNewsletterTextKey]
            </FluentLabel>
        </HeadingTemplate>
        <ChildContent>
            <FairPlayTube.SharedUI.Components.Mailchimp.EmbeddedForm></FairPlayTube.SharedUI.Components.Mailchimp.EmbeddedForm>
        </ChildContent>
    </FluentAccordionItem>
</FluentAccordion>

@code
{
    [Parameter]
    [SupplyParameterFromQuery]
    public string? SearchTerm { get; set; }
    private bool IsBusy { get; set; }
    private GridItemsProvider<VideoInfoModel>? ItemsProvider;
    private readonly PaginationState paginationState = new()
        {
            ItemsPerPage = Constants.Pagination.PageSize
        };
    private GridItemsProviderResult<VideoInfoModel>? PageItems { get; set; }
    private readonly CancellationTokenSource cancellationTokenSource = new();
    private string apiBaseUrl => apiResolver.GetBaseUrl();
    private PersistingComponentStateSubscription persistingSubscription;

    private Task PersistData()
    {
        //Check https://learn.microsoft.com/en-us/aspnet/core/blazor/components/prerender?view=aspnetcore-9.0
        ApplicationState.PersistAsJson<GridItemsProviderResult<VideoInfoModel>?>(nameof(PageItems), this.PageItems);
        return Task.CompletedTask;
    }

    protected override async Task OnInitializedAsync()
    {
        persistingSubscription =
            ApplicationState.RegisterOnPersisting(PersistData);

        ItemsProvider = async req =>
        {
            this.IsBusy = true;
            StateHasChanged();
            PaginationRequest paginationRequest = new()
                {
                    PageSize = paginationState.ItemsPerPage,
                    StartIndex = req.StartIndex,
                    SortingItems = new SortingItem[]
                    {
                        new SortingItem()
                        {
                            PropertyName=nameof(VideoInfoModel.VideoInfoId),
                            SortType = FairPlayCombined.Common.GeneratorsAttributes.SortType.Descending
                        }
                    }
                };
            var items = await videoInfoService.GetPaginatedCompletedVideoInfoAsync(paginationRequest,
                this.SearchTerm,
            this.cancellationTokenSource.Token);
            this.IsBusy = false;
            StateHasChanged();
            var result = GridItemsProviderResult.From<VideoInfoModel>(items!.Items!, items.TotalItems);
            return result;
        };
        if (!ApplicationState.TryTakeFromJson<GridItemsProviderResult<VideoInfoModel>?>(
                nameof(this.PageItems), out var restoredPageItems))
        {
            this.PageItems = await this.ItemsProvider(new GridItemsProviderRequest<VideoInfoModel>()
                {
                    CancellationToken = this.cancellationTokenSource.Token,
                    StartIndex = 0
                });
        }
        else
        {
            this.PageItems = restoredPageItems;
        }
        await this.paginationState.SetTotalItemCountAsync(PageItems?.TotalItemCount ?? 0);
        StateHasChanged();
    }

    private void OnPlayVideoClicked(string videoId)
    {
        this.navigationManager.NavigateTo($"/Public/WatchVideo/{videoId}");
    }

    private async Task CurrentPageIndexChanged(int page)
    {
        this.PageItems = await this.ItemsProvider!(new GridItemsProviderRequest<VideoInfoModel>()
            {
                CancellationToken = this.cancellationTokenSource.Token,
                StartIndex = page * this.paginationState.ItemsPerPage
            });
    }

    public ValueTask DisposeAsync()
    {
        this.cancellationTokenSource.Dispose();
        this.persistingSubscription.Dispose();
        return ValueTask.CompletedTask;
    }

    #region Resource Keys
    [ResourceKey(defaultValue: "The Next Generation Of Video Sharing Portals")]
    public const string HomeTitleTextKey = "HomeTitleText";
    [ResourceKey(defaultValue: "Lifetime Sessions")]
    public const string LifetimeSessionsTextKey = "LifetimeSessionsText";
    [ResourceKey(defaultValue: "Lifetime Viewers")]
    public const string LifetimeViewersTextKey = "LifetimeViewersText";
    [ResourceKey(defaultValue: "Watch Time(hh:mm:ss)")]
    public const string WatchTimeTextKey = "WatchTimeText";
    [ResourceKey(defaultValue: "Published")]
    public const string PublishedTextKey = "PublishedText";
    [ResourceKey(defaultValue: "Play")]
    public const string PlayTextKey = "PlayText";
    [ResourceKey(defaultValue: "Features")]
    public const string FeaturesTextKey = "FeaturesText";
    [ResourceKey(defaultValue: "Create Thumbnails Tailored To Your Video")]
    public const string FeatureCreateThumbnailTextKey = "FeatureCreateThumbnailText";
    [ResourceKey(defaultValue: "Create Social Media Posts Tailored To Your Video")]
    public const string FeatureCreateSocialMediaPostsTextKey = "FeatureCreateSocialMediaPostsText";
    [ResourceKey(defaultValue: "Description")]
    public const string VideoDescriptionTextKey = "VideoDescriptionText";
    [ResourceKey(defaultValue: "More Info")]
    public const string VideoMoreInfoTextKey = "VideoMoreInfoText";
    [ResourceKey(defaultValue: "Play Video")]
    public const string PlayVideoTextKey = "PlayVideoText";
    [ResourceKey(defaultValue: "What is {0}")]
    public const string WhatIsTextKey = "WhatIsText";
    [ResourceKey(defaultValue: "{0} is The Next Generation Of Video Sharing Portals focused on Users and Transparency. A platform which helps you improve your digital marketing strategies surrounding your video. Ideal for entrepreneurs, and content-creators.")]
    public const string WhatIsDescriptionTextKey = "WhatIsDescriptionText";
    [ResourceKey(defaultValue: "Check out FairPlayTube: The Next Generation of Video Sharing, empowering entrepreneurs, digital marketers, and those impacted by global layoffs!")]
    public const string SharePageMessageTextKey = "SharePageMessageTextKey";
    [ResourceKey(defaultValue: "Page {0} of {1}")]
    public const string PaginatorTextKey = "PaginatorText";
    [ResourceKey(defaultValue: "Total Items: {0}")]
    public const string PaginatorSummaryTextKey = "PaginatorSummaryText";
    [ResourceKey(defaultValue: "This published version is intentionally limited in functionality. To learn about the current full capabilities use the following link")]
    public const string LimitedFuncntionalityTextKey = "LimitedFuncntionalityText";
    [ResourceKey(defaultValue: "Request a Demo")]
    public const string RequestDemoTextKey = "RequestDemoText";
    [ResourceKey(defaultValue: "Videos")]
    public const string VideosTextKey = "VideosText";
    [ResourceKey(defaultValue: "Schedule a Meeting")]
    public const string ScheduleMeetingTextKey = "ScheduleMeetingText";
    [ResourceKey(defaultValue: "Subscribe to newsletter")]
    public const string SubscribeToNewsletterTextKey = "SubscribeToNewsletterText";
    #endregion Resource Keys
}
