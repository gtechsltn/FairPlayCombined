@attribute [Route($"{Constants.Routes.FairPlayTubeRoutes.CreatorRoutes.VideoDailyPosts}/{{VideoInfoId:long}}")]
@implements IDisposable

@attribute [Authorize(Roles = FairPlayCombined.Common.Constants.RoleName.BasicPlanUser)]

@using FairPlayCombined.Common
@using FairPlayCombined.Common.GeneratorsAttributes
@using FairPlayCombined.Interfaces
@using FairPlayCombined.Interfaces.Common
@using FairPlayCombined.Interfaces.FairPlayTube
@using FairPlayCombined.Models.Common.Localization
@using FairPlayCombined.Models.FairPlayTube.VideoDigitalMarketingDailyPosts
@using FairPlayCombined.Models.FairPlayTube.VideoInfo
@using FairPlayCombined.Models.Pagination
@using FairPlayTube.SharedUI.Components.Spinners
@using System.Text


@inject IJSRuntime jsRuntime
@inject IVideoDigitalMarketingDailyPostsService videoDigitalMarketingDailyPostsService
@inject IToastService toastService

<PageTitle>
    Video Daily Posts
</PageTitle>

<FluentLabel Typo="Typography.H3">
    Video Daily Posts
</FluentLabel>

<LoadingIndicator ShowSpinners="this.IsBusy"></LoadingIndicator>

<div>
    <FluentSelect Appearance="Appearance.Accent"
                  @bind-SelectedOption="@this.SelectedCulture"
                  Items="@this.CaptionsCultures"
                  Label="Posts Language"
                  OptionText="@(p=>p!.DisplayName!)"
                  OptionValue="@(p=>p!.Name!)"></FluentSelect>
</div>
<div>
    <FluentButton Appearance="Appearance.Accent" Type="ButtonType.Button"
                  OnClick="OnCreateVideoDailyPostAsync">Create Video Daily Posts</FluentButton>
</div>

@if (this.ItemsProvider != null)
{
    <FluentDataGrid ItemsProvider="@this.ItemsProvider" Pagination="@this.paginationState">
        <TemplateColumn Class="multiline-text" Title="Posts">
            <FluentAccordion>
                <FluentAccordionItem Expanded="false" Heading="Expand to see the content">
                    @((MarkupString)context.HtmlVideoDigitalMarketingDailyPostsIdeas!)
                </FluentAccordionItem>
            </FluentAccordion>
        </TemplateColumn>
    </FluentDataGrid>
    <FluentPaginator State="@this.paginationState"></FluentPaginator>
}

<div>
    @if (!String.IsNullOrWhiteSpace(this.DigitalMarketingDailyPostsIdeas))
    {
        <p>
            @((MarkupString)this.DigitalMarketingDailyPostsIdeas)
        </p>
    }
</div>

@code
{
    [Parameter]
    public long? VideoInfoId { get; set; }
    private bool IsBusy { get; set; }
    private readonly CancellationTokenSource cancellationTokenSource = new();
    private string? DigitalMarketingDailyPostsIdeas { get; set; }
    private string? RevisedPrompt { get; set; }
    private GridItemsProvider<VideoDigitalMarketingDailyPostsModel>? ItemsProvider { get; set; }
    private CultureModel? SelectedCulture { get; set; }
    private CultureModel[]? CaptionsCultures = [
        new CultureModel()
        {
            DisplayName="English US",
            Name="en-US"
        },
    new CultureModel()
        {
            DisplayName="Spanish Mexico",
            Name="es-MX"
        }
    ];
    private readonly PaginationState paginationState = new()
        {
            ItemsPerPage = Constants.Pagination.PageSize
        };

    protected override void OnInitialized()
    {
        base.OnInitialized();
        this.SelectedCulture ??= this.CaptionsCultures!.First();
        if (ItemsProvider is null)
        {
            ItemsProvider = async req =>
            {
                this.IsBusy = true;
                StateHasChanged();
                PaginationRequest paginationRequest = new()
                    {
                        PageSize = Constants.Pagination.PageSize,
                        StartIndex = req.StartIndex,
                        SortingItems = new SortingItem[]
                    {
                        new SortingItem()
                        {
                            PropertyName=nameof(VideoDigitalMarketingDailyPostsModel.VideoDigitalMarketingDailyPostsId),
                            SortType= SortType.Descending
                        }
                    }
                    };
                var items = await this.videoDigitalMarketingDailyPostsService
                .GetPaginatedVideoDigitalMarketingDailyPostsByVideoInfoIdAsync(
                    this.VideoInfoId!.Value, paginationRequest, this.cancellationTokenSource.Token);
                var result = GridItemsProviderResult.From(items!.Items!,
                items.TotalItems);
                this.IsBusy = false;
                StateHasChanged();
                return result;
            };
        }
    }

    private async Task OnCreateVideoDailyPostAsync()
    {
        try
        {
            this.IsBusy = true;
            StateHasChanged();
            this.DigitalMarketingDailyPostsIdeas =
            await this.videoDigitalMarketingDailyPostsService
            .CreateVideoDigitalMarketingDailyPostsForLinkedInAsync(this.VideoInfoId!.Value,
                this.SelectedCulture!.Name!, this.cancellationTokenSource.Token);
            await this.paginationState.SetCurrentPageIndexAsync(
                    this.paginationState.CurrentPageIndex);
        }
        catch (Exception ex)
        {
            this.toastService.ShowError(ex.Message);
        }
        finally
        {
            this.IsBusy = false;
            StateHasChanged();
        }
    }

    void IDisposable.Dispose()
    {
        this.cancellationTokenSource.Dispose();
    }
}
