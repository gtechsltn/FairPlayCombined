@page "/Creator/VideoDailyPosts/{VideoInfoId:long}"
@implements IDisposable

@using FairPlayCombined.Common
@using FairPlayCombined.Interfaces
@using FairPlayCombined.Interfaces.Common
@using FairPlayCombined.Interfaces.FairPlayTube
@using FairPlayCombined.Models.FairPlayTube.VideoInfo
@using FairPlayCombined.Models.Pagination
@using FairPlayTube.SharedUI.Components.Spinners

@using System.Text
@rendermode @(new InteractiveServerRenderMode(prerender:false))
@inject IJSRuntime jsRuntime
@inject IVideoInfoService videoInfoService
@inject IUserProviderService userProviderService
@inject IOpenAIService openAIService
@inject IVideoCaptionsService videoCaptionsService
@inject IVideoDigitalMarketingDailyPostsService videoDigitalMarketingDailyPostsService
@inject IPromptGeneratorService promptGeneratorService

<PageTitle>
    Video Daily Posts
</PageTitle>

<FluentLabel Typo="Typography.H3">
    Video Daily Posts
</FluentLabel>

<LoadingIndicator ShowSpinners="this.IsBusy"></LoadingIndicator>


<div>
    @if (!String.IsNullOrWhiteSpace(this.DigitalMarketingDailyPostsIdeas))
    {
        <p>
            @((MarkupString)this.DigitalMarketingDailyPostsIdeas)
        </p>
    }
</div>

@code
{
    [Parameter]
    public long? VideoInfoId { get; set; }
    private bool IsBusy { get; set; }
    private readonly CancellationTokenSource cancellationTokenSource = new();
    private string? DigitalMarketingDailyPostsIdeas { get; set; }
    private string? RevisedPrompt { get; set; }

    protected override async Task OnInitializedAsync()
    {
        this.IsBusy = true;
        StateHasChanged();
        var videoInfoModel = await this.videoInfoService.GetVideoInfoByIdAsync(id: this.VideoInfoId!.Value,
        cancellationToken: this.cancellationTokenSource.Token);
        this.DigitalMarketingDailyPostsIdeas = await this.videoDigitalMarketingDailyPostsService
        .GetVideoDigitalMarketingDailyPostsAsync(
            videoInfoId: videoInfoModel.VideoInfoId,
            socialNetworkName: "LinkedIn",
            cancellationToken: this.cancellationTokenSource.Token);
        if (String.IsNullOrWhiteSpace(this.DigitalMarketingDailyPostsIdeas))
        {
            var englishCaptions = await this.videoCaptionsService
            .GetVideoCaptionsByVideoInfoIdAndLanguageAsync(videoInfoId: videoInfoModel.VideoInfoId,
            language: "en-US", cancellationToken: this.cancellationTokenSource.Token);
            var promptModel = await this.promptGeneratorService
            .GetPromptCompleteInfoAsync(Constants.PromptsNames.CreateVideoDailyPosts,
                this.cancellationTokenSource.Token);
            var systemMessage = promptModel!.BaseText!;
            var userMessage = $"Today's Date: {DateTimeOffset.UtcNow.Date}. Video Title: {videoInfoModel.Description}. Video Captions: {englishCaptions}";
            var result = await this.openAIService.GenerateChatCompletionAsync(systemMessage, userMessage, this.cancellationTokenSource.Token);
            if (result != null)
            {
                this.DigitalMarketingDailyPostsIdeas = result!.choices![0]!.message!.content!;
                await this.videoDigitalMarketingDailyPostsService
                .SaveVideoDigitalMarketingDailyPostsAsync(
                    videoInfoId: videoInfoModel.VideoInfoId,
                    htmlVideoDigitalMarketingDailyPostsIdeas: this.DigitalMarketingDailyPostsIdeas,
                    socialNetworkName: "LinkedIn",
                    cancellationToken: this.cancellationTokenSource.Token);
            }
        }
        this.IsBusy = false;
        StateHasChanged();
    }

    void IDisposable.Dispose()
    {
        this.cancellationTokenSource.Dispose();
    }
}
