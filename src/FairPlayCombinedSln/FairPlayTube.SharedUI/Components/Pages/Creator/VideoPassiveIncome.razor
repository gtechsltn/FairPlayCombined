@page "/Creator/VideoPassiveIncome/{VideoInfoId:long}"
@implements IDisposable

@using FairPlayCombined.Common
@using FairPlayCombined.Interfaces
@using FairPlayCombined.Interfaces.Common
@using FairPlayCombined.Interfaces.FairPlayTube
@using FairPlayCombined.Models.FairPlayTube.VideoInfo
@using FairPlayCombined.Models.Pagination
@using FairPlayTube.SharedUI.Components.Spinners

@rendermode @(new InteractiveServerRenderMode(prerender:false))
@inject IJSRuntime jsRuntime
@inject IVideoInfoService videoInfoService
@inject IUserProviderService userProviderService
@inject IOpenAIService openAIService
@inject IVideoCaptionsService videoCaptionsService
@inject IVideoDigitalMarketingPlanService videoDigitalMarketingPlanService
@inject IPromptGeneratorService promptGeneratorService

<PageTitle>
    Video Passive Income
</PageTitle>

<FluentLabel Typo="Typography.H3">
    Video Passive Income
</FluentLabel>

<LoadingIndicator ShowSpinners="this.IsBusy"></LoadingIndicator>


<div>
    @if (!String.IsNullOrWhiteSpace(this.PassiveIncomeIdeas))
    {
        <p>
            @((MarkupString)this.PassiveIncomeIdeas)
        </p>
    }
</div>

@code
{
    [Parameter]
    public long? VideoInfoId { get; set; }
    private bool IsBusy { get; set; }
    private readonly CancellationTokenSource cancellationTokenSource = new();
    private string? PassiveIncomeIdeas { get; set; }
    private string? RevisedPrompt { get; set; }

    protected override async Task OnInitializedAsync()
    {
        this.IsBusy = true;
        StateHasChanged();
        var videoInfoModel = await this.videoInfoService.GetVideoInfoByIdAsync(id: this.VideoInfoId!.Value,
        cancellationToken: this.cancellationTokenSource.Token);
        var englishCaptions = await this.videoCaptionsService
        .GetVideoCaptionsByVideoInfoIdAndLanguageAsync(videoInfoId: videoInfoModel.VideoInfoId,
        language: "en-US", cancellationToken: this.cancellationTokenSource.Token);
        var promptModel = await this.promptGeneratorService
        .GetPromptCompleteInfoAsync(Constants.PromptsNames.CreateVideoPassiveIncomeStrategy,
        this.cancellationTokenSource.Token);
        var systemMessage = promptModel!.BaseText!;
        var userMessage = $"Video Title: {videoInfoModel.Description}. Video Captions: {englishCaptions}";
        var result = await this.openAIService.GenerateChatCompletionAsync(systemMessage, userMessage, this.cancellationTokenSource.Token);
        this.PassiveIncomeIdeas = result!.choices![0]!.message!.content!;
        this.IsBusy = false;
        StateHasChanged();
    }

    void IDisposable.Dispose()
    {
        this.cancellationTokenSource.Dispose();
    }
}
