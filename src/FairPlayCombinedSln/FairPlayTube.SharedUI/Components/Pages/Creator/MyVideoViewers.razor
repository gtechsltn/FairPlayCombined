@attribute [Route($"{Constants.Routes.FairPlayTubeRoutes.CreatorRoutes.MyVideoViewers}/{{VideoId}}")]
@implements IAsyncDisposable

@attribute [Authorize(Roles = FairPlayCombined.Common.Constants.RoleName.BasicPlanUser)]

@using FairPlayCombined.Common
@using FairPlayCombined.Interfaces
@using FairPlayCombined.Interfaces.FairPlayTube
@using FairPlayCombined.Models.FairPlayTube.VideoInfo
@using FairPlayCombined.Models.FairPlayTube.VideoViewer
@using FairPlayCombined.Models.Pagination
@using FairPlayTube.SharedUI.Components.Paginators
@using FairPlayTube.SharedUI.Components.Spinners


<PageTitle>@Localizer![MyVideoViewersTextKey]</PageTitle>

<LoadingIndicator ShowSpinners="this.IsBusy"></LoadingIndicator>

<div class="@ThemeConfiguration.Grids.GridContainerCss">
    <FluentDataGrid ItemsProvider="ItemsProvider" Pagination="this.paginationState">
        <TemplateColumn Class="multiline-text" Title="@Localizer![UserTextKey]">
            @if (String.IsNullOrWhiteSpace(context.Username))
            {
                <FluentLabel>@Localizer![AnonymousTextKey]</FluentLabel>
            }
            else
            {
                <FluentLabel>@context.Username</FluentLabel>
            }
        </TemplateColumn>
        <TemplateColumn Title="@Localizer![TotalTimeWatchedTextKey]">
            @TimeSpan.FromSeconds(context.TotalTimeWatched)
        </TemplateColumn>
        <PropertyColumn Property="@( p=> p.TotalSessions)" Title="@Localizer![TotalSessionsTextKey]"></PropertyColumn>
    </FluentDataGrid>
</div>
<CustomFluentPaginator State="@this.paginationState"></CustomFluentPaginator>