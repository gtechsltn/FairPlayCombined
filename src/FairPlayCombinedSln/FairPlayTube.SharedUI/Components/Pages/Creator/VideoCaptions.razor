@page "/Creator/VideoCaptions/VideoInfo{VideoInfoId:long}/YouTube/{YouTubeVideoId}"
@implements IDisposable

@using FairPlayCombined.Interfaces.Common
@using FairPlayCombined.Interfaces.FairPlayTube
@using FairPlayCombined.Models.FairPlaySocial.VideoCaptions
@using Google.Apis.YouTube.v3
@using System.Text


@attribute [Authorize]
@rendermode @(new InteractiveServerRenderMode(prerender:false))
@attribute [StreamRendering(enabled: true)]

@inject IVideoCaptionsService videoCaptionsService
@inject IYouTubeClientService youTubeClientService
@inject IToastService toastService

<FluentLabel Typo="Typography.H3">VideoCaptions</FluentLabel>

@if (!String.IsNullOrWhiteSpace(this.YouTubeVideoId))
{
    <a data-enhance-nav="false" href="@($"https://youtu.be/{this.YouTubeVideoId}")" target="_blank">View On YouTube</a>
}

@if (this.Items != null)
{
    <FluentDataGrid Items="this.Items!.AsQueryable()">
        <PropertyColumn Property="@(p=>p.Language)"></PropertyColumn>
        <TemplateColumn>
            <FluentButton Type="ButtonType.Button" Appearance="Appearance.Accent"
                          OnClick="@( async () => await OnUploadToYouTubeButtonClickedAsync(context))">
                Upload To YouTube
            </FluentButton>
        </TemplateColumn>
    </FluentDataGrid>
}

@code {
    [Parameter]
    public long? VideoInfoId { get; set; }
    [Parameter]
    public string? YouTubeVideoId { get; set; }
    private VideoCaptionsModel[]? Items { get; set; }
    private readonly CancellationTokenSource cancellationTokenSource = new();
    protected override async Task OnInitializedAsync()
    {
        this.Items = await this.videoCaptionsService
        .GetVideoCaptionsByVideoInfoIdAsync(this.VideoInfoId!.Value,
            this.cancellationTokenSource.Token
        );
    }

    private async Task OnUploadToYouTubeButtonClickedAsync(VideoCaptionsModel videoCaptionsModel)
    {
        var youTubeService = await this.youTubeClientService.AuthorizeAsync();
        var contentBytes = Encoding.UTF8.GetBytes(videoCaptionsModel.Content!);
        MemoryStream memoryStream = new MemoryStream(contentBytes);
        await this.youTubeClientService.UploadCaptionsAsync(this.YouTubeVideoId!,
        language: videoCaptionsModel.Language!,
        youTubeService,
        memoryStream,
        progressChanged: (progress) =>
        {
            string message = $"Status: {progress.Status}";
            if (progress.Status == Google.Apis.Upload.UploadStatus.Failed)
            {
                message += $" - Exception: {progress.Exception.Message}";
            }
            this.toastService.ShowInfo(message);
        },
        responseReceived: (response) =>
        {
        },
        this.cancellationTokenSource.Token
        );
    }

    void IDisposable.Dispose()
    {
        this.cancellationTokenSource.Dispose();
    }
}
