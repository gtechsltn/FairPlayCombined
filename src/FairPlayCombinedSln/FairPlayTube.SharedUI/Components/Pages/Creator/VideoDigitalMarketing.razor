@page "/Creator/VideoDigitalMarketing/{VideoInfoId:long}"
@implements IDisposable

@attribute [Authorize(Roles = FairPlayCombined.Common.Constants.RoleName.BasicPlanUser)]

@using FairPlayCombined.Common
@using FairPlayCombined.Interfaces
@using FairPlayCombined.Interfaces.Common
@using FairPlayCombined.Interfaces.FairPlayTube
@using FairPlayCombined.Models.FairPlayTube.VideoInfo
@using FairPlayCombined.Models.Pagination
@using FairPlayTube.SharedUI.Components.Spinners

@inject IJSRuntime jsRuntime
@inject IVideoInfoService videoInfoService
@inject IUserProviderService userProviderService
@inject IOpenAIService openAIService
@inject IVideoCaptionsService videoCaptionsService
@inject IVideoDigitalMarketingPlanService videoDigitalMarketingPlanService
<PageTitle>
    Video Digital Marketing Strategy
</PageTitle>

<FluentLabel Typo="Typography.H3">
    Video Digital Marketing Strategy
</FluentLabel>

<LoadingIndicator ShowSpinners="this.IsBusy"></LoadingIndicator>

<div>
    <FluentButton Type="ButtonType.Button" OnClick="OnRecreatePlanButtonclickedAsync">
        Re-Create Plan
    </FluentButton>
</div>
<div>
    @if (!String.IsNullOrWhiteSpace(this.DigitalMarketingIdeas))
    {
        <p>
            @((MarkupString)this.DigitalMarketingIdeas)
        </p>
    }
</div>

@code
{
    [Parameter]
    public long? VideoInfoId { get; set; }
    private bool IsBusy { get; set; }
    private readonly CancellationTokenSource cancellationTokenSource = new();
    private string? DigitalMarketingIdeas { get; set; }
    private string? RevisedPrompt { get; set; }

    protected override async Task OnInitializedAsync()
    {
        this.IsBusy = true;
        StateHasChanged();
        var videoInfoModel = await this.videoInfoService.GetVideoInfoByIdAsync(id: this.VideoInfoId!.Value,
        cancellationToken: this.cancellationTokenSource.Token);
        this.DigitalMarketingIdeas = await this.videoDigitalMarketingPlanService
        .GetVideoDigitalMarketingPlanAsync(
            videoInfoId: videoInfoModel.VideoInfoId,
            socialNetworkName: "LinkedIn",
            cancellationToken: this.cancellationTokenSource.Token);
        if (String.IsNullOrWhiteSpace(this.DigitalMarketingIdeas))
        {
            await this.GenerateDigitalMarketingIdeasAsync();
        }
        this.IsBusy = false;
        StateHasChanged();
    }

    private async Task OnRecreatePlanButtonclickedAsync()
    {
        this.IsBusy = true;
        StateHasChanged();
        await this.GenerateDigitalMarketingIdeasAsync();
        this.IsBusy = false;
        StateHasChanged();
    }

    private async Task GenerateDigitalMarketingIdeasAsync()
    {
        this.DigitalMarketingIdeas =
        await this.videoDigitalMarketingPlanService.CreateVideoDigitalMarketingPlanAsync(this.VideoInfoId!.Value, this.cancellationTokenSource.Token);
        StateHasChanged();
    }

    void IDisposable.Dispose()
    {
        this.cancellationTokenSource.Dispose();
    }
}
