@page "/Creator/NewVideoRecommendation"
@implements IAsyncDisposable

@attribute [Authorize(Roles = FairPlayCombined.Common.Constants.RoleName.BasicPlanUser)]

@using FairPlayCombined.Common
@using FairPlayCombined.Common.GeneratorsAttributes
@using FairPlayCombined.Interfaces
@using FairPlayCombined.Interfaces.Common
@using FairPlayCombined.Interfaces.FairPlayTube
@using FairPlayCombined.Models.FairPlayTube.NewVideoRecommendation
@using FairPlayCombined.Models.FairPlayTube.VideoInfo
@using FairPlayCombined.Models.Pagination
@using FairPlayTube.SharedUI.Components.Spinners

<PageTitle>
    @Localizer![NewVideoRecommendationsTextKey]
</PageTitle>

<FluentLabel Typo="Typography.H3">
    @Localizer![NewVideoRecommendationsTextKey]
</FluentLabel>

<LoadingIndicator ShowSpinners="this.IsBusy"></LoadingIndicator>

<div>
    <FluentButton Type="ButtonType.Button" Appearance="Appearance.Accent" Loading="this.IsBusy"
                  OnClick="OnCreateNewVideoRecommendationButtonClickedAsync">
        @Localizer![CreateNewRecommendationTextKey]
    </FluentButton>
</div>
@if (this.ItemsProvider != null)
{
    <FluentDataGrid ItemsProvider="@this.ItemsProvider" Pagination="@this.paginationState">
        <TemplateColumn Class="multiline-text" Title="@Localizer![NewVideoRecommendationsTextKey]">
            <FluentAccordion>
                <FluentAccordionItem Expanded="false" Heading="@($"{context.NewVideoRecommendationId} - {Localizer![ExpandToSeeContentTextKey]}")">
                    @((MarkupString)context.HtmlNewVideoRecommendation!)
                </FluentAccordionItem>
            </FluentAccordion>
        </TemplateColumn>
    </FluentDataGrid>
}
<div>
    @if (!String.IsNullOrWhiteSpace(this.NewVideoRecommendationIdea))
    {
        <p>
            @((MarkupString)this.NewVideoRecommendationIdea)
        </p>
    }
</div>