@page "/Creator/YouTubeThumbnail/{VideoInfoId:long}"
@implements IAsyncDisposable

@attribute [Authorize(Roles = FairPlayCombined.Common.Constants.RoleName.BasicPlanUser)]
@attribute [StreamRendering(enabled: true)]

@using FairPlayCombined.Common
@using FairPlayCombined.Common.GeneratorsAttributes
@using FairPlayCombined.Interfaces
@using FairPlayCombined.Interfaces.Common
@using FairPlayCombined.Interfaces.FairPlayTube
@using FairPlayCombined.Models.Common.ImageStyle
@using FairPlayCombined.Models.FairPlayTube.VideoInfo
@using FairPlayCombined.Models.FairPlayTube.VideoThumbnail
@using FairPlayCombined.Models.Pagination
@using FairPlayTube.SharedUI.Components.Spinners
@using System.Collections.Concurrent
@using System.Globalization
@using FairPlayTube.SharedUI.Components.Video

@inject IJSRuntime jsRuntime
@inject IVideoInfoService videoInfoService
@inject IUserProviderService userProviderService
@inject IOpenAIService openAIService
@inject IVideoThumbnailService videoThumbnailService
@inject IToastService toastService
@inject IUserFundService userFundService
@inject IImageStyleService imageStyleService
@inject IStringLocalizer<YouTubeThumbnail> localizer

@inject HttpClient httpClient
@inject NavigationManager navigationManager

<PageTitle>
    @localizer[VideoThumbnailTextKey]
</PageTitle>

<FluentLabel Typo="Typography.H3">
    @localizer[VideoThumbnailTextKey]
</FluentLabel>

<LoadingIndicator ShowSpinners="this.IsBusy"></LoadingIndicator>

@if (this.VideoInfoModel != null)
{
    <VideoAuthorizeView VideoInfoModel="@this.VideoInfoModel" CancellationTokenSource="@this.cancellationTokenSource">
        <AuthorizedContent>
            @if (this.VideoInfoId.HasValue)
            {
                <FluentAccordion>
                    <FluentAccordionItem Expanded="true">
                        <VideoActions context="this.VideoInfoModel" OnVideoDeleted="LoadDataAsync"></VideoActions>
                    </FluentAccordionItem>
                </FluentAccordion>
            }

            @if (this.HasRequiredFundsToCreate)
            {
                <div>
                    @if (this.ImageStyles?.Length > 0)
                    {
                        <FluentSelect Appearance="Appearance.Accent"
                                      @bind-SelectedOption="@this.SelectedImageStyle"
                                      Items="@this.ImageStyles"
                                      Label="@localizer[ImageStyleTextKey]"
                                      OptionText="@(p=>p!.StyleName!)"
                                      OptionValue="@(p=>p!.ImageStyleId!.ToString())"></FluentSelect>
                    }
                </div>
                <div>
                    <FluentCheckbox Label="@localizer[RequestCleanThumbnailTextKey]"
                                    @bind-Value="@this.RequestCleanThumbnail"></FluentCheckbox>
                </div>
                <div>
                    <FluentButton Appearance="Appearance.Accent" Type="ButtonType.Button"
                                  OnClick="OnCreateNewThumbnailClickedAsync">@localizer[CreateNewThumbnailTextKey]</FluentButton>
                </div>
            }
            <div>
                @if (this.Items?.Items?.Length > 0)
                {
                    <FluentStack Orientation="Orientation.Horizontal" Wrap="true">
                        @foreach (var singleThumbnail in this.Items.Items)
                        {
                            <div style="width:400px;">
                                <FluentLabel Typo="Typography.Subject">@localizer[CostTextKey]: @singleThumbnail.ThumbnailCost.ToString(CurrencyFormat, CurrencyCulture)</FluentLabel>
                                @if (!this.PagePhotos.ContainsKey(singleThumbnail.PhotoId))
                                {
                                    <FluentCard class="card-padding" Width="400">
                                        <FluentSkeleton Shape="SkeletonShape.Circle"></FluentSkeleton>
                                        <FluentProgressRing></FluentProgressRing>
                                    </FluentCard>
                                }
                                else
                                {
                                    <img loading="lazy" src="@(this.PagePhotos[singleThumbnail.PhotoId])" style="width:100%;" />
                                }
                            </div>
                        }
                    </FluentStack>
                }
                <CustomFluentPaginator State="@this.paginationState" CurrentPageIndexChanged="OnCurrentPageIndexChangedAsync"></CustomFluentPaginator>
            </div>
            <FluentDivider Role="DividerRole.Separator"></FluentDivider>
            <div>
                @if (!String.IsNullOrWhiteSpace(this.GeneratedYouTubeThumbnailUri))
                {
                    <a data-enhance-nav="false" href="@this.GeneratedYouTubeThumbnailUri" target="_blank">
                        <img width="400" class="@ThemeConfiguration.Images.ThumbnailDefaultCss" src="@this.GeneratedYouTubeThumbnailUri" loading="lazy" />
                    </a>
                    <p>
                        <FluentLabel Typo="Typography.Body">
                            @this.RevisedPrompt
                        </FluentLabel>
                    </p>
                }
            </div>
        </AuthorizedContent>
    </VideoAuthorizeView>
}

@code
{
    [Parameter]
    public long? VideoInfoId { get; set; }
    private VideoInfoModel? VideoInfoModel { get; set; }
    private bool RequestCleanThumbnail { get; set; } = false;
    private bool IsBusy { get; set; }
    private bool HasRequiredFundsToCreate { get; set; } = false;
    private PaginationOfT<VideoThumbnailModel>? Items;
    private readonly ConcurrentDictionary<long, string> PagePhotos = new();
    private readonly PaginationState paginationState = new()
        {
            ItemsPerPage = Constants.Pagination.PageSize
        };
    private readonly PaginationRequest paginationRequest = new()
        {
            PageSize = Constants.Pagination.PageSize,
            StartIndex = 0,
            SortingItems = new SortingItem[]
                    {
                        new SortingItem()
                        {
                            PropertyName = nameof(VideoThumbnailModel.PhotoId),
                            SortType = SortType.Descending
                        }
                    }
        };
    private readonly CancellationTokenSource cancellationTokenSource = new();
    private string? GeneratedYouTubeThumbnailUri { get; set; }
    private string? RevisedPrompt { get; set; }
    private ImageStyleModel? SelectedImageStyle { get; set; }
    private ImageStyleModel[]? ImageStyles { get; set; }
    private static CultureInfo CurrencyCulture = new(Constants.Cultures.CurrencyDefaultCulture);
    private const string CurrencyFormat = Constants.Cultures.CurrencyDefaultFormat;

    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
    }

    private async Task LoadDataAsync()
    {
        try
        {
            this.IsBusy = true;
            StateHasChanged();
            this.VideoInfoModel = await this.videoInfoService.GetVideoInfoByIdAsync(this.VideoInfoId!.Value, this.cancellationTokenSource.Token);
            this.HasRequiredFundsToCreate =
            await this.userFundService
            .HasFundsToCreateThumbnailsAsync(this.cancellationTokenSource.Token);
            if (!this.HasRequiredFundsToCreate)
            {
                this.toastService.ShowWarning(localizer[NoFundsLeftTextKey]);
            }
            this.ImageStyles ??= await imageStyleService.GetAllImageStyleAsync(this.cancellationTokenSource.Token);
            this.SelectedImageStyle ??= this.ImageStyles[0];
            var items = await videoThumbnailService.GetPaginatedVideoThumbnailByVideoInfoIdAsync(
                this.VideoInfoId!.Value, paginationRequest, this.cancellationTokenSource.Token);
            this.Items = items;
            await this.paginationState.SetTotalItemCountAsync(items.TotalItems);
        }
        catch (Exception ex)
        {
            this.toastService.ShowError(ex.Message);
        }
        finally
        {
            this.IsBusy = false;
            this.PagePhotos.Clear();
            StateHasChanged();
            LoadImages();
        }
    }

    private void LoadImages()
    {
        if (this.Items?.Items?.Length > 0)
        {
            foreach (var singlePhotoId in this.Items.Items.Select(p => p.PhotoId))
            {
                string photoUrl = $"{navigationManager.BaseUri}api/photo/{singlePhotoId}";
                this.PagePhotos.TryAdd(singlePhotoId, photoUrl);
                StateHasChanged();
            }
        }
    }

    private async Task OnCreateNewThumbnailClickedAsync()
    {
        try
        {
            this.IsBusy = true;
            this.PagePhotos.Clear();
            this.Items = null;
            StateHasChanged();
            var result = await this.videoThumbnailService
            .GenerateVideoThumbnailAsync(this.VideoInfoId!.Value, this.openAIService,
                this.SelectedImageStyle!.ImageStyleId, this.RequestCleanThumbnail,
                this.httpClient, this.cancellationTokenSource.Token);
            if (result != null)
            {
                this.GeneratedYouTubeThumbnailUri = result!.data![0]!.url!;
                this.RevisedPrompt = result!.data[0]!.revised_prompt;
            }
            this.paginationRequest.StartIndex = 0;
            await LoadDataAsync();
        }
        catch (Exception ex)
        {
            this.toastService.ShowError(ex.Message);
        }
        finally
        {
            this.IsBusy = false;
            StateHasChanged();
        }
    }

    private async Task OnCurrentPageIndexChangedAsync(int pageNumber)
    {
        this.paginationRequest.StartIndex = pageNumber * this.paginationRequest.PageSize;
        await LoadDataAsync();
    }

    public async ValueTask DisposeAsync()
    {
        await this.cancellationTokenSource.CancelAsync();
        this.cancellationTokenSource.Dispose();
    }

    #region Resource Keys
    [ResourceKey(defaultValue: "Video Thumbnail")]
    public const string VideoThumbnailTextKey = "VideoThumbnailText";
    [ResourceKey(defaultValue: "Image Style (Experimental)")]
    public const string ImageStyleTextKey = "ImageStyleText";
    [ResourceKey(defaultValue: "Request Clean Thumbnail (No Text)?")]
    public const string RequestCleanThumbnailTextKey = "RequestCleanThumbnailText";
    [ResourceKey(defaultValue: "Create New Thumbnail")]
    public const string CreateNewThumbnailTextKey = "CreateNewThumbnailText";
    [ResourceKey(defaultValue: "Cost")]
    public const string CostTextKey = "CostText";
    [ResourceKey(defaultValue: "You don't have any funds left to create thumbnails")]
    public const string NoFundsLeftTextKey = "NoFundsLeftText";
    #endregion Resource Keys
}
