@page "/Creator/VideoLinkedInArticle/{VideoInfoId:long}"
@implements IDisposable

@using FairPlayCombined.Common
@using FairPlayCombined.Interfaces
@using FairPlayCombined.Interfaces.Common
@using FairPlayCombined.Interfaces.FairPlayTube
@using FairPlayCombined.Models.FairPlayTube.VideoInfo
@using FairPlayCombined.Models.Pagination
@using FairPlayTube.SharedUI.Components.Spinners

@rendermode @(new InteractiveServerRenderMode(prerender:false))
@inject IJSRuntime jsRuntime
@inject IVideoInfoService videoInfoService
@inject IUserProviderService userProviderService
@inject IOpenAIService openAIService
@inject IVideoCaptionsService videoCaptionsService
@inject IVideoDigitalMarketingPlanService videoDigitalMarketingPlanService
@inject IPromptGeneratorService promptGeneratorService
@inject IToastService toastService

<PageTitle>
    Video Article
</PageTitle>

<FluentLabel Typo="Typography.H3">
    Video Article
</FluentLabel>

<LoadingIndicator ShowSpinners="this.IsBusy"></LoadingIndicator>

<FluentButton Type="ButtonType.Button" OnClick="CreateLinkedInArticleAsync">
    Re-Create Article
</FluentButton>

<div>
    @if (!String.IsNullOrWhiteSpace(this.LinkedInArticleDraftText))
    {
        <p>
            @((MarkupString)this.LinkedInArticleDraftText)
        </p>
    }
</div>

@code
{
    [Parameter]
    public long? VideoInfoId { get; set; }
    private bool IsBusy { get; set; }
    private readonly CancellationTokenSource cancellationTokenSource = new();
    private string? LinkedInArticleDraftText { get; set; }
    private string? RevisedPrompt { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await this.CreateLinkedInArticleAsync();
    }

    private async Task CreateLinkedInArticleAsync()
    {
        try
        {
            this.IsBusy = true;
            StateHasChanged();
            var videoInfoModel = await this.videoInfoService.GetVideoInfoByIdAsync(id: this.VideoInfoId!.Value,
            cancellationToken: this.cancellationTokenSource.Token);
            var englishCaptions = await this.videoCaptionsService
            .GetVideoCaptionsByVideoInfoIdAndLanguageAsync(videoInfoId: videoInfoModel.VideoInfoId,
            language: "en-US", cancellationToken: this.cancellationTokenSource.Token);
            var promptInfo = await this.promptGeneratorService.GetPromptCompleteInfoAsync(promptName:
                Constants.PromptsNames.CreateVideoLinkedInArticle, cancellationToken: this.cancellationTokenSource.Token);
            var userMessage = $"Video Title: {videoInfoModel.Description}. Video Captions: {englishCaptions}";
            var result = await this.openAIService.GenerateChatCompletionAsync(promptInfo!.BaseText!, userMessage, this.cancellationTokenSource.Token);
            this.LinkedInArticleDraftText = result!.choices![0]!.message!.content!;
        }
        catch (Exception ex)
        {
            this.toastService.ShowError(ex.Message);
        }
        finally
        {
            this.IsBusy = false;
            StateHasChanged();
        }
    }

    void IDisposable.Dispose()
    {
        this.cancellationTokenSource.Dispose();
    }
}
