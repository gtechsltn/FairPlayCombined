@page "/Creator/VideoChapters/{VideoInfoId:long}"
@implements IAsyncDisposable

@attribute [Authorize(Roles = FairPlayCombined.Common.Constants.RoleName.BasicPlanUser)]

@using FairPlayCombined.Common
@using FairPlayCombined.Interfaces
@using FairPlayCombined.Interfaces.Common
@using FairPlayCombined.Interfaces.FairPlayTube
@using FairPlayCombined.Models.FairPlayTube.VideoInfo
@using FairPlayCombined.Models.Pagination
@using FairPlayTube.SharedUI.Components.Spinners
@using FairPlayTube.SharedUI.Components.Video

<PageTitle>
    @Localizer![VideoChaptersTextKey] @(VideoInfoModel != null ? $"- {VideoInfoModel.Name}" : String.Empty)
</PageTitle>

<FluentLabel Typo="Typography.H3">
    @Localizer![VideoChaptersTextKey] @(VideoInfoModel != null ? $"- {VideoInfoModel.Name}" : String.Empty)
</FluentLabel>

<LoadingIndicator ShowSpinners="this.IsBusy"></LoadingIndicator>

@if (this.VideoInfoModel != null)
{
    <VideoAuthorizeView VideoInfoModel="@this.VideoInfoModel" CancellationTokenSource="@this.cancellationTokenSource">
        <AuthorizedContent>
            <div>
                <FluentButton Type="ButtonType.Button" OnClick="OnRecreatePlanButtonclickedAsync">
                    @Localizer![ReCreateChaptersTextKey]
                </FluentButton>
            </div>
            <div>
                @if (!String.IsNullOrWhiteSpace(this.YouTubeChapters))
                {
                    <p>
                        @((MarkupString)this.YouTubeChapters)
                    </p>
                }
            </div>
        </AuthorizedContent>
    </VideoAuthorizeView>
}