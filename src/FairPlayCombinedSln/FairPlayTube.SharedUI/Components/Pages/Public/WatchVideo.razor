@page "/Public/WatchVideo/{VideoId}"
@implements IAsyncDisposable
@using FairPlayCombined.Common.GeneratorsAttributes
@using FairPlayCombined.Interfaces
@using FairPlayCombined.Interfaces.FairPlayTube
@using FairPlayCombined.Models.AzureVideoIndexer
@using FairPlayCombined.Models.FairPlayTube.VideoComment
@using FairPlayCombined.Models.FairPlayTube.VideoInfo
@using FairPlayCombined.Models.Pagination
@using FairPlayTube.SharedUI.Components.Spinners


@inject IFairPlayTubeMetrics metricsSetup
@inject IJSRuntime jsRuntime
@inject IVideoWatchTimeService videoWatchTimeService
@inject ILogger<WatchVideo> logger;
@inject IUserProviderService userProviderService
@inject ISupportedLanguageService supportedLanguageService
@inject IVideoInfoService videoInfoService
@inject IVideoCommentService videoCommentService
@inject IToastService toastService
<FluentLabel Typo="Typography.H3">WatchVideo</FluentLabel>

<LoadingIndicator ShowSpinners="this.IsBusy"></LoadingIndicator>
@if (!this.UseFallbackMode && !String.IsNullOrWhiteSpace(this.VideoUrl))
{
    <div id="container" data-permanent>
        <!-- HTML -->
        <video id="my_video_1" class="video-js vjs-default-skin" controls preload="auto" width="640" height="268"
               data-setup='{}'>
            <source src="@this.VideoUrl" type="application/x-mpegURL">
            @if (this.SupportedLanguages?.Length > 0)
            {
                foreach (var singleSupportedLanguage in this.SupportedLanguages)
                {
                    <track kind="captions" src="@($"/api/video/{this.VideoId}/captions/{singleSupportedLanguage.languageCode}")"
                           srclang="@singleSupportedLanguage.languageCode" label="@singleSupportedLanguage.name" />
                }
            }
        </video>
    </div>
    <div>
        <FluentButton Type="ButtonType.Button"
                      Appearance="Microsoft.FluentUI.AspNetCore.Components.Appearance.Accent"
                      OnClick="OnUseFallbackMode">Can't see the video? Click here!</FluentButton>
    </div>
    @if (this.videoInfoModel?.VideoKeywords?.Length > 0)
    {
        <FluentAccordion>
            <FluentAccordionItem Expanded="false" Heading="Keywords">
                <div>
                    <FluentStack Orientation="Orientation.Horizontal" Wrap="true" HorizontalGap="3">
                        @foreach (var singleKeyword in this.videoInfoModel.VideoKeywords)
                        {
                            <FluentBadge Circular="true"
                                         Appearance="Microsoft.FluentUI.AspNetCore.Components.Appearance.Accent">
                                @singleKeyword
                            </FluentBadge>
                        }
                    </FluentStack>
                </div>
            </FluentAccordionItem>
        </FluentAccordion>
    }
    @if (this.videoInfoModel?.VideoTopics?.Length > 0)
    {
        <FluentAccordion>
            <FluentAccordionItem Heading="Topics" Expanded="false">
                <div>
                    <FluentStack Orientation="Orientation.Horizontal" Wrap="true" HorizontalGap="3">
                        @foreach (var singleTopic in this.videoInfoModel.VideoTopics)
                        {
                            <FluentBadge Circular="true"
                                         Appearance="Microsoft.FluentUI.AspNetCore.Components.Appearance.Accent"
                                         Class="multiline-text">
                                @singleTopic
                            </FluentBadge>
                        }
                    </FluentStack>
                </div>
            </FluentAccordionItem>
        </FluentAccordion>
    }
}
else
{
    <div>
        <iframe src="@this.FallbackModeUrl" width="600" allowfullscreen></iframe>
    </div>
}

<FluentLabel Typo="Typography.H3">Comments</FluentLabel>
<AuthorizeView>
    <Authorized>
        @if (this.createVideoCommentModel != null)
        {
            <FluentEditForm Context="formContext" Model="this.createVideoCommentModel" OnValidSubmit="OnCreateCommentClickedAsync">
                <div>
                    <DataAnnotationsValidator></DataAnnotationsValidator>
                    <FluentValidationSummary></FluentValidationSummary>
                </div>
                <div>
                    <FluentTextField Required="true" Placeholder="Add a comment..." @bind-Value="this.createVideoCommentModel.Comment"></FluentTextField>
                </div>
                <div>
                    <FluentButton Type="ButtonType.Submit" style="display:none;">Add Comment</FluentButton>
                </div>
            </FluentEditForm>
        }
    </Authorized>
</AuthorizeView>
<FluentPaginator State="this.paginationState"></FluentPaginator>
<div class="@ThemeConfiguration.Grids.GridContainerCss">
    <FluentDataGrid ItemsProvider="this.ItemsProvider" Pagination="this.paginationState">
        <TemplateColumn>
            <FluentCard>
                <FluentHeader>
                    <strong>
                        @context.RowCreationUser
                    </strong> @context.RowCreationDateTime.LocalDateTime
                </FluentHeader>
                <FluentBodyContent>
                    @context.Comment
                </FluentBodyContent>
            </FluentCard>
        </TemplateColumn>
    </FluentDataGrid>
</div>

@code {
    [Parameter]
    public string? VideoId { get; set; }
    private bool IsBusy { get; set; }
    private readonly CancellationTokenSource cancellationTokenSource = new();
    private bool UseFallbackMode { get; set; }
    private string? FallbackModeUrl { get; set; }
    private VideoInfoModel? videoInfoModel { get; set; }
    private string? VideoUrl { get; set; }
    private SupportedLanguageModel[]? SupportedLanguages { get; set; }
    private DotNetObjectReference<WatchVideo>? dotNetObjectReference;
    private bool IsSessionCreated { get; set; } = false;
    private GridItemsProvider<VideoCommentModel>? ItemsProvider;
    private readonly PaginationState paginationState = new()
        {
            ItemsPerPage = Constants.Pagination.PageSize
        };
    [SupplyParameterFromForm]
    public CreateVideoCommentModel? createVideoCommentModel { get; set; }

    protected override void OnInitialized()
    {
        this.dotNetObjectReference = DotNetObjectReference.Create<WatchVideo>(this);
        this.IsBusy = true;
        ItemsProvider = async req =>
        {
            StateHasChanged();
            PaginationRequest paginationRequest = new()
                {
                    SortingItems = new SortingItem[]
                    {
                        new SortingItem()
                        {
                            PropertyName = nameof(VideoCommentModel.RowCreationDateTime),
                            SortType = SortType.Descending
                        }
                    },
                    PageSize = paginationState.ItemsPerPage,
                    StartIndex = req.StartIndex
                };
            var items = await videoCommentService.GetPaginatedCommentsByVideonIdAsync(paginationRequest,
                this.VideoId!, this.cancellationTokenSource.Token);
            StateHasChanged();
            var result = GridItemsProviderResult.From<VideoCommentModel>(items!.Items!, items.TotalItems);
            return result;
        };
        this.IsBusy = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            metricsSetup.Initialize();
            this.IsBusy = true;
            StateHasChanged();
            this.videoInfoModel = await this.videoInfoService.GetVideoInfoByVideoIdAsync(
                this.VideoId!,
                this.cancellationTokenSource.Token
            );
            var currentUserId = this.userProviderService.GetCurrentUserId();
            if (!String.IsNullOrWhiteSpace(currentUserId))
            {
                this.createVideoCommentModel ??= new CreateVideoCommentModel()
                    {
                        VideoInfoId = this.videoInfoModel!.VideoInfoId,
                        ApplicationUserId = currentUserId
                    };
            }
            this.VideoUrl = videoInfoModel!.PublishedUrl;
            this.SupportedLanguages = await supportedLanguageService
            .GetAllSupportedLanguageForVideoInfoIdAsync(videoInfoId: videoInfoModel.VideoInfoId,
                cancellationToken: this.cancellationTokenSource.Token);
            StateHasChanged();
            await jsRuntime.InvokeVoidAsync("initializeVideoJsPlayer", "my_video_1", Guid.NewGuid().ToString(), this.dotNetObjectReference);
            this.IsBusy = false;
            StateHasChanged();
        }
    }

    [JSInvokable]
    public async Task UpdateWatchTime(double watchTime, string currentSessionGuid)
    {
        try
        {
            var currentUserId = this.userProviderService.GetCurrentUserId();
            System.Diagnostics.Debug.WriteLine($"Watch Time (s): {watchTime}. Session: {currentSessionGuid}");
            if (!IsSessionCreated)
            {
                await this.videoWatchTimeService.CreateVideoWatchTimeAsync(
                    this.VideoId!,
                    new FairPlayCombined.Models.FairPlayTube.VideoWatchTime.VideoWatchTimeModel()
                        {
                            WatchedByApplicationUserId = currentUserId,
                            SessionId = Guid.Parse(currentSessionGuid),
                            WatchTime = watchTime
                        }, cancellationToken: cancellationTokenSource.Token);
                this.IsSessionCreated = true;
            }
            else
            {
                await this.videoWatchTimeService.UpdateVideoWatchTimeAsync(
                    new FairPlayCombined.Models.FairPlayTube.VideoWatchTime.VideoWatchTimeModel()
                        {
                            WatchedByApplicationUserId = currentUserId,
                            SessionId = Guid.Parse(currentSessionGuid),
                            WatchTime = watchTime
                        }, cancellationToken: cancellationTokenSource.Token);
            }
        }
        catch (Exception ex)
        {
            logger.LogError(exception: ex, "Error: {Message}", ex.Message);
        }
    }

    private void OnUseFallbackMode()
    {
        this.FallbackModeUrl = $"https://www.videoindexer.ai/embed/player/{this.videoInfoModel!.AccountId}/{this.VideoId}/?locale=en&location={this.videoInfoModel.Location}";
        this.UseFallbackMode = true;
        StateHasChanged();
    }

    private async Task OnCreateCommentClickedAsync()
    {
        try
        {
            this.IsBusy = true;
            StateHasChanged();
            await this.videoCommentService.CreateVideoCommentAsync(this.createVideoCommentModel!,
            this.cancellationTokenSource.Token);
            await this.paginationState.SetCurrentPageIndexAsync(
                this.paginationState.CurrentPageIndex
            );
            this.createVideoCommentModel!.Comment = null;
        }
        catch (Exception ex)
        {
            this.toastService.ShowError(ex.Message);
        }
        finally
        {
            this.IsBusy = false;
            StateHasChanged();
        }
    }

    public ValueTask DisposeAsync()
    {
        this.cancellationTokenSource.Dispose();
        return ValueTask.CompletedTask;
    }
}
