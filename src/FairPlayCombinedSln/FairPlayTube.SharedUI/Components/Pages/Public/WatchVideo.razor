@page "/Public/WatchVideo/{VideoId}"
@implements IAsyncDisposable
@using FairPlayCombined.Common.FairPlayTube.Enums
@using FairPlayCombined.Common.GeneratorsAttributes
@using FairPlayCombined.Interfaces
@using FairPlayCombined.Interfaces.FairPlayTube
@using FairPlayCombined.Models.AzureVideoIndexer
@using FairPlayCombined.Models.FairPlayTube.VideoComment
@using FairPlayCombined.Models.FairPlayTube.VideoInfo
@using FairPlayCombined.Models.Pagination
@using FairPlayTube.SharedUI.Components.Spinners
@using FairPlayTube.SharedUI.Components.Video
@using System.Net
@using FairPlayCombined.WebComponents.SEO
@using System.Globalization

@inject IJSRuntime jsRuntime
@inject IVideoWatchTimeService videoWatchTimeService
@inject ILogger<WatchVideo> logger;
@inject IUserProviderService userProviderService
@inject ISupportedLanguageService supportedLanguageService
@inject IVideoInfoService videoInfoService
@inject IVideoCommentService videoCommentService
@inject IToastService toastService
@inject IApiResolver apiResolver
@inject IStringLocalizer<WatchVideo> localizer

@inject NavigationManager navigationManager
@inject HttpClient httpClient
@inject PersistentComponentState ApplicationState

<HeadContent>
    @if (this.videoInfoModel != null && this.OpenGraphTitle != null && this.OpenGraphDescription != null)
    {
        <meta name="description" content="@OpenGraphDescription" />

        <meta name="thumbnail" content="@($"{apiBaseUrl}/api/video/{this.VideoId}/thumbnail")" />

        <TwitterCard Site="@("@pticostarica")"
                     Title="@this.OpenGraphTitle"
                     Description="@this.OpenGraphDescription"
                     ImageUrl="@($"{apiBaseUrl}/api/video/{this.VideoId}/thumbnail")"></TwitterCard>

        <OpenGraph Title="@this.OpenGraphTitle"
                   Description="@this.OpenGraphDescription"
                   ImageUrl="@($"{apiBaseUrl}/api/video/{this.VideoId}/thumbnail")"
                   ImageSecureUrl="@($"{apiBaseUrl}/api/video/{this.VideoId}/thumbnail")"
                   ImageType="image/jpeg"
                   ImageWidth="400"
                   ImageHeight="300"
                   ImageAlt="@($"{apiBaseUrl}/api/video/{this.VideoId}/description")"></OpenGraph>


        <JsonLdForSingleVideo Name="@this.OpenGraphTitle"
                              Description="@this.OpenGraphDescription"
                              ThumbnailUrl="@($"{apiBaseUrl}/api/video/{this.VideoId}/thumbnail")"
                              UploadDate="@this.videoInfoModel.RowCreationDateTime.ToString("yyyy-MM-ddTHH:mm:sszzz")"
                              Duration="@this.videoInfoModel.VideoObjectDuration"
                              ContentUrl="@this.navigationManager.Uri"
                              EmbedUrl="@($"{apiBaseUrl}/Public/EmbedVideo/{this.VideoId}")"
                              InteractionCount="1"></JsonLdForSingleVideo>
    }

</HeadContent>
@if (this.videoInfoModel != null)
{
    <PageTitle>@($"{nameof(Constants.ApplicationTitles.FairPlayTube)} - {this.videoInfoModel.Name}")</PageTitle>
    <FluentLabel Typo="Typography.H1">@this.videoInfoModel.Name</FluentLabel>
}

<LoadingIndicator ShowSpinners="this.IsBusy"></LoadingIndicator>
@if (!String.IsNullOrWhiteSpace(this.VideoUrl))
{
    @if (this.videoInfoModel != null)
    {
        @if (this.videoInfoModel.VideoVisibilityId == (int)VideoVisibility.Public)
        {
            <div id="container" data-permanent>
                <!-- HTML -->
                <VideoJs SupportedLanguages="@this.SupportedLanguages"
                         VideoId="@this.VideoId"
                         VideoUrl="@this.VideoUrl"></VideoJs>
            </div>
        }
        else
        {
            <AuthorizeView Roles="@Constants.RoleName.BasicPlanUser">
                <Authorized>
                    <div id="container" data-permanent>
                        <!-- HTML -->
                        <VideoJs SupportedLanguages="@this.SupportedLanguages"
                                 VideoId="@this.VideoId"
                                 VideoUrl="@this.VideoUrl"></VideoJs>
                    </div>
                </Authorized>
                <NotAuthorized>
                    <p>
                        <FluentLabel Typo="Typography.Body" Color="@Color.Error">
                            <FluentIcon Value="@(new Icons.Regular.Size20.Info())"></FluentIcon>
                            @localizer[VideoAvailableForUsersOnlyTextKey]
                        </FluentLabel>
                    </p>
                    <FluentAnchor Href="@($"Account/Login?returnUrl={Uri.EscapeDataString(navigationManager.Uri)}")" IconStart="@(new Icons.Regular.Size20.PersonArrowRight())">
                        @localizer[LoginTextKey]
                    </FluentAnchor>
                </NotAuthorized>
            </AuthorizeView>
        }
        @if (this.videoInfoModel.IsVideoGeneratedWithAi == true)
        {
            <FluentLabel Typo="Typography.Body" Color="Color.Warning">
                @localizer[VideoGeneratedWithAIAccuracyWarningTextKey]
            </FluentLabel>
        }
        <FluentAccordion>
            <FluentAccordionItem Heading="@localizer[ShareTextKey]" Expanded="true">
                <SharePage Description="@this.videoInfoModel.Description" Url="@this.navigationManager.Uri"></SharePage>
            </FluentAccordionItem>
            <FluentAccordionItem Heading="@localizer[DescriptionTextKey]" Expanded="true">
                <FluentTextArea Rows="10" style="width:100%;" Value="@this.videoInfoModel.Description"></FluentTextArea>
                <AuthorizeView>
                    <Authorized>
                        @if (this.videoInfoModel.ApplicationUserId == userProviderService.GetCurrentUserId())
                        {
                            <FluentButton Type="ButtonType.Button"
                                          Appearance="Microsoft.FluentUI.AspNetCore.Components.Appearance.Accent"
                                          OnClick="OnCreateDescriptionWithAIAsync">@localizer[CreateWithAITextKey]</FluentButton>
                        }
                    </Authorized>
                </AuthorizeView>
            </FluentAccordionItem>
            @if (this.videoInfoModel.GitHubSponsorsUsername != null ||
           this.videoInfoModel.BuyMeACoffeeUsername != null)
            {
                <FluentAccordionItem Heading="@localizer[MonetizationTextKey]" Expanded="true">
                    <FluentLabel Weight="FontWeight.Bold">
                        @localizer[MonetizationDescriptionTextKey, nameof(Constants.ApplicationTitles.FairPlayTube)]
                    </FluentLabel>
                    @if (this.videoInfoModel.GitHubSponsorsUsername != null)
                    {
                        <FluentLabel Typo="Typography.Body">
                            <FluentAnchor Href="@($"https://github.com/sponsors/{this.videoInfoModel.GitHubSponsorsUsername}")" Target="_blank">
                                <FluentIcon Value="@(new Icons.Regular.Size16.Globe())"
                                            Color="Color.Accent" Slot="start"></FluentIcon>
                                GitHub Sponsors
                            </FluentAnchor>
                        </FluentLabel>
                    }
                    @if (this.videoInfoModel.BuyMeACoffeeUsername != null)
                    {
                        <FluentLabel Typo="Typography.Body">
                            <FluentAnchor Href="@($"https://buymeacoffee.com/{this.videoInfoModel.BuyMeACoffeeUsername}")" Target="_blank">
                                <FluentIcon Value="@(new Icons.Regular.Size16.Globe())"
                                            Color="Color.Accent" Slot="start"></FluentIcon>
                                Buy Me A Coffee
                            </FluentAnchor>
                        </FluentLabel>
                    }
                </FluentAccordionItem>
            }
        </FluentAccordion>
    }
    @if (this.videoInfoModel?.VideoKeywords?.Length > 0)
    {
        <FluentAccordion>
            <FluentAccordionItem Expanded="false" Heading="@localizer[KeywordsTextKey]">
                <div>
                    <FluentStack Orientation="Orientation.Horizontal" Wrap="true" HorizontalGap="3">
                        @foreach (var singleKeyword in this.videoInfoModel.VideoKeywords)
                        {
                            <FluentBadge Circular="true"
                                         Appearance="Microsoft.FluentUI.AspNetCore.Components.Appearance.Accent">
                                @singleKeyword
                            </FluentBadge>
                        }
                    </FluentStack>
                </div>
            </FluentAccordionItem>
        </FluentAccordion>
    }
    @if (this.videoInfoModel?.VideoTopics?.Length > 0)
    {
        <FluentAccordion>
            <FluentAccordionItem Heading="@localizer[TopicsTextKey]" Expanded="false">
                <div>
                    <FluentStack Orientation="Orientation.Horizontal" Wrap="true" HorizontalGap="3">
                        @foreach (var singleTopic in this.videoInfoModel.VideoTopics)
                        {
                            <FluentBadge Circular="true"
                                         Appearance="Microsoft.FluentUI.AspNetCore.Components.Appearance.Accent"
                                         Class="multiline-text">
                                @singleTopic
                            </FluentBadge>
                        }
                    </FluentStack>
                </div>
            </FluentAccordionItem>
        </FluentAccordion>
    }
    <FluentAccordion>
        <FluentAccordionItem Heading="@localizer[AllInsightsTextKey]" Expanded="false">
            <div>
                <FluentStack Orientation="Orientation.Horizontal" Wrap="true" HorizontalGap="3">
                    <iframe width="580" height="780"
                            src="@this.videoInfoModel?.AllInsightsUrl" frameborder="0" allowfullscreen></iframe>
                </FluentStack>
            </div>
        </FluentAccordionItem>
    </FluentAccordion>
}

<FluentLabel Typo="Typography.H3">@localizer[CommentsTextKey]</FluentLabel>
<AuthorizeView>
    <Authorized>
        @if (this.createVideoCommentModel != null)
        {
            <FluentEditForm Context="formContext" Model="this.createVideoCommentModel" OnValidSubmit="OnCreateCommentClickedAsync">
                <div>
                    <DataAnnotationsValidator></DataAnnotationsValidator>
                    <FluentValidationSummary></FluentValidationSummary>
                </div>
                <div>
                    <FluentTextField Required="true" Placeholder="@($"{localizer[AddCommentTextKey]}...")" @bind-Value="this.createVideoCommentModel.Comment"></FluentTextField>
                </div>
                <div>
                    <FluentButton Type="ButtonType.Submit" style="display:none;">@localizer[AddCommentTextKey]</FluentButton>
                </div>
            </FluentEditForm>
        }
    </Authorized>
</AuthorizeView>
<FluentPaginator State="this.paginationState"></FluentPaginator>
<div class="@ThemeConfiguration.Grids.GridContainerCss">
    <FluentDataGrid ItemsProvider="this.ItemsProvider" Pagination="this.paginationState">
        <EmptyContent>
            @localizer[NoDataTextKey]
        </EmptyContent>
        <ChildContent>
            <TemplateColumn>
                <FluentCard>
                    <FluentHeader>
                        <strong>
                            @context.RowCreationUser
                        </strong> @context.RowCreationDateTime.LocalDateTime
                    </FluentHeader>
                    <FluentBodyContent>
                        @context.Comment
                    </FluentBodyContent>
                </FluentCard>
            </TemplateColumn>
        </ChildContent>
    </FluentDataGrid>
</div>

@code {
    [Parameter]
    public string? VideoId { get; set; }
    private bool IsBusy { get; set; }
    private readonly CancellationTokenSource cancellationTokenSource = new();
    private VideoInfoModel? videoInfoModel { get; set; }
    private string? VideoUrl { get; set; }
    private SupportedLanguageModel[]? SupportedLanguages { get; set; }
    private GridItemsProvider<VideoCommentModel>? ItemsProvider;
    private readonly PaginationState paginationState = new()
        {
            ItemsPerPage = Constants.Pagination.PageSize
        };
    [SupplyParameterFromForm]
    public CreateVideoCommentModel? createVideoCommentModel { get; set; }
    private string apiBaseUrl => apiResolver.GetBaseUrl();

    private string? OpenGraphTitle { get; set; }
    private string? OpenGraphDescription { get; set; }
    private PaginationOfT<VideoCommentModel>? PageComments { get; set; }
    private PersistingComponentStateSubscription persistingSubscription;

    private Task PersistData()
    {
        //Check https://learn.microsoft.com/en-us/aspnet/core/blazor/components/prerender?view=aspnetcore-9.0
        ApplicationState.PersistAsJson<string>(nameof(OpenGraphTitle), this.OpenGraphTitle!);
        ApplicationState.PersistAsJson<string>(nameof(OpenGraphDescription), this.OpenGraphDescription!);
        ApplicationState.PersistAsJson<VideoInfoModel>(nameof(this.videoInfoModel), this.videoInfoModel!);
        ApplicationState.PersistAsJson<PaginationOfT<VideoCommentModel>>(nameof(this.PageComments), this.PageComments!);
        ApplicationState.PersistAsJson<SupportedLanguageModel[]?>(nameof(this.SupportedLanguages), this.SupportedLanguages);
        return Task.CompletedTask;
    }

    private async Task PersistOpenGraphTitleAsync()
    {
        if (!ApplicationState.TryTakeFromJson<string>(
                nameof(this.OpenGraphTitle), out var restoredOpenGraphTitle))
        {
            this.OpenGraphTitle = await httpClient.GetStringAsync($"{apiBaseUrl}/api/video/{this.VideoId}/title");
        }
        else
        {
            this.OpenGraphTitle = restoredOpenGraphTitle!;
        }
    }

    private async Task PersistOpenGraphDescriptionAsync()
    {
        if (!ApplicationState.TryTakeFromJson<string>(
                nameof(this.OpenGraphDescription), out var restoredOpenGraphDescription))
        {
            this.OpenGraphDescription = await httpClient.GetStringAsync($"{apiBaseUrl}/api/video/{this.VideoId}/description");
        }
        else
        {
            this.OpenGraphDescription = restoredOpenGraphDescription!;
        }
    }

    private async Task PersistVideoInfoModelAsync()
    {
        if (!ApplicationState.TryTakeFromJson<VideoInfoModel>(
                nameof(this.videoInfoModel), out var restoredVideoInfoModel))
        {
            this.videoInfoModel = await this.videoInfoService.GetVideoInfoByVideoIdAsync(
                this.VideoId!,
                this.cancellationTokenSource.Token
            );
        }
        else
        {
            this.videoInfoModel = restoredVideoInfoModel!;
        }
        this.VideoUrl = videoInfoModel!.PublishedUrl;
    }

    private async Task<PaginationOfT<VideoCommentModel>> PersistCommentsAsync(GridItemsProviderRequest<VideoCommentModel> req)
    {
        if (!ApplicationState.TryTakeFromJson<PaginationOfT<VideoCommentModel>>(
                nameof(this.PageComments), out var restoredComments))
        {
            PaginationRequest paginationRequest = new()
                {
                    SortingItems = new SortingItem[]
                {
                    new SortingItem()
                    {
                        PropertyName = nameof(VideoCommentModel.RowCreationDateTime),
                        SortType = SortType.Descending
                    }
                },
                    PageSize = paginationState.ItemsPerPage,
                    StartIndex = req.StartIndex
                };
            this.IsBusy = true;
            StateHasChanged();
            var items = await videoCommentService.GetPaginatedCommentsByVideonIdAsync(paginationRequest,
                this.VideoId!, this.cancellationTokenSource.Token);
            this.PageComments = items;
            this.IsBusy = false;
            StateHasChanged();
            return items;
        }
        else
        {
            return restoredComments!;
        }
    }

    private async Task PersistSupportedLanguageAsync()
    {
        if (!ApplicationState.TryTakeFromJson<SupportedLanguageModel[]?>(
                nameof(this.SupportedLanguages), out var restoredSupportedLanguages))
        {
            this.SupportedLanguages = await supportedLanguageService
            .GetAllSupportedLanguageForVideoInfoIdAsync(videoInfoId: videoInfoModel!.VideoInfoId,
                cancellationToken: this.cancellationTokenSource.Token);
        }
        else
        {
            this.SupportedLanguages = restoredSupportedLanguages!;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        persistingSubscription =
            ApplicationState.RegisterOnPersisting(PersistData);

        ItemsProvider = async req =>
        {
            var items = await PersistCommentsAsync(req);
            var result = GridItemsProviderResult.From<VideoCommentModel>(items!.Items!, items.TotalItems);
            return result;
        };
        try
        {
            this.IsBusy = true;
            StateHasChanged();
            await PersistOpenGraphTitleAsync();
            await PersistOpenGraphDescriptionAsync();
            await PersistVideoInfoModelAsync();

            var currentUserId = this.userProviderService.GetCurrentUserId();
            if (!String.IsNullOrWhiteSpace(currentUserId))
            {
                this.createVideoCommentModel ??= new CreateVideoCommentModel()
                    {
                        VideoInfoId = this.videoInfoModel!.VideoInfoId,
                        ApplicationUserId = currentUserId
                    };
            }
            await PersistSupportedLanguageAsync();
        }
        catch (Exception ex)
        {
            this.toastService.ShowError(ex.Message);
        }
        finally
        {
            this.IsBusy = false;
        }
    }


    private async Task OnCreateCommentClickedAsync()
    {
        try
        {
            this.IsBusy = true;
            StateHasChanged();
            await this.videoCommentService.CreateVideoCommentAsync(this.createVideoCommentModel!,
            this.cancellationTokenSource.Token);
            await this.paginationState.SetCurrentPageIndexAsync(
                this.paginationState.CurrentPageIndex
            );
            this.createVideoCommentModel!.Comment = null;
        }
        catch (Exception ex)
        {
            this.toastService.ShowError(ex.Message);
        }
        finally
        {
            this.IsBusy = false;
            StateHasChanged();
        }
    }

    private async Task OnCreateDescriptionWithAIAsync()
    {
        try
        {
            this.IsBusy = true;
            StateHasChanged();
            await this.videoInfoService.CreateDescriptionForVideoAsync(this.videoInfoModel!.VideoInfoId, 
                CultureInfo.CurrentCulture.Name,
                this.cancellationTokenSource.Token);
            this.videoInfoModel = await this.videoInfoService.GetVideoInfoByVideoIdAsync(
                this.VideoId!,
                this.cancellationTokenSource.Token);
        }
        catch (Exception ex)
        {
            this.toastService.ShowError(ex.Message);
        }
        finally
        {
            this.IsBusy = false;
            StateHasChanged();
        }
    }

    public ValueTask DisposeAsync()
    {
        this.cancellationTokenSource.Dispose();
        this.persistingSubscription.Dispose();
        return ValueTask.CompletedTask;
    }

    #region Resource Keys
    [ResourceKey(defaultValue: "Video was generated using AI, content could be innacurate.")]
    public const string VideoGeneratedWithAIAccuracyWarningTextKey = "VideoGeneratedWithAIAccuracyWarningText";
    [ResourceKey(defaultValue: "Share")]
    public const string ShareTextKey = "ShareText";
    [ResourceKey(defaultValue: "Description")]
    public const string DescriptionTextKey = "DescriptionText";
    [ResourceKey(defaultValue: "Create With AI")]
    public const string CreateWithAITextKey = "CreateWithAITextKeyCreateWithAIText";
    [ResourceKey(defaultValue: "Monetization")]
    public const string MonetizationTextKey = "MonetizationText";
    [ResourceKey(defaultValue: "{0} is all about been fair to everyone, that includes every single creator, even those just starting, even those totally unexperienced. No matter how small, how unexperienced, they all deserve to be compensated for their creations. Creating content takes effort, and sometimes, even money. We encourage you to help every creator by funding their efforts through their monenization profiles.")]
    public const string MonetizationDescriptionTextKey = "MonetizationDescriptionText";
    [ResourceKey(defaultValue: "Keywords")]
    public const string KeywordsTextKey = "KeywordsText";
    [ResourceKey(defaultValue: "Topics")]
    public const string TopicsTextKey = "TopicsText";
    [ResourceKey(defaultValue: "All Insights")]
    public const string AllInsightsTextKey = "AllInsightsText";
    [ResourceKey(defaultValue: "Comments")]
    public const string CommentsTextKey = "CommentsText";
    [ResourceKey(defaultValue: "Add Comment")]
    public const string AddCommentTextKey = "AddCommentText";
    [ResourceKey(defaultValue: "No data to show!")]
    public const string NoDataTextKey = "NoDataText";
    [ResourceKey(defaultValue: "Only users with an account are allowed to play this video. You need to login first")]
    public const string VideoAvailableForUsersOnlyTextKey = "VideoAvailableForUsersOnlyText";
    [ResourceKey(defaultValue: "Login")]
    public const string LoginTextKey = "LoginText";
    #endregion Resource Keys
}
