@page "/Public/WatchVideo/{VideoId}"
@implements IAsyncDisposable
@using FairPlayCombined.Common.GeneratorsAttributes
@using FairPlayCombined.Interfaces
@using FairPlayCombined.Interfaces.FairPlayTube
@using FairPlayCombined.Models.AzureVideoIndexer
@using FairPlayCombined.Models.FairPlayTube.VideoComment
@using FairPlayCombined.Models.FairPlayTube.VideoInfo
@using FairPlayCombined.Models.Pagination
@using FairPlayTube.SharedUI.Components.Spinners
@using FairPlayTube.SharedUI.Components.Video

@inject IJSRuntime jsRuntime
@inject IVideoWatchTimeService videoWatchTimeService
@inject ILogger<WatchVideo> logger;
@inject IUserProviderService userProviderService
@inject ISupportedLanguageService supportedLanguageService
@inject IVideoInfoService videoInfoService
@inject IVideoCommentService videoCommentService
@inject IToastService toastService
@inject IApiResolver apiResolver

@inject NavigationManager navigationManager
@inject HttpClient httpClient
@inject PersistentComponentState ApplicationState

<HeadContent>
    <meta name="thumbnail" content="@($"{apiBaseUrl}/api/video/{this.VideoId}/thumbnail")" />

    <meta property="og:title" content="@OpenGraphTitle" />
    <meta property="og:description" content="@OpenGraphDescription" />

    <meta property="og:image" content="@($"{apiBaseUrl}/api/video/{this.VideoId}/thumbnail")" />
    <meta property="og:image:secure_url" content="@($"{apiBaseUrl}/api/video/{this.VideoId}/thumbnail")" />
    <meta property="og:image:type" content="image/jpeg" />
    <meta property="og:image:width" content="400" />
    <meta property="og:image:height" content="300" />
    <meta property="og:image:alt" content="@($"{apiBaseUrl}/api/video/{this.VideoId}/description")" />
</HeadContent>
<FluentLabel Typo="Typography.H3">WatchVideo</FluentLabel>

<LoadingIndicator ShowSpinners="this.IsBusy"></LoadingIndicator>
@if (!this.UseFallbackMode && !String.IsNullOrWhiteSpace(this.VideoUrl))
{
    <div id="container" data-permanent>
        <!-- HTML -->
        <VideoJs SupportedLanguages="@this.SupportedLanguages"
                 VideoId="@this.VideoId"
                 VideoUrl="@this.VideoUrl"></VideoJs>
    </div>
    <div>
        <FluentButton Type="ButtonType.Button"
                      Appearance="Microsoft.FluentUI.AspNetCore.Components.Appearance.Accent"
                      OnClick="OnUseFallbackMode">Can't see the video? Click here!</FluentButton>
    </div>
    @if (this.videoInfoModel != null)
    {
        <FluentAccordion>
            <FluentAccordionItem Heading="Description" Expanded="true">
                <FluentTextArea style="width:100%;" Value="@this.videoInfoModel.Description"></FluentTextArea>
            </FluentAccordionItem>
        </FluentAccordion>
    }
    @if (this.videoInfoModel?.VideoKeywords?.Length > 0)
    {
        <FluentAccordion>
            <FluentAccordionItem Expanded="false" Heading="Keywords">
                <div>
                    <FluentStack Orientation="Orientation.Horizontal" Wrap="true" HorizontalGap="3">
                        @foreach (var singleKeyword in this.videoInfoModel.VideoKeywords)
                        {
                            <FluentBadge Circular="true"
                                         Appearance="Microsoft.FluentUI.AspNetCore.Components.Appearance.Accent">
                                @singleKeyword
                            </FluentBadge>
                        }
                    </FluentStack>
                </div>
            </FluentAccordionItem>
        </FluentAccordion>
    }
    @if (this.videoInfoModel?.VideoTopics?.Length > 0)
    {
        <FluentAccordion>
            <FluentAccordionItem Heading="Topics" Expanded="false">
                <div>
                    <FluentStack Orientation="Orientation.Horizontal" Wrap="true" HorizontalGap="3">
                        @foreach (var singleTopic in this.videoInfoModel.VideoTopics)
                        {
                            <FluentBadge Circular="true"
                                         Appearance="Microsoft.FluentUI.AspNetCore.Components.Appearance.Accent"
                                         Class="multiline-text">
                                @singleTopic
                            </FluentBadge>
                        }
                    </FluentStack>
                </div>
            </FluentAccordionItem>
        </FluentAccordion>
    }
}
else
{
    <div>
        <iframe src="@this.FallbackModeUrl" width="600" allowfullscreen></iframe>
    </div>
}

<FluentLabel Typo="Typography.H3">Comments</FluentLabel>
<AuthorizeView>
    <Authorized>
        @if (this.createVideoCommentModel != null)
        {
            <FluentEditForm Context="formContext" Model="this.createVideoCommentModel" OnValidSubmit="OnCreateCommentClickedAsync">
                <div>
                    <DataAnnotationsValidator></DataAnnotationsValidator>
                    <FluentValidationSummary></FluentValidationSummary>
                </div>
                <div>
                    <FluentTextField Required="true" Placeholder="Add a comment..." @bind-Value="this.createVideoCommentModel.Comment"></FluentTextField>
                </div>
                <div>
                    <FluentButton Type="ButtonType.Submit" style="display:none;">Add Comment</FluentButton>
                </div>
            </FluentEditForm>
        }
    </Authorized>
</AuthorizeView>
<FluentPaginator State="this.paginationState"></FluentPaginator>
<div class="@ThemeConfiguration.Grids.GridContainerCss">
    <FluentDataGrid ItemsProvider="this.ItemsProvider" Pagination="this.paginationState">
        <TemplateColumn>
            <FluentCard>
                <FluentHeader>
                    <strong>
                        @context.RowCreationUser
                    </strong> @context.RowCreationDateTime.LocalDateTime
                </FluentHeader>
                <FluentBodyContent>
                    @context.Comment
                </FluentBodyContent>
            </FluentCard>
        </TemplateColumn>
    </FluentDataGrid>
</div>

@code {
    [Parameter]
    public string? VideoId { get; set; }
    private bool IsBusy { get; set; }
    private readonly CancellationTokenSource cancellationTokenSource = new();
    private bool UseFallbackMode { get; set; }
    private string? FallbackModeUrl { get; set; }
    private VideoInfoModel? videoInfoModel { get; set; }
    private string? VideoUrl { get; set; }
    private SupportedLanguageModel[]? SupportedLanguages { get; set; }
    private GridItemsProvider<VideoCommentModel>? ItemsProvider;
    private readonly PaginationState paginationState = new()
        {
            ItemsPerPage = Constants.Pagination.PageSize
        };
    [SupplyParameterFromForm]
    public CreateVideoCommentModel? createVideoCommentModel { get; set; }
    private string apiBaseUrl => apiResolver.GetBaseUrl();

    private string? OpenGraphTitle { get; set; }
    private string? OpenGraphDescription { get; set; }
    private PaginationOfT<VideoCommentModel>? PageComments { get; set; }
    private PersistingComponentStateSubscription persistingSubscription;

    private Task PersistData()
    {
        //Check https://learn.microsoft.com/en-us/aspnet/core/blazor/components/prerender?view=aspnetcore-9.0
        ApplicationState.PersistAsJson<string>(nameof(OpenGraphTitle), this.OpenGraphTitle!);
        ApplicationState.PersistAsJson<string>(nameof(OpenGraphDescription), this.OpenGraphDescription!);
        ApplicationState.PersistAsJson<VideoInfoModel>(nameof(this.videoInfoModel), this.videoInfoModel!);
        ApplicationState.PersistAsJson<PaginationOfT<VideoCommentModel>>(nameof(this.PageComments), this.PageComments!);
        ApplicationState.PersistAsJson<SupportedLanguageModel[]?>(nameof(this.SupportedLanguages), this.SupportedLanguages);
        return Task.CompletedTask;
    }

    private async Task PersistOpenGraphTitleAsync()
    {
        if (!ApplicationState.TryTakeFromJson<string>(
                nameof(this.OpenGraphTitle), out var restoredOpenGraphTitle))
        {
            this.OpenGraphTitle = await httpClient.GetStringAsync($"{apiBaseUrl}/api/video/{this.VideoId}/title");
        }
        else
        {
            this.OpenGraphTitle = restoredOpenGraphTitle!;
        }
    }

    private async Task PersistOpenGraphDescriptionAsync()
    {
        if (!ApplicationState.TryTakeFromJson<string>(
                nameof(this.OpenGraphDescription), out var restoredOpenGraphDescription))
        {
            this.OpenGraphDescription = await httpClient.GetStringAsync($"{apiBaseUrl}/api/video/{this.VideoId}/description");
        }
        else
        {
            this.OpenGraphTitle = restoredOpenGraphDescription!;
        }
    }

    private async Task PersistVideoInfoModelAsync()
    {
        if (!ApplicationState.TryTakeFromJson<VideoInfoModel>(
                nameof(this.videoInfoModel), out var restoredVideoInfoModel))
        {
            this.videoInfoModel = await this.videoInfoService.GetVideoInfoByVideoIdAsync(
                this.VideoId!,
                this.cancellationTokenSource.Token
            );
        }
        else
        {
            this.videoInfoModel = restoredVideoInfoModel!;
        }
        this.VideoUrl = videoInfoModel!.PublishedUrl;
    }

    private async Task<PaginationOfT<VideoCommentModel>> PersistCommentsAsync(GridItemsProviderRequest<VideoCommentModel> req)
    {
        if (!ApplicationState.TryTakeFromJson<PaginationOfT<VideoCommentModel>>(
                nameof(this.PageComments), out var restoredComments))
        {
            PaginationRequest paginationRequest = new()
                {
                    SortingItems = new SortingItem[]
                {
                    new SortingItem()
                    {
                        PropertyName = nameof(VideoCommentModel.RowCreationDateTime),
                        SortType = SortType.Descending
                    }
                },
                    PageSize = paginationState.ItemsPerPage,
                    StartIndex = req.StartIndex
                };
            this.IsBusy = true;
            StateHasChanged();
            var items = await videoCommentService.GetPaginatedCommentsByVideonIdAsync(paginationRequest,
                this.VideoId!, this.cancellationTokenSource.Token);
            this.PageComments = items;
            this.IsBusy = false;
            StateHasChanged();
            return items;
        }
        else
        {
            return restoredComments!;
        }
    }

    private async Task PersistSupportedLanguageAsync()
    {
        if (!ApplicationState.TryTakeFromJson<SupportedLanguageModel[]?>(
                nameof(this.SupportedLanguages), out var restoredSupportedLanguages))
        {
            this.SupportedLanguages = await supportedLanguageService
            .GetAllSupportedLanguageForVideoInfoIdAsync(videoInfoId: videoInfoModel!.VideoInfoId,
                cancellationToken: this.cancellationTokenSource.Token);
        }
        else
        {
            this.SupportedLanguages = restoredSupportedLanguages!;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        persistingSubscription =
            ApplicationState.RegisterOnPersisting(PersistData);

        ItemsProvider = async req =>
        {
            var items = await PersistCommentsAsync(req);
            var result = GridItemsProviderResult.From<VideoCommentModel>(items!.Items!, items.TotalItems);
            return result;
        };
        try
        {
            this.IsBusy = true;
            StateHasChanged();
            await PersistOpenGraphTitleAsync();
            await PersistOpenGraphDescriptionAsync();
            await PersistVideoInfoModelAsync();

            var currentUserId = this.userProviderService.GetCurrentUserId();
            if (!String.IsNullOrWhiteSpace(currentUserId))
            {
                this.createVideoCommentModel ??= new CreateVideoCommentModel()
                    {
                        VideoInfoId = this.videoInfoModel!.VideoInfoId,
                        ApplicationUserId = currentUserId
                    };
            }
            await PersistSupportedLanguageAsync();
        }
        catch (Exception ex)
        {
            this.toastService.ShowError(ex.Message);
        }
        finally
        {
            this.IsBusy = false;
        }
    }


    private async Task OnCreateCommentClickedAsync()
    {
        try
        {
            this.IsBusy = true;
            StateHasChanged();
            await this.videoCommentService.CreateVideoCommentAsync(this.createVideoCommentModel!,
            this.cancellationTokenSource.Token);
            await this.paginationState.SetCurrentPageIndexAsync(
                this.paginationState.CurrentPageIndex
            );
            this.createVideoCommentModel!.Comment = null;
        }
        catch (Exception ex)
        {
            this.toastService.ShowError(ex.Message);
        }
        finally
        {
            this.IsBusy = false;
            StateHasChanged();
        }
    }

    private void OnUseFallbackMode()
    {
        this.FallbackModeUrl = $"https://www.videoindexer.ai/embed/player/{this.videoInfoModel!.AccountId}/{this.VideoId}/?locale=en&location={this.videoInfoModel.Location}";
        this.UseFallbackMode = true;
        StateHasChanged();
    }

    public ValueTask DisposeAsync()
    {
        this.cancellationTokenSource.Dispose();
        this.persistingSubscription.Dispose();
        return ValueTask.CompletedTask;
    }
}
