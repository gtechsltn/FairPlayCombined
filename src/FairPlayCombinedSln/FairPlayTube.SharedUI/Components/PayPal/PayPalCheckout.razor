@implements IAsyncDisposable

@using FairPlayCombined.Common.CustomAttributes
@using FairPlayCombined.Models.PayPal
@using FairPlayCombined.Services.Common
@using Microsoft.Extensions.Localization

@inject IStringLocalizer<PayPalCheckout> Localizer
@inject IJSRuntime JSRuntime
@inject IToastService toastService
@inject UserFundService userFundService
@inject PayPalOrderService payPalOrderService

<div>
    <div id="smart-button-container">
        <div style="text-align: center;">
            <div style="margin-bottom: 1.25rem;">
                <p>@Localizer[AddFundsTextKey]</p>
                <select id="item-options">
                    <option value="5 Dollars" price="5"> - 5 USD</option>
                    <option value="10 Dollars" price="10"> - 10 USD</option>
                    <option value="20 Dollars" price="20"> - 20 USD</option>
                    <option value="25 Dollars" price="25"> - 25 USD</option>
                </select>
                <select style="visibility: hidden" id="quantitySelect"></select>
            </div>
            <div id="paypal-button-container"></div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public EventCallback OnFundsAdded { get; set; }
    private DotNetObjectReference<PayPalCheckout>? objRef;
    private readonly CancellationTokenSource cancellationTokenSource = new();
    
    protected override void OnInitialized()
    {
        this.objRef = DotNetObjectReference.Create(this);
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("initPayPalButton", objRef);
            StateHasChanged();
        }
    }

    [JSInvokable]
    public async Task OnApprove(PaypalCheckoutApprovedDataModel data,
        PaypalCheckoutApprovedDetailsModel details)
    {
        try
        {
            await this.userFundService.AddMyFundsAsync(data.orderID!, this.cancellationTokenSource.Token);
            this.toastService.ShowSuccess($"Funds have been added to your Wallet");
            await OnFundsAdded.InvokeAsync();
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message);
        }
    }

    public async ValueTask DisposeAsync()
    {
        await this.cancellationTokenSource.CancelAsync();
        this.cancellationTokenSource.Dispose();
    }

    #region Resource Keys
    [ResourceKey(defaultValue: "Add Funds To FairPlayTube")]
    public const string AddFundsTextKey = "AddFundsText";
    #endregion Resource Keys
}