@page "/"
@using FairPlayCombined.Common
@using FairPlayCombined.Models.FairPlayTube.VideoInfo
@using FairPlayCombined.Models.Pagination
@using FairPlayCombined.Services.Common
@using FairPlayCombined.Services.FairPlayTube
@using FairPlayTube.Components.Spinners

@rendermode RenderMode.InteractiveServer
@inject AzureVideoIndexerService azureVideoIndexerService
@inject VideoInfoService videoInfoService
@inject NavigationManager navigationManager
<PageTitle>Home</PageTitle>

<LoadingIndicator ShowSpinners="this.IsBusy"></LoadingIndicator>
<div class="@ThemeConfiguration.Grids.GridContainerCss">
    <FluentDataGrid ItemsProvider="ItemsProvider" Pagination="this.paginationState">
        <TemplateColumn>
            <div>
                <button type="button" class="@ThemeConfiguration.Buttons.PrimaryButtonCss" @onclick="@( () => OnPlayVideoClicked(context!.VideoId!))">Play</button>
            </div>
        </TemplateColumn>
        <PropertyColumn Property="@(p=>p.Name)"></PropertyColumn>
        <PropertyColumn Property="@(P=>P.VideoId)"></PropertyColumn>
        <PropertyColumn Property="@(p=>p.YouTubeVideoId)"></PropertyColumn>
        <TemplateColumn>
            @if (!String.IsNullOrWhiteSpace(context.YouTubeVideoId))
            {
                <a data-enhance-nav="false" href="@($"https://youtu.be/{context.YouTubeVideoId}")" target="_blank">View On YouTube</a>
            }
        </TemplateColumn>
    </FluentDataGrid>
</div>
<FluentPaginator State="this.paginationState"></FluentPaginator>
@code
{
    private bool IsBusy { get; set; }
    private GridItemsProvider<VideoInfoModel>? ItemsProvider;
    PaginationState paginationState = new()
        {
            ItemsPerPage = Constants.Pagination.PageSize
        };
    private CancellationTokenSource cancellationTokenSource = new();

    protected override void OnInitialized()
    {
        ItemsProvider = async req =>
        {
            this.IsBusy = true;
            StateHasChanged();
            PaginationRequest paginationRequest = new()
                {
                    PageSize = paginationState.ItemsPerPage,
                    StartIndex = req.StartIndex
                };
            var items = await videoInfoService.GetPaginatedCompletedVideoInfoAsync(paginationRequest,
            this.cancellationTokenSource.Token);
            this.IsBusy = false;
            StateHasChanged();
            var result = GridItemsProviderResult.From<VideoInfoModel>(items!.Items!, items.TotalItems);
            return result;
        };
    }

    private void OnPlayVideoClicked(string videoId)
    {
        this.navigationManager.NavigateTo($"/Public/WatchVideo/{videoId}");
    }

}
