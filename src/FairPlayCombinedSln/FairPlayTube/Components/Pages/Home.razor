@page "/"
@using FairPlayCombined.Common
@using FairPlayCombined.Models.FairPlayTube.VideoInfo
@using FairPlayCombined.Models.Pagination
@using FairPlayCombined.Services.Common
@using FairPlayCombined.Services.FairPlayTube
@using FairPlayTube.Components.Spinners

@rendermode RenderMode.InteractiveServer
@inject AzureVideoIndexerService azureVideoIndexerService
@inject VideoInfoService videoInfoService
@inject NavigationManager navigationManager
<PageTitle>Home</PageTitle>

<LoadingIndicator ShowSpinners="this.IsBusy"></LoadingIndicator>

@if (this.PageItems != null)
{
    <FluentStack Orientation="Orientation.Horizontal">
        @foreach (var singleItem in this.PageItems.Value.Items)
        {
            <div>
                <div>
                    <img src="@($"/api/video/{singleItem.VideoId}/thumbnail")" width="400" />
                </div>
                <div>
                    <FluentLabel Typo="Typography.Body">@singleItem.Name</FluentLabel>
                </div>
                <div>
                    <FluentButton Type="ButtonType.Button" Appearance="Appearance.Accent"
                                  IconStart="@(new Icons.Regular.Size16.Play())"
                                  OnClick="@( () => OnPlayVideoClicked(singleItem.VideoId!))">Play</FluentButton>
                </div>
            </div>
        }
    </FluentStack>
}

<FluentPaginator State="this.paginationState"></FluentPaginator>
@code
{
    private bool IsBusy { get; set; }
    private GridItemsProvider<VideoInfoModel>? ItemsProvider;
    PaginationState paginationState = new()
        {
            ItemsPerPage = Constants.Pagination.PageSize
        };
    private GridItemsProviderResult<VideoInfoModel>? PageItems { get; set; }
    private CancellationTokenSource cancellationTokenSource = new();

    protected override async Task OnInitializedAsync()
    {
        ItemsProvider = async req =>
        {
            this.IsBusy = true;
            StateHasChanged();
            PaginationRequest paginationRequest = new()
                {
                    PageSize = paginationState.ItemsPerPage,
                    StartIndex = req.StartIndex,
                    SortingItems = new SortingItem[]
                    {
                        new SortingItem()
                        {
                            PropertyName=nameof(VideoInfoModel.VideoInfoId),
                            SortType = FairPlayCombined.Common.GeneratorsAttributes.SortType.Descending
                        }
                    }
                };
            var items = await videoInfoService.GetPaginatedCompletedVideoInfoAsync(paginationRequest,
            this.cancellationTokenSource.Token);
            this.IsBusy = false;
            StateHasChanged();
            var result = GridItemsProviderResult.From<VideoInfoModel>(items!.Items!, items.TotalItems);
            return result;
        };
        this.PageItems = await this.ItemsProvider(new GridItemsProviderRequest<VideoInfoModel>()
            {
                CancellationToken = this.cancellationTokenSource.Token,
                StartIndex = 0,

            });
        StateHasChanged();
    }

    private void OnPlayVideoClicked(string videoId)
    {
        this.navigationManager.NavigateTo($"/Public/WatchVideo/{videoId}");
    }

}
