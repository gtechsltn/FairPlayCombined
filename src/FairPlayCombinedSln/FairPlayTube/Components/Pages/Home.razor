@page "/"
@using FairPlayCombined.Common
@using FairPlayCombined.Models.FairPlayTube.VideoInfo
@using FairPlayCombined.Models.Pagination
@using FairPlayCombined.Services.Common
@using FairPlayCombined.Services.FairPlayTube
@using FairPlayTube.Components.Spinners
@using Microsoft.AspNetCore.Components.QuickGrid
@rendermode NoPreRender
@inject IJSRuntime jsRuntime
@inject AzureVideoIndexerService azureVideoIndexerService
@inject VideoInfoService videoInfoService
<PageTitle>Home</PageTitle>

<LoadingIndicator ShowSpinners="this.IsBusy"></LoadingIndicator>
<QuickGrid ItemsProvider="ItemsProvider" Pagination="this.paginationState">
    <TemplateColumn>
        <div class="inline">
            <video id="@($"vid-{context.VideoId}")"
                   class="azuremediaplayer amp-default-skin amp-stream-skin"
                   autoplay
                   controls
                   width="640"
                   height="480">
                <p class="amp-no-js">
                    To view this video please enable JavaScript, and consider upgrading to
                    a web browser that supports HTML5 video
                </p>
            </video>
        </div>
        <div class="inline"></div>
        <div>
            <button type="button" class="btn btn-primary" @onclick="@( async () => await OnPlayVideoClickedAsync(context!.VideoId!))">Play</button>
        </div>
    </TemplateColumn>
</QuickGrid>
<Paginator State="this.paginationState"></Paginator>
@code
{
    private static IComponentRenderMode NoPreRender = new InteractiveServerRenderMode(prerender: false);
    private bool IsBusy { get; set; }
    private GridItemsProvider<VideoInfoModel>? ItemsProvider;
    PaginationState paginationState = new()
        {
            ItemsPerPage = Constants.Pagination.PageSize
        };
    private CancellationTokenSource cancellationTokenSource = new();

    protected override void OnInitialized()
    {
        ItemsProvider = async req =>
        {
            this.IsBusy = true;
            StateHasChanged();
            PaginationRequest paginationRequest = new()
                {
                    PageSize = paginationState.ItemsPerPage,
                    StartIndex = req.StartIndex
                };
            var items = await videoInfoService.GetPaginatedCompletedVideoInfoAsync(paginationRequest,
            this.cancellationTokenSource.Token);
            this.IsBusy = false;
            StateHasChanged();
            var result = GridItemsProviderResult.From<VideoInfoModel>(items!.Items!, items.TotalItems);
            return result;
        };
    }

    private async Task OnPlayVideoClickedAsync(string videoId)
    {
        this.IsBusy = true;
        StateHasChanged();
        var armAccessToken = await azureVideoIndexerService.AuthenticateToAzureArmAsync();
        var viAccessTokenResponse = await azureVideoIndexerService
        .GetAccessTokenForArmAccountAsync(armAccessToken, CancellationToken.None);
        var videoIndex = await azureVideoIndexerService
        .GetVideoIndexAsync(videoId, viAccessTokenResponse!.AccessToken!,
        CancellationToken.None);
        var singleVideoIndex = videoIndex!.videos!.Single();
        await jsRuntime.InvokeVoidAsync("initSource", $"vid-{videoId}",
        singleVideoIndex.publishedUrl,
        singleVideoIndex.viewToken,
        videoId);
        this.IsBusy = false;
        StateHasChanged();
    }

}
