@page "/User/VideoDailyPosts/{VideoInfoId:long}"
@using FairPlayCombined.Common
@using FairPlayCombined.Interfaces
@using FairPlayCombined.Models.FairPlayTube.VideoInfo
@using FairPlayCombined.Models.Pagination
@using FairPlayCombined.Services.Common
@using FairPlayCombined.Services.FairPlayTube
@using FairPlayTube.Components.Spinners
@using Microsoft.AspNetCore.Components.QuickGrid
@using System.Text
@rendermode NoPreRenderServerMode
@inject IJSRuntime jsRuntime
@inject VideoInfoService videoInfoService
@inject IUserProviderService userProviderService
@inject OpenAIService openAIService
@inject VideoCaptionsService videoCaptionsService
@inject VideoDigitalMarketingDailyPostsService videoDigitalMarketingDailyPostsService
<PageTitle>Home</PageTitle>

<LoadingIndicator ShowSpinners="this.IsBusy"></LoadingIndicator>


<div class="@ThemeConfiguration.Divisions.DefaultCss">
    @if (!String.IsNullOrWhiteSpace(this.DigitalMarketingDailyPostsIdeas))
    {
        <p>
            @((MarkupString)this.DigitalMarketingDailyPostsIdeas)
        </p>
    }
</div>

@code
{
    [Parameter]
    public long? VideoInfoId {get;set;}
    private static IComponentRenderMode NoPreRenderServerMode = new InteractiveServerRenderMode(prerender: false);
    private bool IsBusy { get; set; }
    private CancellationTokenSource cancellationTokenSource = new();
    private string? DigitalMarketingDailyPostsIdeas { get; set; }
    private string? RevisedPrompt { get; set; }

    protected override async Task OnInitializedAsync()
    {
        this.IsBusy = true;
        StateHasChanged();
        var videoInfoModel = await this.videoInfoService.GetVideoInfoByIdAsync(id: this.VideoInfoId!.Value,
        cancellationToken: this.cancellationTokenSource.Token);
        this.DigitalMarketingDailyPostsIdeas = await this.videoDigitalMarketingDailyPostsService
        .GetVideoDigitalMarketingDailyPostsAsync(
            videoInfoId: videoInfoModel.VideoInfoId,
            socialNetworkName: "LinkedIn",
            cancellationToken: this.cancellationTokenSource.Token);
        if (String.IsNullOrWhiteSpace(this.DigitalMarketingDailyPostsIdeas))
        {
            var englishCaptions = await this.videoCaptionsService
            .GetVideoCaptionsByVideoInfoIdAndLanguageAsync(videoInfoId: videoInfoModel.VideoInfoId,
            language: "en-US", cancellationToken: this.cancellationTokenSource.Token);
            var todaysDate = DateTimeOffset.Now;
            StringBuilder systemMessage = new();
            systemMessage.AppendLine("You will take the role of an expert in Digital Marketing. I will give you the information for one of my videos. Your job is to give me a list of 30 related posts for my LinkedIn. Your response must be in HTML 5. Do not reduce the response if is lengthy, I need the full list of 30 posts.");
            systemMessage.AppendLine("Response Format: ");
            systemMessage.AppendLine($"'{todaysDate}': Post for day {todaysDate}");
            systemMessage.AppendLine($"'{todaysDate.AddDays(1)}': Post text for day {todaysDate.AddDays(1)}");
            systemMessage.AppendLine($"'{todaysDate.AddDays(2)}': Post text for day {todaysDate.AddDays(2)}");
            systemMessage.AppendLine($"'{todaysDate.AddDays(3)}': Post text for day {todaysDate.AddDays(3)}");
            systemMessage.AppendLine($"'{todaysDate.AddDays(4)}': Post textfor day {todaysDate.AddDays(4)}");
            var userMessage = $"Video Title: {videoInfoModel.Description}. Video Captions: {englishCaptions}";
            var result = await this.openAIService.GenerateChatCompletionAsync(systemMessage.ToString(), userMessage, this.cancellationTokenSource.Token);
            if (result != null)
            {
                this.DigitalMarketingDailyPostsIdeas = result!.choices![0]!.message!.content!;
                await this.videoDigitalMarketingDailyPostsService.SaveGetVideoDigitalMarketingDailyPostsAsync(
                    videoInfoId: videoInfoModel.VideoInfoId,
                    htmlVideoDigitalMarketingDailyPostsIdeas: this.DigitalMarketingDailyPostsIdeas,
                    socialNetworkName: "LinkedIn",
                    cancellationToken: this.cancellationTokenSource.Token);
            }
        }
        this.IsBusy = false;
        StateHasChanged();
    }
}
