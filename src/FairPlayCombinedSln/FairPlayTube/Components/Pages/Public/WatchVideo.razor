@page "/Public/WatchVideo/{VideoId}"
@implements IAsyncDisposable
@using FairPlayCombined.Models.AzureVideoIndexer
@using FairPlayCombined.Services.Common
@using FairPlayTube.Components.Spinners

@rendermode NoPreRender

@inject AzureVideoIndexerServiceConfiguration azureVideoIndexerServiceConfiguration
@inject AzureVideoIndexerService azureVideoIndexerService
@inject IJSRuntime jsRuntime


<FluentLabel Typo="Typography.H3">WatchVideo</FluentLabel>

<LoadingIndicator ShowSpinners="this.IsBusy"></LoadingIndicator>
@if (!this.UseFallbackMode)
{
    <div id="container" data-permanent>
        <video id="video"
               class="azuremediaplayer amp-default-skin amp-stream-skin"
               autoplay
               controls
               width="200"
               height="200">
            <p class="amp-no-js">
                To view this video please enable JavaScript, and consider upgrading to
                a web browser that supports HTML5 video
            </p>
        </video>
        <div class="inline"></div>
    </div>
    <div>
        <FluentButton Type="ButtonType.Button"
                      Appearance="Microsoft.FluentUI.AspNetCore.Components.Appearance.Accent"
                      OnClick="OnUseFallbackMode">Can't see the video? Click here!</FluentButton>
    </div>
}
else
{
    <div>
        <iframe src="@this.FallbackModeUrl" width="600" allowfullscreen></iframe>
    </div>
}

@code {
    [Parameter]
    public string? VideoId { get; set; }
    private static IComponentRenderMode NoPreRender = new InteractiveServerRenderMode(prerender: false);
    private bool IsBusy { get; set; }
    private GetVideoIndexResponseModel? videoIndex { get; set; }
    private GetAccessTokenResponseModel? viAccessTokenResponse { get; set; }
    private CancellationTokenSource cancellationTokenSource = new();
    private bool UseFallbackMode { get; set; }
    private string? FallbackModeUrl { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            this.IsBusy = true;
            StateHasChanged();
            var armAccessToken = await azureVideoIndexerService.AuthenticateToAzureArmAsync();
            this.viAccessTokenResponse = await azureVideoIndexerService
            .GetAccessTokenForArmAccountAsync(armAccessToken, this.cancellationTokenSource.Token);
            this.videoIndex = await azureVideoIndexerService
            .GetVideoIndexAsync(this.VideoId!, viAccessTokenResponse!.AccessToken!,
            this.cancellationTokenSource.Token);
            var supportedLanguages = await azureVideoIndexerService
            .GetSupportedLanguagesAsync(viAccessTokenResponse!.AccessToken!,
            this.cancellationTokenSource.Token);
            var singleVideoIndex = videoIndex!.videos!.Single();
            await jsRuntime.InvokeVoidAsync(
                identifier: "initSource",
                cancellationToken: this.cancellationTokenSource.Token,
            "video",
            singleVideoIndex.publishedUrl,
            singleVideoIndex.viewToken,
            this.VideoId,
            supportedLanguages!.Select(p => new
            {
                src = $"/api/video/{this.VideoId}/captions/{p.languageCode}",
                srclang = p.languageCode,
                kind = "subtitles",
                label = p.name
            }).OrderBy(p => p.label).ToArray());
            this.IsBusy = false;
            StateHasChanged();
        }
    }

    private void OnUseFallbackMode()
    {
        this.FallbackModeUrl = $"https://www.videoindexer.ai/embed/player/{this.videoIndex!.accountId}/{this.videoIndex.id}/?locale=en&location={azureVideoIndexerServiceConfiguration.Location}&accessToken={this.viAccessTokenResponse!.AccessToken}";
        this.UseFallbackMode = true;
        StateHasChanged();
    }

    public ValueTask DisposeAsync()
    {
        this.cancellationTokenSource.Dispose();
        return ValueTask.CompletedTask;
    }
}
