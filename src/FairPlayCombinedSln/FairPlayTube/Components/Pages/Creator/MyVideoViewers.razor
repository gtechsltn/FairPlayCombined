@attribute [Route($"{Constants.Routes.FairPlayTubeRoutes.CreatorRoutes.MyVideoViewers}/{{VideoId}}")]
@implements IDisposable

@using FairPlayCombined.Common
@using FairPlayCombined.Interfaces
@using FairPlayCombined.Models.FairPlayTube.VideoInfo
@using FairPlayCombined.Models.FairPlayTube.VideoViewer
@using FairPlayCombined.Models.Pagination
@using FairPlayCombined.Services.Common
@using FairPlayCombined.Services.FairPlayTube
@using FairPlayTube.Components.Spinners

@rendermode @(new InteractiveServerRenderMode(prerender:false))
@inject VideoViewerService videoViewerService
@inject IUserProviderService userProviderService
<PageTitle>My Video Viewers</PageTitle>

<LoadingIndicator ShowSpinners="this.IsBusy"></LoadingIndicator>

<div class="@ThemeConfiguration.Grids.GridContainerCss">
    <FluentDataGrid ItemsProvider="ItemsProvider" Pagination="this.paginationState">
        <TemplateColumn Class="multiline-text">
            @if (String.IsNullOrWhiteSpace(context.Username))
            {
                <FluentLabel>Anonymous</FluentLabel>
            }
            else
            {
                <FluentLabel>@context.Username</FluentLabel>
            }
        </TemplateColumn>
        <TemplateColumn Title="@nameof(VideoViewerModel.TotalTimeWatched)">
            @TimeSpan.FromSeconds(context.TotalTimeWatched)
        </TemplateColumn>
        <PropertyColumn Property="@( p=> p.TotalSessions)"></PropertyColumn>
    </FluentDataGrid>
</div>
<FluentPaginator State="this.paginationState"></FluentPaginator>

@code
{
    [Parameter]
    public string? VideoId { get; set; }
    private bool IsBusy { get; set; }
    private GridItemsProvider<VideoViewerModel>? ItemsProvider;
    private readonly PaginationState paginationState = new()
        {
            ItemsPerPage = Constants.Pagination.PageSize
        };
    private readonly CancellationTokenSource cancellationTokenSource = new();

    protected override void OnInitialized()
    {
        this.IsBusy = true;
        ItemsProvider = async req =>
        {
            StateHasChanged();
            PaginationRequest paginationRequest = new()
                {
                    PageSize = paginationState.ItemsPerPage,
                    StartIndex = req.StartIndex
                };
            var items = await videoViewerService
            .GetPaginatedVideoViewerInfoForUserIdAsync(paginationRequest,
                videoId: this.VideoId!,
                userId: this.userProviderService!.GetCurrentUserId()!,
            this.cancellationTokenSource.Token);
            StateHasChanged();
            var result = GridItemsProviderResult.From<VideoViewerModel>(items!.Items!, items.TotalItems);
            return result;
        };
        this.IsBusy = false;
    }

    void IDisposable.Dispose()
    {
        this.cancellationTokenSource.Dispose();
    }
}
