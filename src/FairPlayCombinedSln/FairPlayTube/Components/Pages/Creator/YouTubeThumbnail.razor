@page "/Creator/YouTubeThumbnail/{VideoInfoId:long}"
@implements IDisposable

@using FairPlayCombined.Common
@using FairPlayCombined.Interfaces
@using FairPlayCombined.Models.FairPlayTube.VideoInfo
@using FairPlayCombined.Models.Pagination
@using FairPlayCombined.Services.Common
@using FairPlayCombined.Services.FairPlayTube
@using FairPlayTube.Components.Spinners

@rendermode NoPreRenderServerMode
@inject IJSRuntime jsRuntime
@inject VideoInfoService videoInfoService
@inject IUserProviderService userProviderService
@inject OpenAIService openAIService
@inject VideoCaptionsService videoCaptionsService
@inject PromptGeneratorService promptGeneratorService

<PageTitle>
    Video Thumbnail
</PageTitle>

<FluentLabel Typo="Typography.H3">
    Video Thumbnail
</FluentLabel>

<LoadingIndicator ShowSpinners="this.IsBusy"></LoadingIndicator>


<div>
    @if (!String.IsNullOrWhiteSpace(this.GeneratedYouTubeThumbnailUri))
    {
        <a data-enhance-nav="false" href="@this.GeneratedYouTubeThumbnailUri" target="_blank">
            <img width="400" class="@ThemeConfiguration.Images.ThumbnailDefaultCss" src="@this.GeneratedYouTubeThumbnailUri" />
        </a>
        <p>
            <FluentLabel Typo="Typography.Body">
                @this.RevisedPrompt
            </FluentLabel>
        </p>
    }
</div>

@code
{
    [Parameter]
    public long? VideoInfoId {get;set;}
    private static IComponentRenderMode NoPreRenderServerMode = new InteractiveServerRenderMode(prerender: false);
    private bool IsBusy { get; set; }
    private readonly CancellationTokenSource cancellationTokenSource = new();
    private string? GeneratedYouTubeThumbnailUri { get; set; }
    private string? RevisedPrompt { get; set; }

    protected override async Task OnInitializedAsync()
    {
        this.IsBusy = true;
        StateHasChanged();
        var promptInfo = await this.promptGeneratorService.GetPromptCompleteInfoAsync(promptName:
        "YouTubeThumbnail", cancellationToken: this.cancellationTokenSource.Token);
        var videoInfoModel = await this.videoInfoService.GetVideoInfoByIdAsync(id: this.VideoInfoId!.Value,
        cancellationToken: this.cancellationTokenSource.Token);
        var englishCaptions = await this.videoCaptionsService
        .GetVideoCaptionsByVideoInfoIdAndLanguageAsync(videoInfoId: videoInfoModel.VideoInfoId,
        language: "en-US", cancellationToken: this.cancellationTokenSource.Token);
        string prompt = $"{promptInfo!.BaseText}. Video Title: {videoInfoModel.Description}. Video Captions: {englishCaptions}";
        if (prompt.Length > 4000)
            prompt = prompt.Substring(0, 4000);
        var result = await this.openAIService.GenerateDallE3ImageAsync(prompt, this.cancellationTokenSource.Token);
        if (result != null)
        {
            this.GeneratedYouTubeThumbnailUri = result!.data![0]!.url!;
            this.RevisedPrompt = result!.data[0]!.revised_prompt;
        }
        this.IsBusy = false;
        StateHasChanged();
    }

    void IDisposable.Dispose()
    {
        this.cancellationTokenSource.Dispose();
    }
}
