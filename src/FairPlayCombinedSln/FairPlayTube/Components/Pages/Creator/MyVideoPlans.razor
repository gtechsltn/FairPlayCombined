@page "/Creator/MyVideoPlans"
@implements IDisposable

@using FairPlayCombined.Common
@using FairPlayCombined.Common.FairPlayTube.Enums
@using FairPlayCombined.Interfaces
@using FairPlayCombined.Models.FairPlayTube.VideoInfo
@using FairPlayCombined.Models.FairPlayTube.VideoPlan
@using FairPlayCombined.Services.Common
@using FairPlayCombined.Services.FairPlayTube
@using FairPlayTube.Components.Spinners
@using Google.Apis.YouTube.v3.Data

@attribute [Authorize]
@rendermode @(new InteractiveServerRenderMode(prerender:false))

@inject VideoPlanService videoPlanService
@inject IToastService toastService
@inject IUserProviderService userProviderService
@inject ILogger<MyVideoPlans> logger

<FluentLabel Typo="Typography.H3">
    My Video Plans
</FluentLabel>
<LoadingIndicator ShowSpinners="this.IsBusy"></LoadingIndicator>


<FluentDataGrid ItemsProvider="this.itemsProvider">
    <TemplateColumn>
        <FluentAnchor data-enhance-nav="false"
                      data-bs-toggle="tooltip" data-bs-placement="top" title="Edit"
                      IconStart="@(new Icons.Regular.Size20.Edit())"
                      Href="@($"/Creator/UpdateVideoPlan/{context.VideoPlanId}")">
                      Edit
        </FluentAnchor>
    </TemplateColumn>
    <PropertyColumn Property="@(p=>p.VideoName)"></PropertyColumn>
    <PropertyColumn Property="@(p=>p.VideoDescription)"></PropertyColumn>
    <PropertyColumn Property="@(p=>p.VideoScript)"></PropertyColumn>
</FluentDataGrid>
<FluentPaginator State="this.paginationState"></FluentPaginator>
@code {
    private readonly CancellationTokenSource cancellationTokenSource = new();
    private bool IsBusy { get; set; }
    private readonly PaginationState paginationState = new()
        {
            ItemsPerPage = Constants.Pagination.PageSize
        };
    private GridItemsProvider<VideoPlanModel>? itemsProvider;

    protected override void OnInitialized()
    {
        this.itemsProvider = async req =>
        {
            this.IsBusy = true;
            StateHasChanged();
            var items = await this.videoPlanService.GetPaginatedVideoPlanAsync(paginationRequest: new()
            {
                PageSize = paginationState.ItemsPerPage
            }, cancellationToken:this.cancellationTokenSource.Token);
            this.IsBusy = false;
            StateHasChanged();
            var result = GridItemsProviderResult.From<VideoPlanModel>(items!.Items!, items.TotalItems);
            return result;
        };
    }

    void IDisposable.Dispose()
    {
        this.cancellationTokenSource.Dispose();
    }
}
