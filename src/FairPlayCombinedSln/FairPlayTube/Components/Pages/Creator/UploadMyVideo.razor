@page "/Creator/UploadMyVideo"
@implements IDisposable

@using FairPlayCombined.Common
@using FairPlayCombined.Common.FairPlayTube.Enums
@using FairPlayCombined.Interfaces
@using FairPlayCombined.Models.FairPlayTube.VideoInfo
@using FairPlayCombined.Services.Common
@using FairPlayCombined.Services.FairPlayTube
@using FairPlayTube.Components.Spinners
@using FairPlayTube.Components.YouTube
@using Google.Apis.YouTube.v3.Data
@attribute [Authorize]
@rendermode @(new InteractiveServerRenderMode(prerender:false))

@inject AzureVideoIndexerServiceConfiguration azureVideoIndexerServiceConfiguration
@inject AzureVideoIndexerService azureVideoIndexerService
@inject VideoInfoService videoInfoService
@inject IToastService toastService
@inject IUserProviderService userProviderService
@inject YouTubeClientService youTubeClientService
@inject ILogger<UploadMyVideo> logger
@inject NavigationManager navigationManager

<FluentLabel Typo="Typography.H3">
    UploadMyVideo
</FluentLabel>
<LoadingIndicator ShowSpinners="this.IsBusy"></LoadingIndicator>

<FluentEditForm FormName="frmCreateVideoInfo" Model="this.createVideoInfoModel"
                OnValidSubmit="OnValidSubmitAsync" @ref="frmCreateVideoInfo">
    <div>
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <FluentValidationSummary></FluentValidationSummary>
    </div>
    <div>
        <FluentLabel Typo="Typography.Body">Description</FluentLabel>
        <FluentTextArea @bind-Value="this.createVideoInfoModel.Description" style="width:100%;"></FluentTextArea>
    </div>
    <div>
        <FluentLabel Typo="Typography.Body">Name</FluentLabel>
        <FluentTextField @bind-Value="this.createVideoInfoModel.Name" style="width:100%;"></FluentTextField>
    </div>
    <div>
        <FluentLabel Typo="Typography.Body">Video Url</FluentLabel>
        <FluentTextField @bind-Value="this.createVideoInfoModel.ExternalVideoSourceUrl" style="width:100%;"></FluentTextField>
        <FluentButton Type="ButtonType.Button" OnClick="OnProcessFileButtonClickedAsync">Process File</FluentButton>
        <FluentButton Type="ButtonType.Button" OnClick="UploadToYouTubeAsync">Upload To YouTube</FluentButton>
        <FluentLabel Typo="Typography.Body">Bytes Sent: @bytesSent</FluentLabel>
    </div>
    <div>
        <FluentLabel Typo="Typography.Body">Video Id (Azure Video Indexer)</FluentLabel>
        <FluentTextField @bind-Value="this.createVideoInfoModel.VideoId" style="width:100%;"></FluentTextField>
    </div>
    <div>
        <FluentLabel Typo="Typography.Subject">Video Id (YouTube)</FluentLabel>
        <InputText class="@ThemeConfiguration.GenericControls.DefaultCss"
                   @bind-Value="this.createVideoInfoModel.YouTubeVideoId" style="width:100%;"></InputText>
        <FluentButton Type="ButtonType.Button" OnClick="this.OpenSearchYouTubeVideoDialog">Search My YouTube Videos</FluentButton>
    </div>
    <div>
        <FluentButton Type="ButtonType.Submit">Save</FluentButton>
    </div>
</FluentEditForm>

<FluentDialog @ref="searchYoutubeVideosDialog"
              @bind-Hidden="@showSearchYoutubeVideosDialog"
              Modal="true" TrapFocus="true"
              PreventScroll="false">
    <FluentDialogHeader Visible="false"></FluentDialogHeader>
    <SearchYouTubeVideo OnYouTubeVideoSelected="OnYouTubeVideoSelected"></SearchYouTubeVideo>
    <FluentButton Type="ButtonType.Button" Appearance="Appearance.Accent" OnClick="CloseSearchYouTubeVideoDialog">Close</FluentButton>
</FluentDialog>

@code {
    [SupplyParameterFromForm]
    private CreateVideoInfoModel createVideoInfoModel { get; set; } = new();
    private readonly CancellationTokenSource cancellationTokenSource = new();
    private bool IsBusy { get; set; }
    private EditForm? frmCreateVideoInfo;
    private long bytesSent { get; set; }
    private bool showSearchYoutubeVideosDialog { get; set; } = false;
    private FluentDialog? searchYoutubeVideosDialog { get; set; }

    protected override void OnInitialized()
    {
        this.createVideoInfoModel.AccountId = Guid.Parse(azureVideoIndexerServiceConfiguration.AccountId!);
        this.createVideoInfoModel.Location = azureVideoIndexerServiceConfiguration.Location;
        this.createVideoInfoModel.VideoVisibilityId = 1;
        this.createVideoInfoModel.FileName = "Test";
        this.createVideoInfoModel.VideoVisibilityId = (short)VideoVisibility.Public;
        this.createVideoInfoModel.ApplicationUserId = this.userProviderService.GetCurrentUserId();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            this.searchYoutubeVideosDialog!.Hide();
        }
    }

    private async Task OnProcessFileButtonClickedAsync()
    {
        try
        {
            logger.LogInformation(message: "Processing video from url: {Url}", this.createVideoInfoModel.ExternalVideoSourceUrl);
            this.IsBusy = true;
            StateHasChanged();
            this.frmCreateVideoInfo!.EditContext!.Validate();
            var nameField = frmCreateVideoInfo!.EditContext!.Field(nameof(CreateVideoInfoModel.Name));
            var descriptionField = frmCreateVideoInfo!.EditContext!.Field(nameof(CreateVideoInfoModel.Name));
            var externalVideoSourceUrl = frmCreateVideoInfo!.EditContext!.Field(nameof(CreateVideoInfoModel.ExternalVideoSourceUrl));
            if (!frmCreateVideoInfo.EditContext.IsValid(nameField) ||
            !frmCreateVideoInfo.EditContext.IsValid(descriptionField) ||
            !frmCreateVideoInfo.EditContext.IsValid(externalVideoSourceUrl))
            {
                this.toastService.ShowError("Please make sure to fill all the values and try again");
                return;
            }
            var authToken = await this.azureVideoIndexerService.AuthenticateToAzureArmAsync();
            var accountAccessToken = await this.azureVideoIndexerService.GetAccessTokenForArmAccountAsync(authToken, this.cancellationTokenSource.Token);
            var indexVideoResult = await this.azureVideoIndexerService
            .IndexVideoFromUriAsync(
                new AzureVideoIndexerService.IndexVideoFromUriParameters()
                    {
                        ArmAccessToken = accountAccessToken!.AccessToken!,
                        Description = this.createVideoInfoModel.Description!,
                        FileName = this.createVideoInfoModel.Name!,
                        Name = this.createVideoInfoModel.Name!,
                        VideoUri = new Uri(this.createVideoInfoModel.ExternalVideoSourceUrl!)
                    });
            this.createVideoInfoModel.VideoId = indexVideoResult!.id;
            this.createVideoInfoModel.VideoIndexStatusId = (short)VideoIndexStatus.Processing;
            this.frmCreateVideoInfo.EditContext.Validate();
            this.toastService.ShowInfo("Your has been sent to be processed.");
        }
        catch (Exception ex)
        {
            logger.LogError(exception: ex, message: "Failed to process video. {Message}", ex.Message);
            this.toastService.ShowError(ex.Message);
        }
        this.IsBusy = false;
        StateHasChanged();
    }

    public async Task UploadToYouTubeAsync()
    {
        try
        {
            this.IsBusy = true;
            StateHasChanged();
            this.frmCreateVideoInfo!.EditContext!.Validate();
            var nameField = frmCreateVideoInfo!.EditContext!.Field(nameof(CreateVideoInfoModel.Name));
            var descriptionField = frmCreateVideoInfo!.EditContext!.Field(nameof(CreateVideoInfoModel.Name));
            var externalVideoSourceUrl = frmCreateVideoInfo!.EditContext!.Field(nameof(CreateVideoInfoModel.ExternalVideoSourceUrl));
            if (!frmCreateVideoInfo.EditContext.IsValid(nameField) ||
            !frmCreateVideoInfo.EditContext.IsValid(descriptionField) ||
            !frmCreateVideoInfo.EditContext.IsValid(externalVideoSourceUrl))
            {
                this.toastService.ShowError("Please make sure to fill all the values and try again");
                return;
            }
            var fileBytes = await new HttpClient().GetByteArrayAsync(this.createVideoInfoModel.ExternalVideoSourceUrl);
            MemoryStream stream = new MemoryStream(fileBytes);
            Video video = new();
            video.Snippet = new VideoSnippet();
            video.Snippet.Title = this.createVideoInfoModel.Name;
            video.Snippet.Description = this.createVideoInfoModel.Description;
            video.Status = new VideoStatus();
            video.Status.PrivacyStatus = "unlisted";
            await this.youTubeClientService.UploadVideoAsync(video, stream,
            progressChanged: async (uploadProgress) =>
            {
                this.bytesSent = uploadProgress.BytesSent;
                await InvokeAsync(() => StateHasChanged());
            },
            responseReceived: (video) =>
            {
                this.createVideoInfoModel.YouTubeVideoId = video.Id;
                this.toastService.ShowSuccess($"Video uploaded to YouTube. Id: {video.Id}");
            });
        }
        catch (Exception ex)
        {
            this.toastService.ShowError(ex.Message);
        }
        this.IsBusy = false;
        StateHasChanged();
    }

    private async Task OnValidSubmitAsync()
    {
        try
        {
            this.IsBusy = true;
            StateHasChanged();
            this.createVideoInfoModel.VideoIndexStatusId = (short)VideoIndexStatus.Processing;
            await this.videoInfoService.CreateVideoInfoAsync(this.createVideoInfoModel,
            this.cancellationTokenSource.Token);
            this.toastService.ShowSuccess("Your video has been saved. You'll be notified when indexing is ready. It will take a while for your video to become visible.");
            this.navigationManager.NavigateTo("/");
        }
        catch (Exception ex)
        {
            logger.LogError(exception: ex, message: "Error: {errorMessage}", ex.Message);
            this.toastService.ShowError(ex.Message);
        }
        this.IsBusy = false;
        StateHasChanged();
    }

    private void OpenSearchYouTubeVideoDialog()
    {
        this.searchYoutubeVideosDialog!.Show();
    }

    private void CloseSearchYouTubeVideoDialog()
    {
        this.searchYoutubeVideosDialog!.Hide();
    }

    private void OnYouTubeVideoSelected(string youTubeVideoId)
    {
        this.createVideoInfoModel!.YouTubeVideoId = youTubeVideoId;
        CloseSearchYouTubeVideoDialog();
    }

    void IDisposable.Dispose()
    {
        this.cancellationTokenSource.Dispose();
    }
}
