@page "/Creator/VideoDigitalMarketing/{VideoInfoId:long}"
@using FairPlayCombined.Common
@using FairPlayCombined.Interfaces
@using FairPlayCombined.Models.FairPlayTube.VideoInfo
@using FairPlayCombined.Models.Pagination
@using FairPlayCombined.Services.Common
@using FairPlayCombined.Services.FairPlayTube
@using FairPlayTube.Components.Spinners

@rendermode NoPreRenderServerMode
@inject IJSRuntime jsRuntime
@inject VideoInfoService videoInfoService
@inject IUserProviderService userProviderService
@inject OpenAIService openAIService
@inject VideoCaptionsService videoCaptionsService
@inject VideoDigitalMarketingPlanService videoDigitalMarketingPlanService

<PageTitle>
    Video Digital Marketing Strategy
</PageTitle>

<FluentLabel Typo="Typography.H3">
    Video Digital Marketing Strategy
</FluentLabel>

<LoadingIndicator ShowSpinners="this.IsBusy"></LoadingIndicator>

<div>
    <FluentButton Type="ButtonType.Button" OnClick="OnRecreatePlanButtonclickedAsync">
        Re-Create Plan
    </FluentButton>
</div>
<div>
    @if (!String.IsNullOrWhiteSpace(this.DigitalMarketingIdeas))
    {
        <p>
            @((MarkupString)this.DigitalMarketingIdeas)
        </p>
    }
</div>

@code
{
    [Parameter]
    public long? VideoInfoId { get; set; }
    private static IComponentRenderMode NoPreRenderServerMode = new InteractiveServerRenderMode(prerender: false);
    private bool IsBusy { get; set; }
    private CancellationTokenSource cancellationTokenSource = new();
    private string? DigitalMarketingIdeas { get; set; }
    private string? RevisedPrompt { get; set; }

    protected override async Task OnInitializedAsync()
    {
        this.IsBusy = true;
        StateHasChanged();
        var videoInfoModel = await this.videoInfoService.GetVideoInfoByIdAsync(id: this.VideoInfoId!.Value,
        cancellationToken: this.cancellationTokenSource.Token);
        this.DigitalMarketingIdeas = await this.videoDigitalMarketingPlanService
        .GetVideoDigitalMarketingPlanAsync(
            videoInfoId: videoInfoModel.VideoInfoId,
            socialNetworkName: "LinkedIn",
            cancellationToken: this.cancellationTokenSource.Token);
        if (String.IsNullOrWhiteSpace(this.DigitalMarketingIdeas))
        {
            await this.GenerateDigitalMarketingIdeasAsync(videoInfoModel);
        }
        this.IsBusy = false;
        StateHasChanged();
    }

    private async Task OnRecreatePlanButtonclickedAsync()
    {
        this.IsBusy = true;
        StateHasChanged();
        var videoInfoModel = await this.videoInfoService.GetVideoInfoByIdAsync(id: this.VideoInfoId!.Value,
        cancellationToken: this.cancellationTokenSource.Token);
        await this.GenerateDigitalMarketingIdeasAsync(videoInfoModel);
        this.IsBusy = false;
        StateHasChanged();
    }

    private async Task GenerateDigitalMarketingIdeasAsync(VideoInfoModel videoInfoModel)
    {
        var englishCaptions = await this.videoCaptionsService
            .GetVideoCaptionsByVideoInfoIdAndLanguageAsync(videoInfoId: videoInfoModel.VideoInfoId,
            language: "en-US", cancellationToken: this.cancellationTokenSource.Token);
        var systemMessage = "You will take the role of an expert in Digital Marketing. I will give you the information for one of my videos. Your job is to give me a detailed strategy on how to use the content to grow my audience. You will give me a 1 month Digital Marketing plan to repurpose the video content into LinkedIn. I post 3 times per day. Your response must be in HTML 5";
        var userMessage = $"Video Title: {videoInfoModel.Description}. Video Captions: {englishCaptions}";
        var result = await this.openAIService.GenerateChatCompletionAsync(systemMessage, userMessage, this.cancellationTokenSource.Token);
        if (result != null)
        {
            this.DigitalMarketingIdeas = result!.choices![0]!.message!.content!;
            await this.videoDigitalMarketingPlanService.SaveVideoDigitalMarketingPlanAsync(
                videoInfoId: videoInfoModel.VideoInfoId,
                htmlDigitalMarketingPlan: this.DigitalMarketingIdeas,
                socialNetworkName: "LinkedIn",
                replaceExistent: true,
                cancellationToken: this.cancellationTokenSource.Token);
        }
    }
}
