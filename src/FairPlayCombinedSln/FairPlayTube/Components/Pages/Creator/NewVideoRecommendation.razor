@page "/Creator/NewVideoRecommendation"
@implements IDisposable

@using FairPlayCombined.Common
@using FairPlayCombined.Interfaces
@using FairPlayCombined.Models.FairPlayTube.VideoInfo
@using FairPlayCombined.Models.Pagination
@using FairPlayCombined.Services.Common
@using FairPlayCombined.Services.FairPlayTube
@using FairPlayTube.Components.Spinners

@rendermode @(new InteractiveServerRenderMode(prerender:false))
@inject IJSRuntime jsRuntime
@inject VideoInfoService videoInfoService
@inject IUserProviderService userProviderService
@inject OpenAIService openAIService
@inject VideoCaptionsService videoCaptionsService
@inject VideoInfoService videoInfoService

<PageTitle>
    New Video Recommendation
</PageTitle>

<FluentLabel Typo="Typography.H3">
    New Video Recommendation
</FluentLabel>

<LoadingIndicator ShowSpinners="this.IsBusy"></LoadingIndicator>

<div>
    <FluentButton Type="ButtonType.Button" Appearance="Appearance.Accent" Loading="this.IsBusy"
                  OnClick="OnRecreateNewVideoRecommendationButtonclickedAsync">
        Re-Create Recommendation
    </FluentButton>
</div>
<div>
    @if (!String.IsNullOrWhiteSpace(this.NewVideoRecommendationIdea))
    {
        <p>
            @((MarkupString)this.NewVideoRecommendationIdea)
        </p>
    }
</div>

@code
{
    private bool IsBusy { get; set; }
    private readonly CancellationTokenSource cancellationTokenSource = new();
    private string? NewVideoRecommendationIdea { get; set; }
    private string? RevisedPrompt { get; set; }

    protected override async Task OnInitializedAsync()
    {
        this.IsBusy = true;
        StateHasChanged();
        await this.GenerateNewVideoRecommendationIdeaAsync();
        this.IsBusy = false;
        StateHasChanged();
    }

    private async Task OnRecreateNewVideoRecommendationButtonclickedAsync()
    {
        this.IsBusy = true;
        StateHasChanged();
        await this.GenerateNewVideoRecommendationIdeaAsync();
        this.IsBusy = false;
        StateHasChanged();
    }

    private async Task GenerateNewVideoRecommendationIdeaAsync()
    {
        var systemMessage = "You will take the role of an expert in Digital Marketing and YouTube SEO. I will give you the titles for 5 of my videos. Your job is to give me the title, description, and script for a new video mixing the content and ideas of my previous videos. The new video must have content from all of my previous videos. Your response must be in HTML 5.";
        var videos = await this.videoInfoService.GetPaginatedCompletedVideoInfobyUserIdAsync(new PaginationRequest()
            {
                PageSize = 5,
                SortingItems = new[]
                            {
                    new SortingItem()
                    {
                        PropertyName=nameof(VideoInfoModel.VideoInfoId),
                        SortType = FairPlayCombined.Common.GeneratorsAttributes.SortType.Descending
                    }
                },
                StartIndex = 0
            },
            this.userProviderService.GetCurrentUserId()!,
            this.cancellationTokenSource.Token);

        var titles = videos!.Items!.Select(p => $"* Title: {p.Name}. Keywords: {String.Join(",", p.VideoKeywords!)}. Topics: {String.Join(",",p.VideoTopics!)}. Video Captions: {String.Join(",",p.EnglishCaptions)}\r\n");
        var userMessage = $"Video Titles: {String.Join(".", titles)}.";
        var result = await this.openAIService.GenerateChatCompletionAsync(systemMessage, userMessage, this.cancellationTokenSource.Token);
        if (result != null)
        {
            this.NewVideoRecommendationIdea = result!.choices![0]!.message!.content!;
        }
    }

    void IDisposable.Dispose()
    {
        this.cancellationTokenSource.Dispose();
    }
}
