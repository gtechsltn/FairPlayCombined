@page "/Creator/VideoLinkedInArticle/{VideoInfoId:long}"
@implements IDisposable

@using FairPlayCombined.Common
@using FairPlayCombined.Interfaces
@using FairPlayCombined.Models.FairPlayTube.VideoInfo
@using FairPlayCombined.Models.Pagination
@using FairPlayCombined.Services.Common
@using FairPlayCombined.Services.FairPlayTube
@using FairPlayTube.Components.Spinners

@rendermode NoPreRenderServerMode
@inject IJSRuntime jsRuntime
@inject VideoInfoService videoInfoService
@inject IUserProviderService userProviderService
@inject OpenAIService openAIService
@inject VideoCaptionsService videoCaptionsService
@inject VideoDigitalMarketingPlanService videoDigitalMarketingPlanService

<PageTitle>
    Video Article
</PageTitle>

<FluentLabel Typo="Typography.H3">
    Video Article
</FluentLabel>

<LoadingIndicator ShowSpinners="this.IsBusy"></LoadingIndicator>

<FluentButton Type="ButtonType.Button" OnClick="CreateLinkedInArticleAsync">
    Re-Create Article
</FluentButton>

<div>
    @if (!String.IsNullOrWhiteSpace(this.LinkedInArticleDraftText))
    {
        <p>
            @((MarkupString)this.LinkedInArticleDraftText)
        </p>
    }
</div>

@code
{
    [Parameter]
    public long? VideoInfoId { get; set; }
    private static IComponentRenderMode NoPreRenderServerMode = new InteractiveServerRenderMode(prerender: false);
    private bool IsBusy { get; set; }
    private CancellationTokenSource cancellationTokenSource = new();
    private string? LinkedInArticleDraftText { get; set; }
    private string? RevisedPrompt { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await this.CreateLinkedInArticleAsync();
    }

    private async Task CreateLinkedInArticleAsync()
    {
        this.IsBusy = true;
        StateHasChanged();
        var videoInfoModel = await this.videoInfoService.GetVideoInfoByIdAsync(id: this.VideoInfoId!.Value,
        cancellationToken: this.cancellationTokenSource.Token);
        var englishCaptions = await this.videoCaptionsService
        .GetVideoCaptionsByVideoInfoIdAndLanguageAsync(videoInfoId: videoInfoModel.VideoInfoId,
        language: "en-US", cancellationToken: this.cancellationTokenSource.Token);
        var systemMessage = "You will take the role of an expert in Digital Marketing, monetization and passive income. I will give you the information for one of my videos. Your job is to give me a draft article for my Linkedin newsletter, do not reduce the response if is lengthy, article must have at least 1000 words. Your response must be in HTML 5.";
        var userMessage = $"Video Title: {videoInfoModel.Description}. Video Captions: {englishCaptions}";
        var result = await this.openAIService.GenerateChatCompletionAsync(systemMessage, userMessage, this.cancellationTokenSource.Token);
        this.LinkedInArticleDraftText = result!.choices![0]!.message!.content!;
        this.IsBusy = false;
        StateHasChanged();
    }

    void IDisposable.Dispose()
    {
        this.cancellationTokenSource.Dispose();
    }
}
