@page "/MonthlyBudgetInfo/CreateMonthlyBudgetInfo"
@using Blazored.Toast.Services
@using FairPlayBudget.Components.Spinners
@using FairPlayCombined.Interfaces
@using FairPlayCombined.Models.FairPlayBudget.MonthlyBudgetInfo
@using FairPlayCombined.Services.FairPlayBudget
@using Microsoft.AspNetCore.Authorization

@attribute [Authorize]
@rendermode RenderMode.InteractiveServer

@inject MonthlyBudgetInfoService monthlyBudgetInfoService
@inject IUserProviderService userProviderService
@inject IToastService toastService

<h3>CreateMonthlyBudgetInfo</h3>

<LoadingIndicator ShowSpinners="this.IsBusy"></LoadingIndicator>

<EditForm FormName="frmCreateMonthlyBudgetInfo" Model="this.createMonthlyBudgetInfoModel"
          OnValidSubmit="OnValidSubmitAsync">
    <div class="mb-3">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>
    </div>
    <div class="mb-3">
        <label class="form-label">Description</label>
        <InputText class="form-control" @bind-Value="this.createMonthlyBudgetInfoModel.Description"></InputText>
    </div>
    <div class="mb-3">
        <button type="submit" class="btn btn-primary">Save</button>
    </div>

</EditForm>

@code {
    [SupplyParameterFromForm]
    private CreateMonthlyBudgetInfoModel createMonthlyBudgetInfoModel { get; set; } = new();
    private CancellationTokenSource cancellationTokenSource = new();
    private bool IsBusy { get; set; }
    protected override void OnInitialized()
    {
        this.createMonthlyBudgetInfoModel.OwnerId = userProviderService.GetCurrentUserId();
    }

    private async Task OnValidSubmitAsync()
    {
        try
        {
            this.IsBusy = true;
            await this.monthlyBudgetInfoService.CreateMonthlyBudgetInfoAsync(
                this.createMonthlyBudgetInfoModel, this.cancellationTokenSource.Token);
            this.toastService.ShowSuccess("Monthly Budget Info has been created");
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message);
        }
        finally
        {
            this.IsBusy = false;
        }
    }
}
