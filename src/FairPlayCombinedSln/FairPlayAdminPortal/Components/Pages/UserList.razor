@page "/UserList"
@using FairPlayAdminPortal.Components.Spinners
@using FairPlayAdminPortal.Data
@using FairPlayCombined.Common
@using FairPlayCombined.Interfaces
@using FairPlayCombined.Models
@using FairPlayCombined.Models.Pagination
@using Microsoft.AspNetCore.Identity
@using FairPlayCombined.Common.GeneratorsAttributes
@inject IUserService userService
@inject IServiceScopeFactory serviceScopeFactory
@rendermode NoPreRender
@attribute [StreamRendering(enabled: true)]

<LoadingIndicator ShowSpinners="this.IsBusy"></LoadingIndicator>

<FluentLabel Typo="Typography.H3">
    UserList
</FluentLabel>

@if (this.RetrievalDuration != null)
{
    <p>
        <FluentLabel Typo="Typography.Body">
            Retrieval Duration: @this.RetrievalDuration
        </FluentLabel>
    </p>
}
<FluentDataGrid ItemsProvider="this.ItemsProvider" Pagination="@pagination">
    <PropertyColumn Property="@(p=>p.Id)" Sortable="true"></PropertyColumn>
    <PropertyColumn Property="@(p=>p.UserName)" Sortable="true"></PropertyColumn>
    <PropertyColumn Property="@(p=>p.LockoutEnabled)" Sortable="true"></PropertyColumn>
    <TemplateColumn>
        @if (context.LockoutEnabled)
        {
            <FluentButton Type="ButtonType.Button" Loading="this.IsBusy"
                          IconStart="@(new Icons.Regular.Size16.Add())"
                          BackgroundColor="var(--success)"
            OnClick="@( async ()=> await OnDisableLockoutClicked(context.Id))">
                Disable Lockout
            </FluentButton>
        }
        else
        {
            <FluentButton Type="ButtonType.Button" Loading="this.IsBusy"
                          IconStart="@(new Icons.Regular.Size16.Delete())"
                          BackgroundColor="var(--error)"
                    OnClick="@( async ()=> await OnEnableLockoutClicked(context.Id))">
                Enable Lockout
            </FluentButton>
        }
    </TemplateColumn>
</FluentDataGrid>

<FluentPaginator State="@pagination">
</FluentPaginator>

@code {
    private static IComponentRenderMode NoPreRender = new InteractiveServerRenderMode(prerender: false);
    private CancellationTokenSource cancellationTokenSource = new();
    private GridItemsProvider<UserModel>? ItemsProvider;
    private PaginationState pagination = new()
        {
            ItemsPerPage = Constants.Pagination.PageSize
        };
    private TimeSpan? RetrievalDuration;
    private bool IsBusy { get; set; }

    protected override void OnInitialized()
    {
        ItemsProvider ??= async req =>
            {
                this.IsBusy = true;
                StateHasChanged();
                PaginationRequest paginationRequest = new PaginationRequest()
                    {
                        StartIndex = req.StartIndex,
                        SortingItems = req.GetSortByProperties()
                                        .Select(p => new SortingItem()
                                        {
                                            PropertyName = p.PropertyName,
                                            SortType = (p.Direction == SortDirection.Ascending) ?
                                            SortType.Ascending
                                            :
                                            SortType.Descending
                                        }).ToArray()
                    };
                System.Diagnostics.Stopwatch stopwatch = System.Diagnostics.Stopwatch.StartNew();
                var paginationResult = await this.userService!.GetPaginatedUserListAsync(
                    paginationRequest, this.cancellationTokenSource.Token);
                stopwatch.Stop();
                this.RetrievalDuration = stopwatch.Elapsed;
                var result = GridItemsProviderResult.From(
                items: paginationResult.Items!,
                totalItemCount: paginationResult!.TotalItems);
                this.IsBusy = false;
                StateHasChanged();
                return result;
            };
    }

    private async Task OnDisableLockoutClicked(string? userId)
    {
        this.IsBusy = true;
        StateHasChanged();
        using var scope = serviceScopeFactory.CreateScope();
        var userManager = scope.ServiceProvider
        .GetRequiredService<UserManager<ApplicationUser>>();
        var user = await userManager.FindByIdAsync(userId!);
        if (user != null)
        {
            await userManager.SetLockoutEnabledAsync(user, false);
        }
        await pagination.SetCurrentPageIndexAsync(0);
        this.IsBusy = false;
        StateHasChanged();
    }

    private async Task OnEnableLockoutClicked(string? userId)
    {
        this.IsBusy = true;
        StateHasChanged();
        using var scope = serviceScopeFactory.CreateScope();
        var userManager = scope.ServiceProvider
        .GetRequiredService<UserManager<ApplicationUser>>();
        var user = await userManager.FindByIdAsync(userId!);
        if (user != null)
        {
            await userManager.SetLockoutEnabledAsync(user, true);
        }
        await pagination.SetCurrentPageIndexAsync(0);
        this.IsBusy = false;
        StateHasChanged();
    }

}
