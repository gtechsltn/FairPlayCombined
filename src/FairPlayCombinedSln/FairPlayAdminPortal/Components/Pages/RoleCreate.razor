@page "/RoleCreate"
@using FairPlayCombined.Models.Role
@using Microsoft.AspNetCore.Identity
@inject RoleManager<IdentityRole> roleManager
@inject NavigationManager navigationManager
@inject IToastService toastService
@rendermode RenderMode.InteractiveServer

<FluentLabel Typo="Typography.H3">
    RoleCreateAsync
</FluentLabel>

<FluentEditForm FormName="frmCreateRole" Model="this.createRoleModel" OnValidSubmit="OnValidSubmitAsync">
    <div>
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <FluentValidationSummary></FluentValidationSummary>
    </div>
    <div>
        <FluentLabel Typo="Typography.Body">Name</FluentLabel>
        <FluentTextField @bind-Value="createRoleModel.Name"></FluentTextField>
    </div>
    <div>
        <FluentButton Type="ButtonType.Submit"
                      IconStart="@(new Icons.Regular.Size16.Save())"
                      BackgroundColor="var(--success)"
        Loading="this.IsBusy">
            Save
        </FluentButton>
    </div>
</FluentEditForm>

@code {
    [SupplyParameterFromForm]
    private CreateRoleModel createRoleModel { get; set; } = new();
    private CancellationTokenSource cancellationTokenSource = new();
    private bool IsBusy { get; set; }

    private async void OnValidSubmitAsync()
    {
        this.IsBusy = true;
        IdentityRole role = new()
            {
                Name = createRoleModel.Name,
                NormalizedName = createRoleModel.Name!.Normalize()
            };
        var result = await this.roleManager.CreateAsync(role);
        if (result.Succeeded)
        {
            this.toastService!.ShowSuccess($"Role '{role.Name}' been created");
            this.navigationManager.NavigateTo("RoleList");
        }
        else
        {
            var message = String.Join(",", result.Errors.Select(p => p.Description));
            this.toastService!.ShowError(message);
        }
        this.IsBusy = false;
    }
}
