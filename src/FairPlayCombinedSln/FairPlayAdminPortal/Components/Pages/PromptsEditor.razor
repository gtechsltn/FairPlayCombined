@page "/PromptsEditor"
@implements IAsyncDisposable

@using FairPlayCombined.Common
@using FairPlayCombined.Models.Common.ConfigurationSecret
@using FairPlayCombined.Models.Common.Promp
@using FairPlayCombined.Services.Common

@inject IToastService toastService
@inject PromptGeneratorService promptGeneratorService

@rendermode @(new InteractiveServerRenderMode(prerender:false))

<h3>Prompts Editor</h3>

<FluentEditForm FormName="frmPromptsEditor" Model="this.allPrompts" OnValidSubmit="OnValidSubmitAsync">
    <div>
        <ObjectGraphDataAnnotationsValidator></ObjectGraphDataAnnotationsValidator>
        <FluentValidationSummary></FluentValidationSummary>
    </div>
    @if (this.CreateYouTubeThumbnailPrompt != null)
    {
        <div>
            <FluentLabel Typo="Typography.Body" Weight="FontWeight.Bold">
                @CreateYouTubeThumbnailPrompt.PromptName
            </FluentLabel>
            <FluentTextArea Rows="10" style="width:100%;" @bind-Value="this.CreateYouTubeThumbnailPrompt.BaseText"></FluentTextArea>
            <FluentValidationMessage For="@( () => CreateYouTubeThumbnailPrompt.BaseText)"></FluentValidationMessage>
        </div>
    }
    @if (this.CreateVideoPassiveIncomeStrategyPrompt != null)
    {
        <div>
            <FluentLabel Typo="Typography.Body" Weight="FontWeight.Bold">
                @CreateVideoPassiveIncomeStrategyPrompt.PromptName
            </FluentLabel>
            <FluentTextArea Rows="10" style="width:100%;" @bind-Value="this.CreateVideoPassiveIncomeStrategyPrompt.BaseText"></FluentTextArea>
            <FluentValidationMessage For="@( () => CreateVideoPassiveIncomeStrategyPrompt.BaseText)"></FluentValidationMessage>
        </div>
    }
    @if (this.CreateVideoLinkedInArticlePrompt != null)
    {
        <div>
            <FluentLabel Typo="Typography.Body" Weight="FontWeight.Bold">
                @CreateVideoLinkedInArticlePrompt.PromptName
            </FluentLabel>
            <FluentTextArea Rows="10" style="width:100%;" @bind-Value="this.CreateVideoLinkedInArticlePrompt.BaseText"></FluentTextArea>
            <FluentValidationMessage For="@( () => CreateVideoLinkedInArticlePrompt.BaseText)"></FluentValidationMessage>
        </div>
    }
    @if (this.CreateVideoDailyPostsPrompt != null)
    {
        <div>
            <FluentLabel Typo="Typography.Body" Weight="FontWeight.Bold">
                @CreateVideoDailyPostsPrompt.PromptName
            </FluentLabel>
            <FluentTextArea Rows="10" style="width:100%;" @bind-Value="this.CreateVideoDailyPostsPrompt.BaseText"></FluentTextArea>
            <FluentValidationMessage For="@( () => CreateVideoDailyPostsPrompt.BaseText)"></FluentValidationMessage>
        </div>
    }
    @if (this.CreateDigitalMarketingIdeasPrompt != null)
    {
        <div>
            <FluentLabel Typo="Typography.Body" Weight="FontWeight.Bold">
                @CreateDigitalMarketingIdeasPrompt.PromptName
            </FluentLabel>
            <FluentTextArea Rows="10" style="width:100%;" @bind-Value="this.CreateDigitalMarketingIdeasPrompt.BaseText"></FluentTextArea>
            <FluentValidationMessage For="@( () => CreateDigitalMarketingIdeasPrompt.BaseText)"></FluentValidationMessage>
        </div>
    }
    @if (this.CreateVideoInfographicPrompt != null)
    {
        <div>
            <FluentLabel Typo="Typography.Body" Weight="FontWeight.Bold">
                @CreateVideoInfographicPrompt.PromptName
            </FluentLabel>
            <FluentTextArea Rows="10" style="width:100%;" @bind-Value="this.CreateVideoInfographicPrompt.BaseText"></FluentTextArea>
            <FluentValidationMessage For="@( () => CreateVideoInfographicPrompt.BaseText)"></FluentValidationMessage>
        </div>
    }
    @if (this.CreateNewVideoRecommendationIdeaPrompt != null)
    {
        <div>
            <FluentLabel Typo="Typography.Body" Weight="FontWeight.Bold">
                @CreateNewVideoRecommendationIdeaPrompt.PromptName
            </FluentLabel>
            <FluentTextArea Rows="10" style="width:100%;" @bind-Value="this.CreateNewVideoRecommendationIdeaPrompt.BaseText"></FluentTextArea>
            <FluentValidationMessage For="@( () => CreateNewVideoRecommendationIdeaPrompt.BaseText)"></FluentValidationMessage>
        </div>
    }
    @if (this.AnalyzeDatingProfilePhotoPrompt != null)
    {
        <div>
            <FluentLabel Typo="Typography.Body" Weight="FontWeight.Bold">
                @AnalyzeDatingProfilePhotoPrompt.PromptName
            </FluentLabel>
            <FluentTextArea Rows="10" style="width:100%;" @bind-Value="this.AnalyzeDatingProfilePhotoPrompt.BaseText"></FluentTextArea>
            <FluentValidationMessage For="@( () => AnalyzeDatingProfilePhotoPrompt.BaseText)"></FluentValidationMessage>
        </div>
    }
    @if (this.CreateDatingProfileAboutMePrompt != null)
    {
        <div>
            <FluentLabel Typo="Typography.Body" Weight="FontWeight.Bold">
                @CreateDatingProfileAboutMePrompt.PromptName
            </FluentLabel>
            <FluentTextArea Rows="10" style="width:100%;" @bind-Value="this.CreateDatingProfileAboutMePrompt.BaseText"></FluentTextArea>
            <FluentValidationMessage For="@( () => CreateDatingProfileAboutMePrompt.BaseText)"></FluentValidationMessage>
        </div>
    }
    <div>
        <FluentButton Type="ButtonType.Submit"
                      IconStart="@(new Icons.Regular.Size16.ArrowClockwise())"
                      Appearance="Appearance.Accent"
                      Loading="@this.IsBusy">
            Save
        </FluentButton>
    </div>
</FluentEditForm>
@code
{
    [SupplyParameterFromForm]
    private List<PromptModel> allPrompts { get; set; } = new();

    private PromptModel? CreateYouTubeThumbnailPrompt =>
    allPrompts.SingleOrDefault(p => p.PromptName == Constants.PromptsNames.CreateYouTubeThumbnail);

    private PromptModel? CreateVideoPassiveIncomeStrategyPrompt =>
    allPrompts.SingleOrDefault(p => p.PromptName == Constants.PromptsNames.CreateVideoPassiveIncomeStrategy);

    private PromptModel? CreateVideoLinkedInArticlePrompt =>
    allPrompts.SingleOrDefault(p => p.PromptName == Constants.PromptsNames.CreateVideoLinkedInArticle);

    private PromptModel? CreateVideoDailyPostsPrompt =>
    allPrompts.SingleOrDefault(p => p.PromptName == Constants.PromptsNames.CreateVideoDailyPosts);

    private PromptModel? CreateDigitalMarketingIdeasPrompt =>
    allPrompts.SingleOrDefault(p => p.PromptName == Constants.PromptsNames.CreateDigitalMarketingIdeas);

    private PromptModel? CreateVideoInfographicPrompt =>
    allPrompts.SingleOrDefault(p => p.PromptName == Constants.PromptsNames.CreateVideoInfographic);

    private PromptModel? CreateNewVideoRecommendationIdeaPrompt =>
    allPrompts.SingleOrDefault(p => p.PromptName == Constants.PromptsNames.CreateNewVideoRecommendationIdea);

    private PromptModel? AnalyzeDatingProfilePhotoPrompt =>
    allPrompts.SingleOrDefault(p => p.PromptName == Constants.PromptsNames.AnalyzeDatingProfilePhoto);

    private PromptModel? CreateDatingProfileAboutMePrompt =>
    allPrompts.SingleOrDefault(p => p.PromptName == Constants.PromptsNames.CreateDatingProfileAboutMe);

    private bool IsBusy { get; set; }
    private readonly CancellationTokenSource cancellationTokenSource = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            this.IsBusy = true;
            StateHasChanged();
            this.allPrompts = (await this.promptGeneratorService.GetAllPromptsAsync(this.cancellationTokenSource.Token)).ToList();
            if (this.CreateYouTubeThumbnailPrompt is null)
            {
                this.allPrompts.Add(new PromptModel()
                    {
                        PromptName = Constants.PromptsNames.CreateYouTubeThumbnail
                    });
            }
            if (this.CreateVideoPassiveIncomeStrategyPrompt is null)
            {
                this.allPrompts.Add(new PromptModel()
                    {
                        PromptName = Constants.PromptsNames.CreateVideoPassiveIncomeStrategy
                    });
            }
            if (this.CreateVideoLinkedInArticlePrompt is null)
            {
                this.allPrompts.Add(new PromptModel()
                    {
                        PromptName = Constants.PromptsNames.CreateVideoLinkedInArticle
                    });
            }
            if (this.CreateVideoDailyPostsPrompt is null)
            {
                this.allPrompts.Add(new PromptModel()
                    {
                        PromptName = Constants.PromptsNames.CreateVideoDailyPosts
                    });
            }
            if (this.CreateDigitalMarketingIdeasPrompt is null)
            {
                this.allPrompts.Add(new PromptModel()
                    {
                        PromptName = Constants.PromptsNames.CreateDigitalMarketingIdeas
                    });
            }
            if (this.CreateVideoInfographicPrompt is null)
            {
                this.allPrompts.Add(new PromptModel()
                    {
                        PromptName = Constants.PromptsNames.CreateVideoInfographic
                    });
            }
            if (this.CreateNewVideoRecommendationIdeaPrompt is null)
            {
                this.allPrompts.Add(new PromptModel()
                    {
                        PromptName = Constants.PromptsNames.CreateNewVideoRecommendationIdea
                    });
            }
            if (this.AnalyzeDatingProfilePhotoPrompt is null)
            {
                this.allPrompts.Add(new PromptModel()
                    {
                        PromptName = Constants.PromptsNames.AnalyzeDatingProfilePhoto
                    });
            }
            if (this.CreateDatingProfileAboutMePrompt is null)
            {
                this.allPrompts.Add(new PromptModel()
                    {
                        PromptName = Constants.PromptsNames.CreateDatingProfileAboutMe
                    });
            }
        }
        catch (Exception ex)
        {
            this.toastService.ShowError(ex.Message);
        }
        finally
        {
            this.IsBusy = false;
            StateHasChanged();
        }
    }

    private async Task OnValidSubmitAsync()
    {
        try
        {
            this.IsBusy = true;
            StateHasChanged();
            await this.promptGeneratorService.UpdateAllPromptsAsync(this.allPrompts,
                this.cancellationTokenSource.Token);
            this.toastService.ShowSuccess("Prompts have been saved");
        }
        catch (Exception ex)
        {
            this.toastService!.ShowError(ex.Message);
        }
        finally
        {
            this.IsBusy = false;
            StateHasChanged();
        }
    }

    public ValueTask DisposeAsync()
    {
        this.cancellationTokenSource.Dispose();
        return ValueTask.CompletedTask;
    }
}