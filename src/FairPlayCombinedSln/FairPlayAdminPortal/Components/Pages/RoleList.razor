@page "/RoleList"
@using FairPlayCombined.Common
@using FairPlayCombined.Interfaces
@using FairPlayCombined.Models
@using FairPlayCombined.Models.Role
@using Microsoft.AspNetCore.Components.QuickGrid
@using FairPlayCombined.Models.Pagination
@inject IRoleService roleService
@rendermode RenderMode.InteractiveServer
@attribute [StreamRendering(enabled: true)]
<h3>RoleList</h3>

<QuickGrid ItemsProvider="this.ItemsProvider" Pagination="@pagination">
    <PropertyColumn Property="@(p=>p.Id)" Sortable="true"></PropertyColumn>
    <PropertyColumn Property="@(p=>p.Name)" Sortable="true"></PropertyColumn>
</QuickGrid>

<Paginator State="@pagination">
</Paginator>

@code {
    private CancellationTokenSource cancellationTokenSource = new();
    private GridItemsProvider<RoleModel>? ItemsProvider;
    private PaginationState pagination = new PaginationState()
        {
            ItemsPerPage = Constants.Pagination.PageSize
        };
    protected override void OnInitialized()
    {
        ItemsProvider ??= async req =>
            {
                // this.IsBusy = true;
                // StateHasChanged();
                PaginationRequest paginationRequest = new PaginationRequest()
                    {
                        StartIndex = req.StartIndex,
                        SortingItems = req.GetSortByProperties()
                                                .Select(p => new SortingItem()
                                                {
                                                    PropertyName = p.PropertyName,
                                                    SortType = (p.Direction == SortDirection.Ascending) ?
                                                    SortType.Ascending
                                                    :
                                                    SortType.Descending
                                                }).ToArray()
                    };
                var paginationResult = await this.roleService!.GetPaginatedRoleListAsync(
                    paginationRequest, this.cancellationTokenSource.Token);
                paginationResult.Items = req.ApplySorting(paginationResult!.Items!.AsQueryable()).ToArray();
                var result = GridItemsProviderResult.From(
                items: paginationResult.Items!,
                totalItemCount: paginationResult!.TotalItems);
                // this.IsBusy = false;
                // StateHasChanged();
                return result;
            };
    }

}
