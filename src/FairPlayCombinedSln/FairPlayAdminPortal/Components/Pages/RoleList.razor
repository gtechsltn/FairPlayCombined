@page "/RoleList"
@using FairPlayCombined.Common
@using FairPlayCombined.Interfaces
@using FairPlayCombined.Models
@using FairPlayCombined.Models.Role
@using Microsoft.AspNetCore.Components.QuickGrid
@using FairPlayCombined.Models.Pagination
@using Microsoft.AspNetCore.Identity
@inject IRoleService roleService
@inject IServiceScopeFactory serviceScopeFactory
@inject IToastService toastService
@rendermode RenderMode.InteractiveServer
@attribute [StreamRendering(enabled: true)]
<h3>RoleList</h3>

<QuickGrid ItemsProvider="this.ItemsProvider" Pagination="@pagination">
    <PropertyColumn Property="@(p=>p.Id)" Sortable="true"></PropertyColumn>
    <PropertyColumn Property="@(p=>p.Name)" Sortable="true"></PropertyColumn>
    <TemplateColumn>
        <button type="button" class="btn btn-danger" 
        @onclick="@(async ()=> await OnDeleteRoleAsync(context.Id))">Delete</button>
    </TemplateColumn>
</QuickGrid>

<Paginator State="@pagination">
</Paginator>

@code {
    private CancellationTokenSource cancellationTokenSource = new();
    private GridItemsProvider<RoleModel>? ItemsProvider;
    private PaginationState pagination = new PaginationState()
        {
            ItemsPerPage = Constants.Pagination.PageSize
        };
    protected override void OnInitialized()
    {
        ItemsProvider ??= async req =>
            {
                // this.IsBusy = true;
                // StateHasChanged();
                PaginationRequest paginationRequest = new PaginationRequest()
                    {
                        StartIndex = req.StartIndex,
                        SortingItems = req.GetSortByProperties()
                                                .Select(p => new SortingItem()
                                                {
                                                    PropertyName = p.PropertyName,
                                                    SortType = (p.Direction == SortDirection.Ascending) ?
                                                    SortType.Ascending
                                                    :
                                                    SortType.Descending
                                                }).ToArray()
                    };
                var paginationResult = await this.roleService!.GetPaginatedRoleListAsync(
                    paginationRequest, this.cancellationTokenSource.Token);
                paginationResult.Items = req.ApplySorting(paginationResult!.Items!.AsQueryable()).ToArray();
                var result = GridItemsProviderResult.From(
                items: paginationResult.Items!,
                totalItemCount: paginationResult!.TotalItems);
                // this.IsBusy = false;
                // StateHasChanged();
                return result;
            };
    }

    private async Task OnDeleteRoleAsync(string? roleId)
    {
        using var scope = serviceScopeFactory.CreateScope();
        var roleManager = scope.ServiceProvider.GetRequiredService<RoleManager<IdentityRole>>();
        var role = await roleManager.FindByIdAsync(roleId!);
        if (role != null)
        {
            var result = await roleManager.DeleteAsync(role);
            if (result.Succeeded)
            {
                this.toastService.ShowSuccess($"Role '{role.Name}' deleted");
                await this.pagination.SetCurrentPageIndexAsync(0);
            }
            else
            {
                var message = String.Join(",", result.Errors.Select(p => p.Description));
                this.toastService!.ShowError(message);
            }
        }
    }

}
