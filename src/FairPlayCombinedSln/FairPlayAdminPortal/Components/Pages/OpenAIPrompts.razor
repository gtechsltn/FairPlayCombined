@page "/OpenAIPrompts"
@implements IAsyncDisposable

@attribute [Authorize(Roles = FairPlayCombined.Common.Constants.RoleName.SystemAdmin)]

@using FairPlayAdminPortal.Components.Spinners
@using FairPlayAdminPortal.Data
@using FairPlayCombined.Common
@using FairPlayCombined.Interfaces
@using FairPlayCombined.Models
@using FairPlayCombined.Models.OpenAIPrompt
@using FairPlayCombined.Models.Pagination
@using FairPlayCombined.Services.Common
@using Microsoft.AspNetCore.Identity
@using FairPlayCombined.Common.GeneratorsAttributes
@inject OpenAIPromptService openAIPromptService
@inject IServiceScopeFactory serviceScopeFactory
@inject IToastService toastService
@rendermode NoPreRender

<LoadingIndicator ShowSpinners="this.IsBusy"></LoadingIndicator>

<FluentLabel Typo="Typography.H3">
    OpenAIPrompts
</FluentLabel>

@if (this.Items?.Items?.Length > 0)
{
    <FluentDataGrid Items="this.Items.Items.AsQueryable()">
        <PropertyColumn Property="@(p=>p.OpenAipromptId)"
                        style="width:200px;"
                        IsDefaultSortColumn="true" InitialSortDirection="SortDirection.Descending"></PropertyColumn>
        <PropertyColumn Property="@(p=>p.RevisedPrompt)"
                        style="width:200px;"
                        Sortable="true" Class="multiline-text"></PropertyColumn>
        <TemplateColumn style="width:500px;">
            @if (context.GeneratedImageBytes != null)
            {
                <img width="400" src="@($"data:image/png;base64, {Convert.ToBase64String(context.GeneratedImageBytes)}")" />
            }
        </TemplateColumn>
    </FluentDataGrid>
}

<FluentPaginator State="@pagination" CurrentPageIndexChanged="OnCurrentPageIndexChangedAsync">
</FluentPaginator>

@code {
    private static IComponentRenderMode NoPreRender = new InteractiveServerRenderMode(prerender: false);
    private readonly CancellationTokenSource cancellationTokenSource = new();
    private readonly PaginationState pagination = new()
        {
            ItemsPerPage = Constants.Pagination.PageSize
        };
    private readonly PaginationRequest paginationRequest = new()
        {
            PageSize = Constants.Pagination.PageSize,
            StartIndex = 0,
            SortingItems = new SortingItem[]
                    {
                        new SortingItem()
                        {
                            PropertyName = nameof(OpenAIPromptModel.OpenAipromptId),
                            SortType = SortType.Descending
                        }
                    }
        };
    private bool IsBusy { get; set; }
    private PaginationOfT<OpenAIPromptModel>? Items { get; set; }


    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
    }

    private async Task LoadDataAsync()
    {
        try
        {
            this.IsBusy = true;
            StateHasChanged();
            this.Items = await this.openAIPromptService
            .GetPaginatedOpenAipromptAsync(this.paginationRequest, this.cancellationTokenSource.Token);
            await this.pagination.SetTotalItemCountAsync(this.Items.TotalItems);
        }
        catch (Exception ex)
        {
            this.toastService.ShowError(ex.Message);
        }
        finally
        {
            this.IsBusy = false;
            StateHasChanged();
        }
    }

    private async Task OnCurrentPageIndexChangedAsync(int pageNumber)
    {
        this.paginationRequest.StartIndex = pageNumber * this.paginationRequest.PageSize;
        await LoadDataAsync();
    }

    public ValueTask DisposeAsync()
    {
        this.cancellationTokenSource.Dispose();
        return ValueTask.CompletedTask;
    }

}
