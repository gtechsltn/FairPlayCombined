@page "/ConfigurationSecretsManage"
@implements IDisposable

@using FairPlayCombined.Common
@using FairPlayCombined.Models.Common.ConfigurationSecret
@using FairPlayCombined.Services.Common

@inject IToastService toastService
@inject ConfigurationSecretService configurationSecretService

@rendermode RenderMode.InteractiveServer
@attribute [StreamRendering(enabled: true)]

<h3>ConfigurationSecretsManage</h3>

<FluentEditForm FormName="frmOpenAIConfiguration" Model="this.allConfigurationSecrets" OnValidSubmit="OnValidSubmitAsync">
    <div>
        <ObjectGraphDataAnnotationsValidator></ObjectGraphDataAnnotationsValidator>
        <FluentValidationSummary></FluentValidationSummary>
    </div>
    @if (this.openAIConfiguration != null)
    {
        <div>
            <FluentLabel Typo="Typography.H3">
                <FluentAnchor Href="https://platform.openai.com/account/api-keys" Target="_blank">
                    <FluentIcon Value="@(new Icons.Regular.Size16.Globe())"
                                Color="Color.Accent" Slot="start"></FluentIcon>
                    Open AI Configuration
                </FluentAnchor>
            </FluentLabel>
        </div>
        <div>
            <FluentLabel Typo="Typography.Body" Weight="FontWeight.Bold">
                @openAIConfiguration.Name
            </FluentLabel>
            <FluentTextField style="width:100%;" @bind-Value="this.openAIConfiguration.Value"></FluentTextField>
            <FluentValidationMessage For="@( () => openAIConfiguration.Value)"></FluentValidationMessage>
        </div>
    }
    @if (this.generateDall3ImageConfiguration != null)
    {
        <div>
            <FluentLabel Typo="Typography.H3">
                <FluentAnchor Href="https://platform.openai.com/docs/api-reference/images" Target="_blank">
                    <FluentIcon Value="@(new Icons.Regular.Size16.Globe())"
                                Color="Color.Accent" Slot="start"></FluentIcon>
                    DALL 3 Image Configuration
                </FluentAnchor>
            </FluentLabel>
        </div>
        <div>
            <FluentLabel Typo="Typography.Body">@generateDall3ImageConfiguration.Name</FluentLabel>
            <FluentTextField style="width:100%;" TextFieldType="TextFieldType.Url" InputMode="InputMode.Url" @bind-Value="this.generateDall3ImageConfiguration.Value"></FluentTextField>
            <FluentValidationMessage For="@( () => generateDall3ImageConfiguration.Value)"></FluentValidationMessage>
        </div>
    }
    @if (this.openAIChatCompletionConfiguration != null)
    {
        <div>
            <FluentLabel Typo="Typography.H3">
                <FluentAnchor Href="https://platform.openai.com/docs/api-reference/chat" Target="_blank">
                    <FluentIcon Value="@(new Icons.Regular.Size16.Globe())"
                                Color="Color.Accent" Slot="start"></FluentIcon>
                    OpenAI Chat Completion Configuration
                </FluentAnchor>
            </FluentLabel>
        </div>
        <div>
            <FluentLabel Typo="Typography.Body">@openAIChatCompletionConfiguration.Name</FluentLabel>
            <FluentTextField style="width:100%;" TextFieldType="TextFieldType.Url" InputMode="InputMode.Url" @bind-Value="this.openAIChatCompletionConfiguration.Value"></FluentTextField>
            <FluentValidationMessage For="@( () => openAIChatCompletionConfiguration.Value)"></FluentValidationMessage>
        </div>
    }
    @if (this.openAITextGenerationModelConfiguration != null)
    {
        <div>
            <FluentLabel Typo="Typography.H3">
                <FluentAnchor Href="https://platform.openai.com/docs/api-reference/chat" Target="_blank">
                    <FluentIcon Value="@(new Icons.Regular.Size16.Globe())"
                                Color="Color.Accent" Slot="start"></FluentIcon>
                    OpenAI Text Generation Model Configuration
                </FluentAnchor>
            </FluentLabel>
        </div>
        <div>
            <FluentLabel Typo="Typography.Body">@openAITextGenerationModelConfiguration.Name</FluentLabel>
            <FluentTextField style="width:100%;" TextFieldType="TextFieldType.Text" InputMode="InputMode.Text" @bind-Value="this.openAITextGenerationModelConfiguration.Value"></FluentTextField>
            <FluentValidationMessage For="@( () => openAITextGenerationModelConfiguration.Value)"></FluentValidationMessage>
        </div>
    }
    @if (this.azureOpenAIEndpointConfiguration != null && this.azureOpenAIKeyConfiguration != null &&
    this.azureOpenAIDeploymentNameConfiguration != null)
    {
        <div>
            <FluentLabel Typo="Typography.H3">
                <FluentAnchor Href="https://learn.microsoft.com/en-us/azure/ai-services/openai/" Target="_blank">
                    <FluentIcon Value="@(new Icons.Regular.Size16.Globe())"
                                Color="Color.Accent" Slot="start"></FluentIcon>
                    Azure OpenAI Configuration
                </FluentAnchor>
            </FluentLabel>
        </div>
        <div>
            <FluentLabel Typo="Typography.Body">@azureOpenAIEndpointConfiguration.Name</FluentLabel>
            <FluentTextField style="width:100%;" @bind-Value="this.azureOpenAIEndpointConfiguration.Value"></FluentTextField>
            <FluentValidationMessage For="@( () => azureOpenAIEndpointConfiguration.Value)"></FluentValidationMessage>
        </div>
        <div>
            <FluentLabel Typo="Typography.Body">@azureOpenAIKeyConfiguration.Name</FluentLabel>
            <FluentTextField style="width:100%;" @bind-Value="this.azureOpenAIKeyConfiguration.Value"></FluentTextField>
            <FluentValidationMessage For="@( () => azureOpenAIKeyConfiguration.Value)"></FluentValidationMessage>
        </div>
        <div>
            <FluentLabel Typo="Typography.Body">@azureOpenAIDeploymentNameConfiguration.Name</FluentLabel>
            <FluentTextField style="width:100%;" @bind-Value="this.azureOpenAIDeploymentNameConfiguration.Value"></FluentTextField>
            <FluentValidationMessage For="@( () => azureOpenAIDeploymentNameConfiguration.Value)"></FluentValidationMessage>
        </div>
    }
    @if (this.azureVideoIndexerAccountIdConfiguration != null &&
    this.azureVideoIndexerLocationConfiguration != null &&
    this.azureVideoIndexerResourceGroupConfiguration != null &&
    this.azureVideoIndexerResourceNameConfiguration != null &&
    this.azureVideoIndexerSubscriptionIdConfiguration != null)
    {
        <div>
            <FluentLabel Typo="Typography.H3">
                <FluentAnchor Href="https://learn.microsoft.com/en-us/azure/azure-video-indexer/" Target="_blank">
                    <FluentIcon Value="@(new Icons.Regular.Size16.Globe())"
                                Color="Color.Accent" Slot="start"></FluentIcon>
                    Azure Video Indexer Configuration
                </FluentAnchor>
            </FluentLabel>
        </div>
        <div>
            <FluentLabel Typo="Typography.Body">@azureVideoIndexerAccountIdConfiguration.Name</FluentLabel>
            <FluentTextField style="width:100%;" @bind-Value="this.azureVideoIndexerAccountIdConfiguration.Value"></FluentTextField>
            <FluentValidationMessage For="@( () => azureVideoIndexerAccountIdConfiguration.Value)"></FluentValidationMessage>
        </div>
        <div>
            <FluentLabel Typo="Typography.Body">@azureVideoIndexerLocationConfiguration.Name</FluentLabel>
            <FluentTextField style="width:100%;" @bind-Value="this.azureVideoIndexerLocationConfiguration.Value"></FluentTextField>
            <FluentValidationMessage For="@( () => azureVideoIndexerLocationConfiguration.Value)"></FluentValidationMessage>
        </div>
        <div>
            <FluentLabel Typo="Typography.Body">@azureVideoIndexerResourceGroupConfiguration.Name</FluentLabel>
            <FluentTextField style="width:100%;" @bind-Value="this.azureVideoIndexerResourceGroupConfiguration.Value"></FluentTextField>
            <ValidationMessage For="@( () => azureVideoIndexerResourceGroupConfiguration.Value)"></ValidationMessage>
        </div>
        <div>
            <FluentLabel Typo="Typography.Body">@azureVideoIndexerResourceNameConfiguration.Name</FluentLabel>
            <FluentTextField style="width:100%;" @bind-Value="this.azureVideoIndexerResourceNameConfiguration.Value"></FluentTextField>
            <FluentValidationMessage For="@( () => azureVideoIndexerResourceNameConfiguration.Value)"></FluentValidationMessage>
        </div>
        <div>
            <FluentLabel Typo="Typography.Body">@azureVideoIndexerSubscriptionIdConfiguration.Name</FluentLabel>
            <FluentTextField style="width:100%;" @bind-Value="this.azureVideoIndexerSubscriptionIdConfiguration.Value"></FluentTextField>
            <FluentValidationMessage For="@( () => azureVideoIndexerSubscriptionIdConfiguration.Value)"></FluentValidationMessage>
        </div>
    }
    @if (this.googleGeminiKeyConfiguration != null)
    {
        <div>
            <h3>Google Gemini Configuration</h3>
        </div>
        <div>
            <FluentLabel Typo="Typography.Body">@googleGeminiKeyConfiguration.Name</FluentLabel>
            <FluentTextField style="width:100%;" @bind-Value="this.googleGeminiKeyConfiguration.Value"></FluentTextField>
            <FluentValidationMessage For="@( () => googleGeminiKeyConfiguration.Value)"></FluentValidationMessage>
        </div>
    }
    @if (this.azureContentSafetyKeyConfiguration != null 
    && this.azureContentSafetyEndpointConfiguration != null)
    {
        <div>
            <FluentLabel Typo="Typography.H3">
                <FluentAnchor Href="https://learn.microsoft.com/en-us/azure/ai-services/content-safety/" Target="_blank">
                    <FluentIcon Value="@(new Icons.Regular.Size16.Globe())"
                                Color="Color.Accent" Slot="start"></FluentIcon>
                    Azure Content Safety Configuration
                </FluentAnchor>
            </FluentLabel>
        </div>
        <div>
            <FluentLabel Typo="Typography.Body">@azureContentSafetyEndpointConfiguration.Name</FluentLabel>
            <FluentTextField style="width:100%;" TextFieldType="TextFieldType.Url" InputMode="InputMode.Url" @bind-Value="this.azureContentSafetyEndpointConfiguration.Value"></FluentTextField>
            <FluentValidationMessage For="@( () => azureContentSafetyEndpointConfiguration.Value)"></FluentValidationMessage>
        </div>
        <div>
            <FluentLabel Typo="Typography.Body">@azureContentSafetyKeyConfiguration.Name</FluentLabel>
            <FluentTextField style="width:100%;" TextFieldType="TextFieldType.Text" InputMode="InputMode.Text" @bind-Value="this.azureContentSafetyKeyConfiguration.Value"></FluentTextField>
            <FluentValidationMessage For="@( () => azureContentSafetyKeyConfiguration.Value)"></FluentValidationMessage>
        </div>
    }
    <div>
        <FluentButton Type="ButtonType.Submit"
                      IconStart="@(new Icons.Regular.Size16.ArrowClockwise())"
                      Appearance="Appearance.Accent"
                      Loading="@this.IsBusy">
            Save
        </FluentButton>
    </div>
</FluentEditForm>

@if (this.externalServicesHealthModels?.Length > 0)
{
    <FluentDataGrid Items="this.externalServicesHealthModels.AsQueryable()">
        <PropertyColumn Property="@(p=>p.ServiceName)"></PropertyColumn>
        <PropertyColumn Property="@(p=>p.IsHealthy)"></PropertyColumn>
        <PropertyColumn Property="@(p=>p.Response)" Class="multiline-text"></PropertyColumn>
    </FluentDataGrid>
}

@code
{
    [SupplyParameterFromForm]
    private List<ConfigurationSecretModel> allConfigurationSecrets { get; set; } = new();

    private ConfigurationSecretModel? openAIConfiguration => allConfigurationSecrets?
    .SingleOrDefault(p => p.Name == FairPlayCombined.Common.Constants.ConfigurationSecretsKeys.OPENAI_KEY);

    private ConfigurationSecretModel? generateDall3ImageConfiguration => allConfigurationSecrets?
    .SingleOrDefault(p => p.Name == FairPlayCombined.Common.Constants.ConfigurationSecretsKeys.GENERATE_DALL3_IMAGE_URL_KEY);

    private ConfigurationSecretModel? openAIChatCompletionConfiguration => allConfigurationSecrets?
    .SingleOrDefault(p => p.Name == FairPlayCombined.Common.Constants.ConfigurationSecretsKeys.OPENAI_CHAT_COMPLETION_URL_KEY);

    private ConfigurationSecretModel? openAITextGenerationModelConfiguration => allConfigurationSecrets?
    .SingleOrDefault(p => p.Name == FairPlayCombined.Common.Constants.ConfigurationSecretsKeys.OPENAI_TEXT_GENERATION_MODEL_KEY);

    private ConfigurationSecretModel? azureOpenAIEndpointConfiguration => allConfigurationSecrets?
    .SingleOrDefault(p => p.Name == FairPlayCombined.Common.Constants.ConfigurationSecretsKeys.AZURE_OPENAI_ENDPOINT_KEY);

    private ConfigurationSecretModel? azureOpenAIKeyConfiguration => allConfigurationSecrets?
    .SingleOrDefault(p => p.Name == FairPlayCombined.Common.Constants.ConfigurationSecretsKeys.AZURE_OPENAI_KEY_KEY);

    private ConfigurationSecretModel? azureOpenAIDeploymentNameConfiguration => allConfigurationSecrets?
    .SingleOrDefault(p => p.Name == FairPlayCombined.Common.Constants.ConfigurationSecretsKeys.AZURE_OPENAI_DEPLOYMENT_NAME_KEY);

    private ConfigurationSecretModel? azureVideoIndexerAccountIdConfiguration => allConfigurationSecrets?
    .SingleOrDefault(p => p.Name == FairPlayCombined.Common.Constants.ConfigurationSecretsKeys.AZURE_VIDEOINDEXER_ACCOUNT_ID_KEY);

    private ConfigurationSecretModel? azureVideoIndexerLocationConfiguration => allConfigurationSecrets?
    .SingleOrDefault(p => p.Name == FairPlayCombined.Common.Constants.ConfigurationSecretsKeys.AZURE_VIDEOINDEXER_LOCATION_KEY);

    private ConfigurationSecretModel? azureVideoIndexerResourceGroupConfiguration => allConfigurationSecrets?
    .SingleOrDefault(p => p.Name == FairPlayCombined.Common.Constants.ConfigurationSecretsKeys.AZURE_VIDEOINDEXER_RESOURCE_GROUP_KEY);

    private ConfigurationSecretModel? azureVideoIndexerResourceNameConfiguration => allConfigurationSecrets?
    .SingleOrDefault(p => p.Name == FairPlayCombined.Common.Constants.ConfigurationSecretsKeys.AZURE_VIDEOINDEXER_RESOURCE_NAME_KEY);

    private ConfigurationSecretModel? azureVideoIndexerSubscriptionIdConfiguration => allConfigurationSecrets?
    .SingleOrDefault(p => p.Name == FairPlayCombined.Common.Constants.ConfigurationSecretsKeys.AZURE_VIDEOINDEXER_SUBSCRIPTION_ID_KEY);

    private ConfigurationSecretModel? googleGeminiKeyConfiguration => allConfigurationSecrets?
    .SingleOrDefault(p => p.Name == FairPlayCombined.Common.Constants.ConfigurationSecretsKeys.GOOGLE_GEMINI_KEY_KEY);

    private ConfigurationSecretModel? azureContentSafetyEndpointConfiguration => allConfigurationSecrets?
    .SingleOrDefault(p => p.Name == FairPlayCombined.Common.Constants.ConfigurationSecretsKeys.AZURE_CONTENT_SAFETY_ENDPOINT_KEY);

    private ConfigurationSecretModel? azureContentSafetyKeyConfiguration => allConfigurationSecrets?
    .SingleOrDefault(p => p.Name == FairPlayCombined.Common.Constants.ConfigurationSecretsKeys.AZURE_CONTENT_SAFETY_KEY_KEY);


    private ExternalServicesHealthModel[]? externalServicesHealthModels;
    private bool disposedValue;
    private readonly CancellationTokenSource cancellationTokenSource = new();
    private bool IsBusy { get; set; }

    protected override async Task OnInitializedAsync()
    {
        this.allConfigurationSecrets = (await this.configurationSecretService.GetAllConfigurationSecretAsync(
        cancellationToken: this.cancellationTokenSource.Token)).ToList();
        if (this.allConfigurationSecrets?.Count == 0)
            this.allConfigurationSecrets = new List<ConfigurationSecretModel>();
        InitializeOpenAIKeyFields();
        InitializeDalle3ImageUrlFields();
        InitializeOpenAIChatCompletionKeyFields();
        InitializeOpenAITextGenerationModelFields();
        InitializeAzureOpenAIEndpontFields();
        InitializeAzureOpenAIKeyFields();
        InitializeAzureOpenAIDeploymentNameFields();
        InitializeAzureVideoIndexerAccountIdFields();
        InitializeAzureVideoIndexerLocationFields();
        InitializeAzureVideoIndexerResourrceGroupFields();
        InitializeAzureVideoIndexerResourceNameFields();
        InitializeAzureVideoIndexerSubscriptionIdFields();
        InitializeGoogleGeminiKeyFields();
        InitializeAzureContentSafetyEndpointFields();
        InitializeAzureContentSafetyKeyFields();
        StateHasChanged();
    }

    private void InitializeAzureContentSafetyKeyFields()
    {
        if (this.azureContentSafetyKeyConfiguration is null)
        {
            this.allConfigurationSecrets!.Add(new ConfigurationSecretModel()
                {
                    Name = Constants.ConfigurationSecretsKeys.AZURE_CONTENT_SAFETY_KEY_KEY
                });
        }
    }

    private void InitializeAzureContentSafetyEndpointFields()
    {
        if (this.azureContentSafetyEndpointConfiguration is null)
        {
            this.allConfigurationSecrets!.Add(new ConfigurationSecretModel()
                {
                    Name = Constants.ConfigurationSecretsKeys.AZURE_CONTENT_SAFETY_ENDPOINT_KEY
                });
        }
    }

    private void InitializeGoogleGeminiKeyFields()
    {
        if (this.googleGeminiKeyConfiguration is null)
        {
            this.allConfigurationSecrets!.Add(new ConfigurationSecretModel()
                {
                    Name = Constants.ConfigurationSecretsKeys.GOOGLE_GEMINI_KEY_KEY
                });
        }
    }

    private void InitializeAzureVideoIndexerSubscriptionIdFields()
    {
        if (this.azureVideoIndexerSubscriptionIdConfiguration is null)
        {
            this.allConfigurationSecrets!.Add(new ConfigurationSecretModel()
                {
                    Name = Constants.ConfigurationSecretsKeys.AZURE_VIDEOINDEXER_SUBSCRIPTION_ID_KEY
                });
        }
    }

    private void InitializeAzureVideoIndexerResourceNameFields()
    {
        if (this.azureVideoIndexerResourceNameConfiguration is null)
        {
            this.allConfigurationSecrets!.Add(new ConfigurationSecretModel()
                {
                    Name = Constants.ConfigurationSecretsKeys.AZURE_VIDEOINDEXER_RESOURCE_NAME_KEY
                });
        }
    }

    private void InitializeAzureVideoIndexerResourrceGroupFields()
    {
        if (this.azureVideoIndexerResourceGroupConfiguration is null)
        {
            this.allConfigurationSecrets!.Add(new ConfigurationSecretModel()
                {
                    Name = Constants.ConfigurationSecretsKeys.AZURE_VIDEOINDEXER_RESOURCE_GROUP_KEY
                });
        }
    }

    private void InitializeAzureVideoIndexerLocationFields()
    {
        if (this.azureVideoIndexerLocationConfiguration is null)
        {
            this.allConfigurationSecrets!.Add(new ConfigurationSecretModel()
                {
                    Name = Constants.ConfigurationSecretsKeys.AZURE_VIDEOINDEXER_LOCATION_KEY
                });
        }
    }

    private void InitializeAzureVideoIndexerAccountIdFields()
    {
        if (this.azureVideoIndexerAccountIdConfiguration is null)
        {
            this.allConfigurationSecrets!.Add(new ConfigurationSecretModel()
                {
                    Name = Constants.ConfigurationSecretsKeys.AZURE_VIDEOINDEXER_ACCOUNT_ID_KEY
                });
        }
    }

    private void InitializeAzureOpenAIDeploymentNameFields()
    {
        if (this.azureOpenAIDeploymentNameConfiguration is null)
        {
            this.allConfigurationSecrets!.Add(new ConfigurationSecretModel()
                {
                    Name = Constants.ConfigurationSecretsKeys.AZURE_OPENAI_DEPLOYMENT_NAME_KEY
                });
        }
    }

    private void InitializeAzureOpenAIKeyFields()
    {
        if (this.azureOpenAIKeyConfiguration is null)
        {
            this.allConfigurationSecrets!.Add(new ConfigurationSecretModel()
                {
                    Name = Constants.ConfigurationSecretsKeys.AZURE_OPENAI_KEY_KEY
                });
        }
    }

    private void InitializeAzureOpenAIEndpontFields()
    {
        if (this.azureOpenAIEndpointConfiguration is null)
        {
            this.allConfigurationSecrets!.Add(new ConfigurationSecretModel()
                {
                    Name = Constants.ConfigurationSecretsKeys.AZURE_OPENAI_ENDPOINT_KEY
                });
        }
    }

    private void InitializeOpenAITextGenerationModelFields()
    {
        if (this.openAITextGenerationModelConfiguration is null)
        {
            this.allConfigurationSecrets!.Add(new ConfigurationSecretModel()
                {
                    Name = Constants.ConfigurationSecretsKeys.OPENAI_TEXT_GENERATION_MODEL_KEY
                });
        }
    }

    private void InitializeOpenAIChatCompletionKeyFields()
    {
        if (this.openAIChatCompletionConfiguration is null)
        {
            this.allConfigurationSecrets!.Add(new ConfigurationSecretModel()
                {
                    Name = Constants.ConfigurationSecretsKeys.OPENAI_CHAT_COMPLETION_URL_KEY
                });
        }
    }

    private void InitializeDalle3ImageUrlFields()
    {
        if (this.generateDall3ImageConfiguration is null)
        {
            this.allConfigurationSecrets!.Add(new ConfigurationSecretModel()
                {
                    Name = Constants.ConfigurationSecretsKeys.GENERATE_DALL3_IMAGE_URL_KEY
                });
        }
    }

    private void InitializeOpenAIKeyFields()
    {
        if (this.openAIConfiguration is null)
        {
            this.allConfigurationSecrets!.Add(new ConfigurationSecretModel()
                {
                    Name = Constants.ConfigurationSecretsKeys.OPENAI_KEY
                });
        }
    }

    private async Task OnValidSubmitAsync()
    {
        this.IsBusy = true;
        StateHasChanged();
        ExternalServicesConfigurationModel externalServicesConfigurationModel = new()
            {
                AzureOpenDeploymentName = this.azureOpenAIDeploymentNameConfiguration!.Value,
                OpenAIClient = new Azure.AI.OpenAI.OpenAIClient(openAIApiKey: this.azureOpenAIKeyConfiguration!.Value)
            };
        ExternalServicesHealthService externalServicesHealthService = new(externalServicesConfigurationModel);
        this.externalServicesHealthModels = await externalServicesHealthService.CheckServicesHealthAsync(this.cancellationTokenSource.Token);
        await this.configurationSecretService.UpdateAllConfigurationSecretAsync(this.allConfigurationSecrets,
        this.cancellationTokenSource.Token);
        this.IsBusy = false;
        StateHasChanged();
    }

    protected virtual void Dispose(bool disposing)
    {
        if (!disposedValue)
        {
            if (disposing)
            {
                this.cancellationTokenSource.Dispose();
            }

            disposedValue = true;
        }
    }

    public void Dispose()
    {
        // Do not change this code. Put cleanup code in 'Dispose(bool disposing)' method
        Dispose(disposing: true);
        GC.SuppressFinalize(this);
    }
}