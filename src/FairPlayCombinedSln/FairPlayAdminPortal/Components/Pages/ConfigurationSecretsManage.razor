@page "/ConfigurationSecretsManage"
@using FairPlayCombined.Common
@using FairPlayCombined.Models.Common.ConfigurationSecret
@using FairPlayCombined.Services.Common
@using Microsoft.Azure.CognitiveServices.ContentModerator

@inject IToastService toastService
@inject ConfigurationSecretService configurationSecretService

@rendermode RenderMode.InteractiveServer
@attribute [StreamRendering(enabled: true)]

<h3>ConfigurationSecretsManage</h3>

<EditForm FormName="frmOpenAIConfiguration" Model="this.allConfigurationSecrets" OnValidSubmit="OnValidSubmitAsync">
    <div class="@ThemeConfiguration.Divisions.DefaultCss">
        <ObjectGraphDataAnnotationsValidator></ObjectGraphDataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>
    </div>
    @if (this.openAIConfiguration != null)
    {
        <div class="@ThemeConfiguration.Divisions.DefaultCss">
            <h3>
                <a href="https://platform.openai.com/account/api-keys" target="_blank">
                    Open AI Configuration
                </a>
            </h3>
        </div>
        <div class="@ThemeConfiguration.Divisions.DefaultCss">
            <label class="@ThemeConfiguration.Labels.DefaultCss">
                @openAIConfiguration.Name
            </label>
            <InputText class="@ThemeConfiguration.GenericControls.DefaultCss" @bind-Value="this.openAIConfiguration.Value"></InputText>
            <ValidationMessage For="@( () => openAIConfiguration.Value)"></ValidationMessage>
        </div>
    }
    @if (this.generateDall3ImageConfiguration != null)
    {
        <div class="@ThemeConfiguration.Divisions.DefaultCss">
            <h3>
                <a href="https://platform.openai.com/docs/api-reference/images" target="_blank">
                    DALL 3 Image Configuration
                </a>
            </h3>
        </div>
        <div class="@ThemeConfiguration.Divisions.DefaultCss">
            <label class="@ThemeConfiguration.Labels.DefaultCss">@generateDall3ImageConfiguration.Name</label>
            <InputText class="@ThemeConfiguration.GenericControls.DefaultCss" @bind-Value="this.generateDall3ImageConfiguration.Value"></InputText>
            <ValidationMessage For="@( () => generateDall3ImageConfiguration.Value)"></ValidationMessage>
        </div>
    }
    @if (this.openAIChatCompletionConfiguration != null)
    {
        <div class="@ThemeConfiguration.Divisions.DefaultCss">
            <h3>OpenAI Chat Completion Configuration</h3>
        </div>
        <div class="@ThemeConfiguration.Divisions.DefaultCss">
            <label class="@ThemeConfiguration.Labels.DefaultCss">@openAIChatCompletionConfiguration.Name</label>
            <InputText class="@ThemeConfiguration.GenericControls.DefaultCss" @bind-Value="this.openAIChatCompletionConfiguration.Value"></InputText>
            <ValidationMessage For="@( () => openAIChatCompletionConfiguration.Value)"></ValidationMessage>
        </div>
    }
    @if (this.azureOpenAIEndpointConfiguration != null && this.azureOpenAIKeyConfiguration != null)
    {
        <div class="@ThemeConfiguration.Divisions.DefaultCss">
            <h3>Azure OpenAI Configuration</h3>
        </div>
        <div class="@ThemeConfiguration.Divisions.DefaultCss">
            <label class="@ThemeConfiguration.Labels.DefaultCss">@azureOpenAIEndpointConfiguration.Name</label>
            <InputText class="@ThemeConfiguration.GenericControls.DefaultCss" @bind-Value="this.azureOpenAIEndpointConfiguration.Value"></InputText>
            <ValidationMessage For="@( () => azureOpenAIEndpointConfiguration.Value)"></ValidationMessage>
        </div>
        <div class="@ThemeConfiguration.Divisions.DefaultCss">
            <label class="@ThemeConfiguration.Labels.DefaultCss">@azureOpenAIKeyConfiguration.Name</label>
            <InputText class="@ThemeConfiguration.GenericControls.DefaultCss" @bind-Value="this.azureOpenAIKeyConfiguration.Value"></InputText>
            <ValidationMessage For="@( () => azureOpenAIKeyConfiguration.Value)"></ValidationMessage>
        </div>
    }
    @if (this.azureVideoIndexerAccountIdConfiguration != null &&
    this.azureVideoIndexerLocationConfiguration != null &&
    this.azureVideoIndexerResourceGroupConfiguration != null &&
    this.azureVideoIndexerResourceNameConfiguration != null &&
    this.azureVideoIndexerSubscriptionIdConfiguration != null)
    {
        <div class="@ThemeConfiguration.Divisions.DefaultCss">
            <h3>Azure Video Indexer Configuration</h3>
        </div>
        <div class="@ThemeConfiguration.Divisions.DefaultCss">
            <label class="@ThemeConfiguration.Labels.DefaultCss">@azureVideoIndexerAccountIdConfiguration.Name</label>
            <InputText class="@ThemeConfiguration.GenericControls.DefaultCss" @bind-Value="this.azureVideoIndexerAccountIdConfiguration.Value"></InputText>
            <ValidationMessage For="@( () => azureVideoIndexerAccountIdConfiguration.Value)"></ValidationMessage>
        </div>
        <div class="@ThemeConfiguration.Divisions.DefaultCss">
            <label class="@ThemeConfiguration.Labels.DefaultCss">@azureVideoIndexerLocationConfiguration.Name</label>
            <InputText class="@ThemeConfiguration.GenericControls.DefaultCss" @bind-Value="this.azureVideoIndexerLocationConfiguration.Value"></InputText>
            <ValidationMessage For="@( () => azureVideoIndexerLocationConfiguration.Value)"></ValidationMessage>
        </div>
        <div class="@ThemeConfiguration.Divisions.DefaultCss">
            <label class="@ThemeConfiguration.Labels.DefaultCss">@azureVideoIndexerResourceGroupConfiguration.Name</label>
            <InputText class="@ThemeConfiguration.GenericControls.DefaultCss" @bind-Value="this.azureVideoIndexerResourceGroupConfiguration.Value"></InputText>
            <ValidationMessage For="@( () => azureVideoIndexerResourceGroupConfiguration.Value)"></ValidationMessage>
        </div>
        <div class="@ThemeConfiguration.Divisions.DefaultCss">
            <label class="@ThemeConfiguration.Labels.DefaultCss">@azureVideoIndexerResourceNameConfiguration.Name</label>
            <InputText class="@ThemeConfiguration.GenericControls.DefaultCss" @bind-Value="this.azureVideoIndexerResourceNameConfiguration.Value"></InputText>
            <ValidationMessage For="@( () => azureVideoIndexerResourceNameConfiguration.Value)"></ValidationMessage>
        </div>
        <div class="@ThemeConfiguration.Divisions.DefaultCss">
            <label class="@ThemeConfiguration.Labels.DefaultCss">@azureVideoIndexerSubscriptionIdConfiguration.Name</label>
            <InputText class="@ThemeConfiguration.GenericControls.DefaultCss" @bind-Value="this.azureVideoIndexerSubscriptionIdConfiguration.Value"></InputText>
            <ValidationMessage For="@( () => azureVideoIndexerSubscriptionIdConfiguration.Value)"></ValidationMessage>
        </div>
    }
    @if (this.azureContentModeratorEndpointConfiguration != null &&
    this.azureContentModeratorKeyConfiguration != null)
    {
        <div class="@ThemeConfiguration.Divisions.DefaultCss">
            <h3>Azure Content Moderator Configuration</h3>
        </div>
        <div class="@ThemeConfiguration.Divisions.DefaultCss">
            <label class="@ThemeConfiguration.Labels.DefaultCss">@azureContentModeratorEndpointConfiguration.Name</label>
            <InputText class="@ThemeConfiguration.GenericControls.DefaultCss" @bind-Value="this.azureContentModeratorEndpointConfiguration.Value"></InputText>
            <ValidationMessage For="@( () => azureContentModeratorEndpointConfiguration.Value)"></ValidationMessage>
        </div>
        <div class="@ThemeConfiguration.Divisions.DefaultCss">
            <label class="@ThemeConfiguration.Labels.DefaultCss">@azureContentModeratorKeyConfiguration.Name</label>
            <InputText class="@ThemeConfiguration.GenericControls.DefaultCss" @bind-Value="this.azureContentModeratorKeyConfiguration.Value"></InputText>
            <ValidationMessage For="@( () => azureContentModeratorKeyConfiguration.Value)"></ValidationMessage>
        </div>
    }
    <div class="@ThemeConfiguration.Divisions.DefaultCss">
        <button class="@ThemeConfiguration.Buttons.PrimaryButtonCss">Save</button>
    </div>
</EditForm>

@if (this.externalServicesHealthModels?.Length > 0)
{
    <FluentDataGrid Items="this.externalServicesHealthModels.AsQueryable()">
        <PropertyColumn Property="@(p=>p.ServiceName)"></PropertyColumn>
        <PropertyColumn Property="@(p=>p.IsHealthy)"></PropertyColumn>
        <PropertyColumn Property="@(p=>p.Response)"></PropertyColumn>
    </FluentDataGrid>
}


@code {

    [SupplyParameterFromForm]
    private List<ConfigurationSecretModel> allConfigurationSecrets { get; set; } = new();
    private ConfigurationSecretModel? openAIConfiguration => allConfigurationSecrets?
    .SingleOrDefault(p => p.Name == FairPlayCombined.Common.Constants.ConfigurationSecretsKeys.OPENAI_KEY);
    private ConfigurationSecretModel? generateDall3ImageConfiguration => allConfigurationSecrets?
    .SingleOrDefault(p => p.Name == FairPlayCombined.Common.Constants.ConfigurationSecretsKeys.GENERATE_DALL3_IMAGE_URL_KEY);
    private ConfigurationSecretModel? openAIChatCompletionConfiguration => allConfigurationSecrets?
    .SingleOrDefault(p => p.Name == FairPlayCombined.Common.Constants.ConfigurationSecretsKeys.OPENAI_CHAT_COMPLETION_URL_KEY);
    private ConfigurationSecretModel? azureOpenAIEndpointConfiguration => allConfigurationSecrets?
    .SingleOrDefault(p => p.Name == FairPlayCombined.Common.Constants.ConfigurationSecretsKeys.AZURE_OPENAI_ENDPOINT_KEY);
    private ConfigurationSecretModel? azureOpenAIKeyConfiguration => allConfigurationSecrets?
    .SingleOrDefault(p => p.Name == FairPlayCombined.Common.Constants.ConfigurationSecretsKeys.AZURE_OPENAI_KEY_KEY);
    private ConfigurationSecretModel? azureVideoIndexerAccountIdConfiguration => allConfigurationSecrets?
    .SingleOrDefault(p => p.Name == FairPlayCombined.Common.Constants.ConfigurationSecretsKeys.AZURE_VIDEOINDEXER_ACCOUNT_ID_KEY);
    private ConfigurationSecretModel? azureVideoIndexerLocationConfiguration => allConfigurationSecrets?
    .SingleOrDefault(p => p.Name == FairPlayCombined.Common.Constants.ConfigurationSecretsKeys.AZURE_VIDEOINDEXER_LOCATION_KEY);
    private ConfigurationSecretModel? azureVideoIndexerResourceGroupConfiguration => allConfigurationSecrets?
    .SingleOrDefault(p => p.Name == FairPlayCombined.Common.Constants.ConfigurationSecretsKeys.AZURE_VIDEOINDEXER_RESOURCE_GROUP_KEY);
    private ConfigurationSecretModel? azureVideoIndexerResourceNameConfiguration => allConfigurationSecrets?
    .SingleOrDefault(p => p.Name == FairPlayCombined.Common.Constants.ConfigurationSecretsKeys.AZURE_VIDEOINDEXER_RESOURCE_NAME_KEY);
    private ConfigurationSecretModel? azureVideoIndexerSubscriptionIdConfiguration => allConfigurationSecrets?
    .SingleOrDefault(p => p.Name == FairPlayCombined.Common.Constants.ConfigurationSecretsKeys.AZURE_VIDEOINDEXER_SUBSCRIPTION_ID_KEY);
    private ConfigurationSecretModel? azureContentModeratorEndpointConfiguration => allConfigurationSecrets?
    .SingleOrDefault(p => p.Name == FairPlayCombined.Common.Constants.ConfigurationSecretsKeys.AZURE_CONTENT_MODERATOR_ENDPOINT_KEY);
    private ConfigurationSecretModel? azureContentModeratorKeyConfiguration => allConfigurationSecrets?
    .SingleOrDefault(p => p.Name == FairPlayCombined.Common.Constants.ConfigurationSecretsKeys.AZURE_CONTENT_MODERATOR_KEY_KEY);
    private ExternalServicesHealthModel[]? externalServicesHealthModels;
    private CancellationTokenSource cancellationTokenSource = new();

    protected override async Task OnInitializedAsync()
    {
        this.allConfigurationSecrets = (await this.configurationSecretService.GetAllConfigurationSecretAsync(
        cancellationToken: this.cancellationTokenSource.Token)).ToList();
        if (this.allConfigurationSecrets?.Count == 0)
            this.allConfigurationSecrets = new List<ConfigurationSecretModel>();
        if (this.openAIConfiguration is null)
        {
            this.allConfigurationSecrets!.Add(new ConfigurationSecretModel()
                {
                    Name = Constants.ConfigurationSecretsKeys.OPENAI_KEY
                });
        }
        if (this.generateDall3ImageConfiguration is null)
        {
            this.allConfigurationSecrets!.Add(new ConfigurationSecretModel()
                {
                    Name = Constants.ConfigurationSecretsKeys.GENERATE_DALL3_IMAGE_URL_KEY
                });
        }
        if (this.openAIChatCompletionConfiguration is null)
        {
            this.allConfigurationSecrets!.Add(new ConfigurationSecretModel()
                {
                    Name = Constants.ConfigurationSecretsKeys.OPENAI_CHAT_COMPLETION_URL_KEY
                });
        }
        if (this.azureOpenAIEndpointConfiguration is null)
        {
            this.allConfigurationSecrets!.Add(new ConfigurationSecretModel()
                {
                    Name = Constants.ConfigurationSecretsKeys.AZURE_OPENAI_ENDPOINT_KEY
                });
        }
        if (this.azureOpenAIKeyConfiguration is null)
        {
            this.allConfigurationSecrets!.Add(new ConfigurationSecretModel()
                {
                    Name = Constants.ConfigurationSecretsKeys.AZURE_OPENAI_KEY_KEY
                });
        }
        if (this.azureVideoIndexerAccountIdConfiguration is null)
        {
            this.allConfigurationSecrets!.Add(new ConfigurationSecretModel()
                {
                    Name = Constants.ConfigurationSecretsKeys.AZURE_VIDEOINDEXER_ACCOUNT_ID_KEY
                });
        }
        if (this.azureVideoIndexerLocationConfiguration is null)
        {
            this.allConfigurationSecrets!.Add(new ConfigurationSecretModel()
                {
                    Name = Constants.ConfigurationSecretsKeys.AZURE_VIDEOINDEXER_LOCATION_KEY
                });
        }
        if (this.azureVideoIndexerResourceGroupConfiguration is null)
        {
            this.allConfigurationSecrets!.Add(new ConfigurationSecretModel()
                {
                    Name = Constants.ConfigurationSecretsKeys.AZURE_VIDEOINDEXER_RESOURCE_GROUP_KEY
                });
        }
        if (this.azureVideoIndexerResourceNameConfiguration is null)
        {
            this.allConfigurationSecrets!.Add(new ConfigurationSecretModel()
                {
                    Name = Constants.ConfigurationSecretsKeys.AZURE_VIDEOINDEXER_RESOURCE_NAME_KEY
                });
        }
        if (this.azureVideoIndexerSubscriptionIdConfiguration is null)
        {
            this.allConfigurationSecrets!.Add(new ConfigurationSecretModel()
                {
                    Name = Constants.ConfigurationSecretsKeys.AZURE_VIDEOINDEXER_SUBSCRIPTION_ID_KEY
                });
        }
        if (this.azureContentModeratorEndpointConfiguration is null)
        {
            this.allConfigurationSecrets!.Add(new ConfigurationSecretModel()
                {
                    Name = Constants.ConfigurationSecretsKeys.AZURE_CONTENT_MODERATOR_ENDPOINT_KEY
                });
        }
        if (this.azureContentModeratorKeyConfiguration is null)
        {
            this.allConfigurationSecrets!.Add(new ConfigurationSecretModel()
                {
                    Name = Constants.ConfigurationSecretsKeys.AZURE_CONTENT_MODERATOR_KEY_KEY
                });
        }
        StateHasChanged();
    }

    private async Task OnValidSubmitAsync()
    {
        ExternalServicesConfigurationModel externalServicesConfigurationModel = new()
            {
                OpenAIClient = new Azure.AI.OpenAI.OpenAIClient(openAIApiKey: this.azureOpenAIKeyConfiguration!.Value),
                ContentModeratorClient = new(new ApiKeyServiceClientCredentials(this.azureContentModeratorKeyConfiguration!.Value))
                {
                    Endpoint = this.azureContentModeratorEndpointConfiguration!.Value
                }
            };
        ExternalServicesHealthService externalServicesHealthService = new ExternalServicesHealthService(externalServicesConfigurationModel);
        this.externalServicesHealthModels = await externalServicesHealthService.CheckServicesHealthAsync(this.cancellationTokenSource.Token);
        await this.configurationSecretService.UpdateAllConfigurationSecretAsync(this.allConfigurationSecrets,
        this.cancellationTokenSource.Token);
    }
}
