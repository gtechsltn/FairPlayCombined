@page "/MyMatches"
@implements IAsyncDisposable

@attribute [Authorize(Roles = FairPlayCombined.Common.Constants.RoleName.BasicPlanUser)]

@using FairPlayCombined.Common
@using FairPlayCombined.Common.CustomAttributes
@using FairPlayCombined.Common.GeneratorsAttributes
@using FairPlayCombined.Interfaces
@using FairPlayCombined.Interfaces.Common
@using FairPlayCombined.Interfaces.FairPlayDating
@using FairPlayCombined.Models.FairPlayDating.LikedUserProfile
@using FairPlayCombined.Models.FairPlayDating.NotLikedUserProfile
@using FairPlayCombined.Models.FairPlayDating.UserProfile
@using FairPlayCombined.Models.OpenAI
@using FairPlayCombined.Models.Pagination
@using FairPlayCombined.Services.Common
@using FairPlayCombined.Services.FairPlayDating
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Localization
@using System.Text


@inject MyMatchesService myMatchesService
@inject IUserProfileService userProfileService
@inject IUserProviderService userProviderService
@inject IStringLocalizer<MyMatches> localizer
@inject GeoNamesService geoNamesService
@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject IToastService toastService
@inject IOpenAIService openAIService
@inject ActivityService activityService
@inject ReligionService religionService
@inject DateObjectiveService dateObjectiveService
@inject KidStatusService kidStatusService
@inject ProfessionService professionService
@inject IPromptGeneratorService promptGeneratorService
@inject LikedUserProfileService likedUserProfileService
@inject NotLikedUserProfileService notLikedUserProfileService

<h3>
    @localizer[MyMatchesTextKey]
</h3>

<LoadingIndicator ShowSpinners="this.IsBusy"></LoadingIndicator>

@if (!this.HasUserProfile)
{
    <p>
        @localizer[CompletProfileTextKey]
    </p>
}
<div class="grid-container">
    <FluentDataGrid ItemsProvider="this.ItemsProvider" Pagination="this.paginationState">
        <TemplateColumn>
            <div class="row">
                <div class="col">
                    <FluentButton Type="ButtonType.Button" data-bs-toggle="tooltip" data-bs-placement="top"
                                  title="I like this person"
                                  OnClick="@( () => OnPotentialMatchLikeClickedAsync(context))">
                        <FluentIcon Value="@(new Icons.Regular.Size20.ThumbLike())"></FluentIcon>
                    </FluentButton>
                    <FluentButton Type="ButtonType.Button" data-bs-toggle="tooltip" data-bs-placement="top"
                                  title="I don't like this person"
                                  OnClick="@( () => OnPotentialMatchDisLikeClickedAsync(context))">
                        <FluentIcon Value="@(new Icons.Regular.Size20.ThumbDislike())"></FluentIcon>
                    </FluentButton>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <div class="card" style="width: 100%;">
                        <img class="card-img-top"
                             src="@($"api/photoimage/{context.ProfilePhotoId}")" />
                        <div class="card-body">
                            <h5 class="card-title">
                            </h5>
                        </div>
                    </div>
                </div>
                <div class="col">
                    <div class="row">
                        <div class="col">
                            @localizer[AgeTextKey]: @context.Age
                        </div>
                    </div>
                    <div class="row">
                        <div class="col">
                            @localizer[DistanceTextKey]: @context.Distance
                        </div>
                    </div>
                    <div class="row">
                        <div class="col">
                            <p>@context.About</p>
                            <a class="btn btn-primary"
                               @onclick="@( ()=> OnViewDetailsClicked(context))">@localizer[ViewDetailsTextKey]</a>
                            <a class="btn btn-primary"
                               @onclick="@( async ()=> await OnAnalyzePotentialMatchAsync(context))">Analyze Potential Match</a>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col">
                            <FluentPaginator State="this.paginationState"
                                             CurrentPageIndexChanged="@(()=>ResetDialog())"></FluentPaginator>
                        </div>
                    </div>
                </div>
            </div>
        </TemplateColumn>
    </FluentDataGrid>
</div>


<FluentDialog @ref="detailsDialog"
              @bind-Hidden="@showDetailsDialog"
              Modal="true" TrapFocus="true"
              PreventScroll="false">
    <FluentDialogHeader Visible="false"></FluentDialogHeader>
    @if (this.selectedUserProfileModel != null)
    {
        <div>
            <p>
                <FluentLabel Typo="Typography.Subject">
                    <strong>
                        Age:
                    </strong>
                </FluentLabel>
                <FluentLabel Typo="Typography.Body">@selectedUserProfileModel!.Age</FluentLabel>
            </p>
            <p>
                <FluentLabel Typo="Typography.Subject">
                    <strong>
                        Profession:
                    </strong>
                </FluentLabel>
                <FluentLabel Typo="Typography.Body">@selectedUserProfileModel!.MainProfessionText</FluentLabel>
            </p>
            <p>
                <FluentLabel Typo="Typography.Subject">
                    <strong>
                        About me:
                    </strong>
                </FluentLabel>
                <FluentLabel Typo="Typography.Body">@selectedUserProfileModel!.About</FluentLabel>
            </p>
            <p>
                <FluentLabel Typo="Typography.Subject">
                    <strong>
                        Kids Status:
                    </strong>
                </FluentLabel>
                <FluentLabel Typo="Typography.Body">@selectedUserProfileModel!.KidStatusText</FluentLabel>
            </p>
            <p>
                <FluentLabel Typo="Typography.Subject">
                    <strong>
                        Gender:
                    </strong>
                </FluentLabel>
                <FluentLabel Typo="Typography.Body">@selectedUserProfileModel!.BiologicalGenderText</FluentLabel>
            </p>
            <p>
                <FluentLabel Typo="Typography.Subject">
                    <strong>
                        Date Objective:
                    </strong>
                </FluentLabel>
                <FluentLabel Typo="Typography.Body">@selectedUserProfileModel!.CurrentDateObjectiveText</FluentLabel>
            </p>
            <p>
                <FluentLabel Typo="Typography.Subject">
                    <strong>
                        Eyes Color:
                    </strong>
                </FluentLabel>
                <FluentLabel Typo="Typography.Body">@selectedUserProfileModel!.EyesColorText</FluentLabel>
            </p>
            <p>
                <FluentLabel Typo="Typography.Subject">
                    <strong>
                        Hair Color:
                    </strong>
                </FluentLabel>
                <FluentLabel Typo="Typography.Body">@selectedUserProfileModel!.HairColorText</FluentLabel>
            </p>
            <p>
                <FluentLabel Typo="Typography.Subject">
                    <strong>
                        Religion:
                    </strong>
                </FluentLabel>
                <FluentLabel Typo="Typography.Body">@selectedUserProfileModel!.ReligionText</FluentLabel>
            </p>
            <p>
                <FluentLabel Typo="Typography.Subject">
                    <strong>
                        Tattoo Status:
                    </strong>
                </FluentLabel>
                <FluentLabel Typo="Typography.Body">@selectedUserProfileModel!.TattooStatusText</FluentLabel>
            </p>
            <p>
                <FluentLabel Typo="Typography.Subject">
                    <strong>
                        Location:
                    </strong>
                </FluentLabel>
                <FluentLabel Typo="Typography.Body">@selectedUserLocationText</FluentLabel>
            </p>
            @if (selectedUserProfileModel!.ActivitiesFrequency?.Length > 0)
            {
                <FluentLabel Typo="Typography.Subject">
                    <strong>
                        Activities:
                    </strong>
                </FluentLabel>
                <FluentLabel Typo="Typography.Body">
                    @(String.Join(",", selectedUserProfileModel!.ActivitiesFrequency.Select(p => p.ActivityName)))
                </FluentLabel>
            }
        </div>
        <div>
            <FluentButton Type="ButtonType.Button" Appearance="Appearance.Accent"
                          OnClick="ResetDialog">Close</FluentButton>
        </div>
    }
</FluentDialog>

<FluentDialog @ref="potentialMatchAnalysisDialog"
              @bind-Hidden="@showPotentialMatchAnalysisDialog"
              Modal="true" TrapFocus="true"
              PreventScroll="false">
    <FluentDialogHeader Visible="false"></FluentDialogHeader>
    @if (this.potentialMatchAnalysisResult != null)
    {
        <div>
            <p>
                <FluentTextArea style="width:100%;"
                                Rows="10" ReadOnly="true"
                                Value="@this.potentialMatchAnalysisResult!.choices![0].message!.content"></FluentTextArea>
            </p>
        </div>
        <div>
            <div>
                <FluentButton Type="ButtonType.Button" Appearance="Appearance.Accent"
                              OnClick="ResetPotentialMAtchAnalysisDialog">Close</FluentButton>
            </div>
        </div>
    }
</FluentDialog>

@code {
    private GridItemsProvider<UserProfileModel>? ItemsProvider;
    private readonly CancellationTokenSource cancellationTokenSource = new();
    private bool showDetailsDialog { get; set; } = false;
    private FluentDialog? detailsDialog { get; set; }
    private bool showPotentialMatchAnalysisDialog { get; set; }
    private FluentDialog? potentialMatchAnalysisDialog { get; set; }
    private UserProfileModel? selectedUserProfileModel { get; set; }
    private bool IsBusy { get; set; }
    private bool HasUserProfile { get; set; }
    private readonly PaginationState paginationState = new()
        {
            ItemsPerPage = 1
        };
    private string? selectedUserLocationText { get; set; }
    private AnalyzeImageResponseModel? potentialMatchAnalysisResult { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var userId = this.userProviderService.GetCurrentUserId();
        var userProfile = await this.userProfileService.GetUserProfileByUserIdAsync(userId!,
        this.cancellationTokenSource.Token);
        if (userProfile != null)
        {
            ItemsProvider = async req =>
            {
                this.IsBusy = true;
                StateHasChanged();
                PaginationRequest paginationRequest = new PaginationRequest()
                    {
                        PageSize = paginationState.ItemsPerPage,
                        StartIndex = req.StartIndex,
                        SortingItems = req.GetSortByProperties().Select(p => new SortingItem()
                        {
                            PropertyName = p.PropertyName,
                            SortType = p.Direction == SortDirection.Ascending ? SortType.Ascending : SortType.Descending
                        }).ToArray()
                    };

                var items = await this.myMatchesService
                .GetPagedMyPotentialMatchesAsync(paginationRequest, cancellationTokenSource.Token);
                var result = GridItemsProviderResult.From<UserProfileModel>(items!.Items!, items.TotalItems);
                this.IsBusy = false;
                StateHasChanged();
                return result;
            };
        }
        this.HasUserProfile = userProfile != null;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            this.detailsDialog!.Hide();
            this.potentialMatchAnalysisDialog!.Hide();
        }
    }

    private async Task OnAnalyzePotentialMatchAsync(UserProfileModel potentialMatchProfileModel)
    {
        try
        {
            this.IsBusy = true;
            StateHasChanged();
            var userId = this.userProviderService.GetCurrentUserId();
            var existentUserProfile = await this.userProfileService
                .GetUserProfileByUserIdAsync(userId!, this.cancellationTokenSource.Token);
            string baseUrl = this.navigationManager.BaseUri;

            string myProfileImageRequestUrl = $"{baseUrl}api/photoimage/{existentUserProfile!.ProfilePhotoId}";
            var myProfileImageBytes = httpClient.GetByteArrayAsync(myProfileImageRequestUrl).Result;
            string myProfileImageBase64String = $"data:image/jpg;base64, {Convert.ToBase64String(myProfileImageBytes)}";

            string potentialMatchProfileImageRequestUrl = $"{baseUrl}api/photoimage/{potentialMatchProfileModel!.ProfilePhotoId}";
            var potentialMatchProfileImageBytes = httpClient.GetByteArrayAsync(potentialMatchProfileImageRequestUrl).Result;
            string potentialMatchProfileImageBase64String = $"data:image/jpg;base64, {Convert.ToBase64String(potentialMatchProfileImageBytes)}";

            var promptInfo = await this.promptGeneratorService.GetPromptCompleteInfoAsync(
                Constants.PromptsNames.AnalyzePotentialMatch, this.cancellationTokenSource.Token);
            StringBuilder prompt = new(promptInfo!.BaseText!);
            var activities = await this.activityService.GetAllActivityAsync(cancellationTokenSource.Token);
            prompt.AppendLine("My activities:");
            foreach (var singleActivity in existentUserProfile!.ActivitiesFrequency!)
            {
                prompt.AppendLine(activities.Single(p => p.ActivityId == singleActivity.ActivityId).Name);
            }
            prompt.AppendLine("The other person activities:");
            foreach (var singleActivity in potentialMatchProfileModel!.ActivitiesFrequency!)
            {
                prompt.AppendLine(activities.Single(p => p.ActivityId == singleActivity.ActivityId).Name);
            }
            var religions = await this.religionService.GetAllReligionAsync(cancellationTokenSource.Token);
            prompt.AppendLine($"My religion: {religions.Single(p => p.ReligionId == existentUserProfile.ReligionId).Name}");
            prompt.AppendLine($"The other person religion: {religions.Single(p => p.ReligionId == potentialMatchProfileModel.ReligionId).Name}");

            var dateObjectives = await this.dateObjectiveService.GetAllDateObjectiveAsync(cancellationTokenSource.Token);
            prompt.AppendLine($"My date objective: {dateObjectives.Single(p=>p.DateObjectiveId == existentUserProfile.CurrentDateObjectiveId).Name}");
            prompt.AppendLine($"The other person date objective: {dateObjectives.Single(p => p.DateObjectiveId == potentialMatchProfileModel.CurrentDateObjectiveId).Name}");

            var kidStatuses = await this.kidStatusService.GetAllKidStatusAsync(this.cancellationTokenSource.Token);
            prompt.AppendLine($"My Preferred Kid Status in the other person: {kidStatuses.Single(p=>p.KidStatusId == existentUserProfile.PreferredKidStatusId).Name}");
            prompt.AppendLine($"Current Kid Status in the other person: {kidStatuses.Single(p => p.KidStatusId == potentialMatchProfileModel.KidStatusId).Name}");

            prompt.AppendLine($"My main profession: {existentUserProfile.MainProfessionText}");
            prompt.AppendLine($"The other person main profession: {potentialMatchProfileModel.MainProfessionText}");
            prompt.AppendLine("Have the analysis of photos in a separate section than the rest of the analysis.");

            this.potentialMatchAnalysisResult = await this.openAIService.AnalyzeImageAsync([myProfileImageBase64String, potentialMatchProfileImageBase64String],
            prompt.ToString(), this.cancellationTokenSource.Token);
            this.potentialMatchAnalysisDialog!.Show();
        }
        catch (Exception ex)
        {
            this.toastService.ShowError(ex.Message);
        }
        finally
        {
            this.IsBusy = false;
            StateHasChanged();
        }
    }

    private async Task OnViewDetailsClicked(UserProfileModel userProfileModel)
    {
        this.selectedUserProfileModel = userProfileModel;
        this.detailsDialog!.Show();
        var geoData = await this.geoNamesService
        .GetGeoLocationDataAsync(userProfileModel.CurrentLatitude, userProfileModel.CurrentLongitude,
        this.cancellationTokenSource.Token);
        this.selectedUserLocationText =
        $"{geoData!.nearest!.region}, {geoData.nearest.city}, {geoData.nearest.state}";
    }

    private void ResetDialog()
    {
        this.detailsDialog!.Hide();
        this.selectedUserProfileModel = null;
    }

    private void ResetPotentialMAtchAnalysisDialog()
    {
        this.potentialMatchAnalysisDialog!.Hide();
    }

    private async Task OnPotentialMatchLikeClickedAsync(UserProfileModel likedProfile)
    {
        try
        {
            this.IsBusy = true;
            StateHasChanged();
            CreateLikedUserProfileModel createLikedUserProfileModel = new()
            {
                LikedApplicationUserId = likedProfile.ApplicationUserId,
                LikingApplicationUserId = this.userProviderService.GetCurrentUserId()
            };
            await this.likedUserProfileService.CreateLikedUserProfileAsync(
                createModel: createLikedUserProfileModel,
                cancellationToken:this.cancellationTokenSource.Token
            );
            await this.paginationState.SetCurrentPageIndexAsync(this.paginationState.CurrentPageIndex);
        }
        catch (Exception ex)
        {
            this.toastService.ShowError(ex.Message);
        }
        finally
        {
            this.IsBusy = false;
            StateHasChanged();
        }
    }

    private async Task OnPotentialMatchDisLikeClickedAsync(UserProfileModel likedProfile)
    {
        try
        {
            this.IsBusy = true;
            StateHasChanged();
            CreateNotLikedUserProfileModel createNotLikedUserProfileModel = new()
                {
                    NotLikedApplicationUserId = likedProfile.ApplicationUserId,
                    NotLikingApplicationUserId = this.userProviderService.GetCurrentUserId()
                };
            await this.notLikedUserProfileService.CreateNotLikedUserProfileAsync(
                createModel: createNotLikedUserProfileModel,
                cancellationToken: this.cancellationTokenSource.Token
            );
            await this.paginationState.SetCurrentPageIndexAsync(this.paginationState.CurrentPageIndex);
        }
        catch (Exception ex)
        {
            this.toastService.ShowError(ex.Message);
        }
        finally
        {
            this.IsBusy = false;
            StateHasChanged();
        }
    }

    public ValueTask DisposeAsync()
    {
        this.cancellationTokenSource.Dispose();
        return ValueTask.CompletedTask;
    }

    [ResourceKey(defaultValue: "My Matches")]
    public const string MyMatchesTextKey = "MyMatchesText";
    [ResourceKey(defaultValue: "Please complete your User Profile first")]
    public const string CompletProfileTextKey = "CompletProfileText";
    [ResourceKey(defaultValue: "Age")]
    public const string AgeTextKey = "AgeText";
    [ResourceKey(defaultValue: "Distance")]
    public const string DistanceTextKey = "DistanceText";
    [ResourceKey(defaultValue: "View Details")]
    public const string ViewDetailsTextKey = "ViewDetailsText";
}
