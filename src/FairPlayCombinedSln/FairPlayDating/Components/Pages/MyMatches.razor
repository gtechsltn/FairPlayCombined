@page "/MyMatches"
@implements IAsyncDisposable

@using FairPlayCombined.Common
@using FairPlayCombined.Common.CustomAttributes
@using FairPlayCombined.Common.GeneratorsAttributes
@using FairPlayCombined.Interfaces
@using FairPlayCombined.Models.FairPlayDating.UserProfile
@using FairPlayCombined.Models.Pagination
@using FairPlayCombined.Services.FairPlayDating
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Localization

@attribute [Authorize]
@rendermode RenderMode.InteractiveServer
@attribute [StreamRendering(enabled: true)]
@inject MyMatchesService myMatchesService
@inject UserProfileService userProfileService
@inject IUserProviderService userProviderService
@inject IStringLocalizer<MyMatches> localizer

<h3>
    @localizer[MyMatchesTextKey]
</h3>

<LoadingIndicator ShowSpinners="this.IsBusy"></LoadingIndicator>

@if (!this.HasUserProfile)
{
    <p>
        @localizer[CompletProfileTextKey]
    </p>
}
<div class="grid-container">
    <FluentDataGrid ItemsProvider="this.ItemsProvider" Pagination="this.paginationState">
        <TemplateColumn>
            <div class="row">
                <div class="col">
                    <div class="card" style="width: 100%;">
                        <img class="card-img-top"
                             src="@($"api/photoimage/{context.ProfilePhotoId}")" />
                        <div class="card-body">
                            <h5 class="card-title">
                            </h5>
                        </div>
                    </div>
                </div>
                <div class="col">
                    <div class="row">
                        <div class="col">
                            @localizer[AgeTextKey]: @context.Age
                        </div>
                    </div>
                    <div class="row">
                        <div class="col">
                            @localizer[DistanceTextKey]: @context.Distance
                        </div>
                    </div>
                    <div class="row">
                        <div class="col">
                            <p>@context.About</p>
                            <a class="btn btn-primary"
                               @onclick="@( ()=> OnViewDetailsClicked(context))">@localizer[ViewDetailsTextKey]</a>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col">
                            <FluentPaginator State="this.paginationState"></FluentPaginator>
                        </div>
                    </div>
                </div>
            </div>
        </TemplateColumn>
    </FluentDataGrid>
</div>
@if (this.showDetailsDialog && this.selectedUserProfileModel != null)
{
    <div class="modal fade show" tabindex="-1" aria-modal="true" role="dialog" style="display: block;">
        <div class="modal-dialog modal-dialog-scrollable">
            <div class="modal-content">
                <div class="modal-header">
                    <h1 class="modal-title fs-5">Selection Info</h1>
                    <button @onclick="OnCloseSelectedProfile"
                            type="button"
                            class="btn-close"
                            data-bs-dismiss="modal"
                            aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>
                        Age: @selectedUserProfileModel.Age
                    </p>
                    <p>
                        About me:
                        @selectedUserProfileModel.About
                    </p>
                    <p>Kids Status: @selectedUserProfileModel.KidStatusText</p>
                    <p>Gender: @selectedUserProfileModel.BiologicalGenderText</p>
                    <p>Date Objective: @selectedUserProfileModel.CurrentDateObjectiveText</p>
                    <p>Eyes Color: @selectedUserProfileModel.EyesColorText</p>
                    <p>Hair Color: @selectedUserProfileModel.HairColorText</p>
                    <p>Religion: @selectedUserProfileModel.ReligionText</p>
                    <p>Tattoo Status : @selectedUserProfileModel.TattooStatusText</p>
                </div>
            </div>
        </div>
    </div>
}
@code {
    private GridItemsProvider<UserProfileModel>? ItemsProvider;
    private readonly CancellationTokenSource cancellationTokenSource = new();
    private bool showDetailsDialog = false;
    private UserProfileModel? selectedUserProfileModel;
    private bool IsBusy { get; set; }
    private bool HasUserProfile { get; set; }
    private readonly PaginationState paginationState = new()
        {
            ItemsPerPage = 1
        };

    protected override async Task OnInitializedAsync()
    {
        var userId = this.userProviderService.GetCurrentUserId();
        var userProfile = await this.userProfileService.GetUserProfileByUserIdAsync(userId!,
        this.cancellationTokenSource.Token);
        if (userProfile != null)
        {
            ItemsProvider = async req =>
            {
                this.showDetailsDialog = false;
                this.selectedUserProfileModel = null;
                this.IsBusy = true;
                StateHasChanged();
                PaginationRequest paginationRequest = new PaginationRequest()
                    {
                        PageSize = paginationState.ItemsPerPage,
                        StartIndex = req.StartIndex,
                        SortingItems = req.GetSortByProperties().Select(p => new SortingItem()
                        {
                            PropertyName = p.PropertyName,
                            SortType = p.Direction == SortDirection.Ascending ? SortType.Ascending : SortType.Descending
                        }).ToArray()
                    };

                var items = await this.myMatchesService
                .GetPagedMyPotentialMatchesAsync(paginationRequest, cancellationTokenSource.Token);
                var result = GridItemsProviderResult.From<UserProfileModel>(items!.Items!, items.TotalItems);
                this.IsBusy = false;
                StateHasChanged();
                return result;
            };
        }
        this.HasUserProfile = userProfile != null;
    }

    private void OnViewDetailsClicked(UserProfileModel userProfileModel)
    {
        this.selectedUserProfileModel = userProfileModel;
        this.showDetailsDialog = true;
    }

    private void OnCloseSelectedProfile()
    {
        this.showDetailsDialog = false;
        this.selectedUserProfileModel = null;
    }

    public ValueTask DisposeAsync()
    {
        this.cancellationTokenSource.Dispose();
        return ValueTask.CompletedTask;
    }

    [ResourceKey(defaultValue: "My Matches")]
    public const string MyMatchesTextKey = "MyMatchesText";
    [ResourceKey(defaultValue: "Please complete your User Profile first")]
    public const string CompletProfileTextKey = "CompletProfileText";
    [ResourceKey(defaultValue:"Age")]
    public const string AgeTextKey = "AgeText";
    [ResourceKey(defaultValue: "Distance")]
    public const string DistanceTextKey = "DistanceText";
    [ResourceKey(defaultValue: "View Details")]
    public const string ViewDetailsTextKey = "ViewDetailsText";
}
