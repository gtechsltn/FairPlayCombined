@page "/MyUserProfile"
@using Blazored.Toast.Services
@using FairPlayCombined.Interfaces
@using FairPlayCombined.Models.Common.Photo
@using FairPlayCombined.Models.FairPlayDating.DateObjective
@using FairPlayCombined.Models.FairPlayDating.EyesColor
@using FairPlayCombined.Models.FairPlayDating.Gender
@using FairPlayCombined.Models.FairPlayDating.HairColor
@using FairPlayCombined.Models.FairPlayDating.KidStatus
@using FairPlayCombined.Models.FairPlayDating.Religion
@using FairPlayCombined.Models.FairPlayDating.TattooStatus
@using FairPlayCombined.Models.FairPlayDating.UserProfile
@using FairPlayCombined.Services.Common
@using FairPlayCombined.Services.FairPlayDating
@using Microsoft.AspNetCore.Authorization

@attribute [Authorize]
@attribute [StreamRendering(enabled: true)]
@rendermode RenderMode.InteractiveServer

@inject GenderService genderService
@inject DateObjectiveService dateObjectiveService
@inject EyesColorService eyesColorService
@inject HairColorService hairColorService
@inject KidStatusService kidStatusService
@inject ReligionService religionService
@inject TattooStatusService tattooStatusService
@inject IUserProviderService userProviderService
@inject UserProfileService userProfileService
@inject IToastService toastService
@inject PhotoService photoService
@inject IGeoLocationService geolocationService

<h3>MyUserProfile</h3>

<EditForm FormName="frmCreateMyUserProfile" Model="this.createUserProfileModel"
          OnValidSubmit="OnValidSubmitAsync">
    <div class="mb-3">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>
    </div>
    <div class="mb-3">
        <label class="form-label">Photo</label>
        <InputFile accept="image/*" OnChange="OnPhotoSelectionChangedAsync"></InputFile>
    </div>
    @if (this.createUserProfileModel.ProfilePhotoId != default(long))
    {
        <div class="mb-3">
            <img src="@($"api/photoimage/{this.createUserProfileModel.ProfilePhotoId}")" />
        </div>
    }
    <div class="mb-3">
        <label class="form-label">Gender</label>
        <InputSelect class="form-control"
                     @bind-Value="this.createUserProfileModel.BiologicalGenderId">
            <option value="0">Select Gender</option>
            @if (this.genders != null)
            {
                foreach (var singleGender in this.genders)
                {
                    <option value="@singleGender.GenderId">@singleGender.Name</option>
                }
            }
        </InputSelect>
    </div>
    <div class="mb-3">
        <label class="form-label">About</label>
        <InputTextArea class="form-control" @bind-Value="this.createUserProfileModel.About"></InputTextArea>
    </div>
    <div class="mb-3">
        <label class="form-label">Birth Date</label>
        <InputDate class="form-control" @bind-Value="this.createUserProfileModel.BirthDate"></InputDate>
    </div>
    <div class="mb-3">
        <label class="form-label">Date Objective</label>
        <InputSelect class="form-control"
                     @bind-Value="this.createUserProfileModel.CurrentDateObjectiveId">
            <option value="0">Select Date Objective</option>
            @if (this.dateObjectives != null)
            {
                foreach (var singleDateObjective in this.dateObjectives)
                {
                    <option value="@singleDateObjective.DateObjectiveId">
                        @singleDateObjective.Name
                    </option>
                }
            }
        </InputSelect>
    </div>
    <div class="mb-3">
        <label class="form-label">Eyes Color</label>
        <InputSelect class="form-control"
                     @bind-Value="this.createUserProfileModel.EyesColorId">
            <option value="0">Select Eyes Color</option>
            @if (this.eyesColors != null)
            {
                foreach (var singleEyesColor in this.eyesColors)
                {
                    <option value="@singleEyesColor.EyesColorId">
                        @singleEyesColor.Name
                    </option>
                }
            }
        </InputSelect>
    </div>
    <div class="mb-3">
        <label class="form-label">Hair Color</label>
        <InputSelect class="form-control"
                     @bind-Value="this.createUserProfileModel.HairColorId">
            <option value="0">Select Hair Color</option>
            @if (this.hairColors != null)
            {
                foreach (var singleHairColor in this.hairColors)
                {
                    <option value="@singleHairColor.HairColorId">
                        @singleHairColor.Name
                    </option>
                }
            }
        </InputSelect>
    </div>
    <div class="mb-3">
        <label class="form-label">Kid Status</label>
        <InputSelect class="form-control"
                     @bind-Value="this.createUserProfileModel.KidStatusId">
            <option value="0">Select Kid Status</option>
            @if (this.kidStatuses != null)
            {
                foreach (var singleKidStatus in this.kidStatuses)
                {
                    <option value="@singleKidStatus.KidStatusId">
                        @singleKidStatus.Name
                    </option>
                }
            }
        </InputSelect>
    </div>
    <div class="mb-3">
        <label class="form-label">Preferred Eyes Color</label>
        <InputSelect class="form-control"
                     @bind-Value="this.createUserProfileModel.PreferredEyesColorId">
            <option value="0">Select Preferred Eyes Color</option>
            @if (this.eyesColors != null)
            {
                foreach (var singleEyesColor in this.eyesColors)
                {
                    <option value="@singleEyesColor.EyesColorId">
                        @singleEyesColor.Name
                    </option>
                }
            }
        </InputSelect>
    </div>
    <div class="mb-3">
        <label class="form-label">Preferred Hair Color</label>
        <InputSelect class="form-control"
                     @bind-Value="this.createUserProfileModel.PreferredHairColorId">
            <option value="0">Select Preferred Hair Color</option>
            @if (this.hairColors != null)
            {
                foreach (var singleHairColor in this.hairColors)
                {
                    <option value="@singleHairColor.HairColorId">
                        @singleHairColor.Name
                    </option>
                }
            }
        </InputSelect>
    </div>
    <div class="mb-3">
        <label class="form-label">Preferred Kid Status</label>
        <InputSelect class="form-control"
                     @bind-Value="this.createUserProfileModel.PreferredKidStatusId">
            <option value="0">Select Preferred Kid Status</option>
            @if (this.kidStatuses != null)
            {
                foreach (var singleKidStatus in this.kidStatuses)
                {
                    <option value="@singleKidStatus.KidStatusId">
                        @singleKidStatus.Name
                    </option>
                }
            }
        </InputSelect>
    </div>
    <div class="mb-3">
        <label class="form-label">Preferred Religion</label>
        <InputSelect class="form-control"
                     @bind-Value="this.createUserProfileModel.PreferredReligionId">
            <option value="0">Select Preferred Religion</option>
            @if (this.religions != null)
            {
                foreach (var singleReligion in this.religions)
                {
                    <option value="@singleReligion.ReligionId">
                        @singleReligion.Name
                    </option>
                }
            }
        </InputSelect>
    </div>
    <div class="mb-3">
        <label class="form-label">Preferred Tattoo Status</label>
        <InputSelect class="form-control"
                     @bind-Value="this.createUserProfileModel.PreferredTattooStatusId">
            <option value="0">Select Preferred Tattoo Status</option>
            @if (this.tattooStatuses != null)
            {
                foreach (var singletattooStatus in this.tattooStatuses)
                {
                    <option value="@singletattooStatus.TattooStatusId">
                        @singletattooStatus.Name
                    </option>
                }
            }
        </InputSelect>
    </div>
    <div class="mb-3">
        <label class="form-label">Religion</label>
        <InputSelect class="form-control"
                     @bind-Value="this.createUserProfileModel.ReligionId">
            <option value="0">Select Religion</option>
            @if (this.religions != null)
            {
                foreach (var singleReligion in this.religions)
                {
                    <option value="@singleReligion.ReligionId">
                        @singleReligion.Name
                    </option>
                }
            }
        </InputSelect>
    </div>
    <div class="mb-3">
        <label class="form-label">Tattoo Status</label>
        <InputSelect class="form-control"
                     @bind-Value="this.createUserProfileModel.TattooStatusId">
            <option value="0">Select Tattoo Status</option>
            @if (this.tattooStatuses != null)
            {
                foreach (var singletattooStatus in this.tattooStatuses)
                {
                    <option value="@singletattooStatus.TattooStatusId">
                        @singletattooStatus.Name
                    </option>
                }
            }
        </InputSelect>
    </div>
    <div class="mb-3">
        <label class="form-label">Current Latitude: @this.createUserProfileModel.CurrentLatitude</label>
        <label class="form-label">Current Longitude: @this.createUserProfileModel.CurrentLongitude</label>
    </div>
    <div class="mb-3">
        <button class="btn btn-primary">Save</button>
    </div>
</EditForm>

@code {
    [SupplyParameterFromForm]
    private CreateUserProfileModel createUserProfileModel { get; set; } = new()
        {
            BirthDate = DateTimeOffset.UtcNow,
            CurrentLatitude = 10,
            CurrentLongitude = 10
        };
    private CancellationTokenSource cancellationTokenSource = new();
    private GenderModel[]? genders;
    private DateObjectiveModel[]? dateObjectives;
    private EyesColorModel[]? eyesColors;
    private HairColorModel[]? hairColors;
    private KidStatusModel[]? kidStatuses;
    private ReligionModel[]? religions;
    private TattooStatusModel[]? tattooStatuses;

    protected override async Task OnInitializedAsync()
    {
        this.createUserProfileModel.ApplicationUserId = this.userProviderService.GetCurrentUserId();
    }

    private async Task LoadDataAsync()
    {
        var existentUserProfile = await this.userProfileService
        .GetUserProfileByUserIdAsync(this.createUserProfileModel!.ApplicationUserId!,
            this.cancellationTokenSource.Token);
        if (existentUserProfile != null)
        {
            this.createUserProfileModel = new()
                {
                    About = existentUserProfile.About,
                    ApplicationUserId = existentUserProfile.ApplicationUserId,
                    BiologicalGenderId = existentUserProfile.BiologicalGenderId,
                    BirthDate = existentUserProfile.BirthDate,
                    CurrentDateObjectiveId = existentUserProfile.CurrentDateObjectiveId,
                    EyesColorId = existentUserProfile.EyesColorId,
                    HairColorId = existentUserProfile.HairColorId,
                    KidStatusId = existentUserProfile.KidStatusId,
                    PreferredEyesColorId = existentUserProfile.PreferredEyesColorId,
                    PreferredHairColorId = existentUserProfile.PreferredHairColorId,
                    PreferredKidStatusId = existentUserProfile.PreferredKidStatusId,
                    PreferredReligionId = existentUserProfile.PreferredReligionId,
                    PreferredTattooStatusId = existentUserProfile.PreferredTattooStatusId,
                    ProfilePhotoId = existentUserProfile.ProfilePhotoId,
                    ReligionId = existentUserProfile.ReligionId,
                    TattooStatusId = existentUserProfile.TattooStatusId
                };
        }
        this.genders = await this.genderService.GetAllGenderAsync(cancellationTokenSource.Token);
        this.dateObjectives = await this.dateObjectiveService.GetAllDateObjectiveAsync(cancellationTokenSource.Token);
        this.eyesColors = await this.eyesColorService.GetAllEyesColorAsync(cancellationTokenSource.Token);
        this.hairColors = await this.hairColorService.GetAllHairColorAsync(cancellationTokenSource.Token);
        this.kidStatuses = await this.kidStatusService.GetAllKidStatusAsync(cancellationTokenSource.Token);
        this.religions = await this.religionService.GetAllReligionAsync(cancellationTokenSource.Token);
        this.tattooStatuses = await this.tattooStatusService.GetAllTattooStatusAsync(cancellationTokenSource.Token);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadDataAsync();
            var geoLocation = await
            this.geolocationService.GetCurrentPositionAsync();
            if (geoLocation != null)
            {
                this.createUserProfileModel.CurrentLatitude = geoLocation.Latitude;
                this.createUserProfileModel.CurrentLongitude = geoLocation.Longitude;
            }
            StateHasChanged();
        }
    }

    private async Task OnPhotoSelectionChangedAsync(InputFileChangeEventArgs inputFileChangeEventArgs)
    {
        try
        {
            if (inputFileChangeEventArgs.FileCount == 1)
            {
                using var stream = inputFileChangeEventArgs.File.OpenReadStream();
                MemoryStream memoryStream = new MemoryStream();
                await stream.CopyToAsync(memoryStream);
                var fileName = "test";
                if (this.createUserProfileModel.ProfilePhotoId == default)
                {
                    CreatePhotoModel createPhotoModel = new();
                    createPhotoModel.Name = fileName;
                    createPhotoModel.Filename = fileName;
                    createPhotoModel.PhotoBytes = memoryStream.ToArray();
                    this.createUserProfileModel.ProfilePhotoId =
                    await photoService.CreatePhotoAsync(createPhotoModel, cancellationTokenSource.Token);
                }
                else
                {
                    UpdatePhotoModel updatePhotoModel = new();
                    updatePhotoModel.PhotoId = this.createUserProfileModel.ProfilePhotoId;
                    updatePhotoModel.Name = fileName;
                    updatePhotoModel.Filename = fileName;
                    updatePhotoModel.PhotoBytes = memoryStream.ToArray();
                    //await photoService.UpdatePhotoAsync(updatePhotoModel, cancellationTokenSource.Token);
                }
            }
        }
        catch (Exception ex)
        {
            this.toastService.ShowError(ex.Message);
        }
        await Task.Yield();
    }

    private async Task OnValidSubmitAsync()
    {
        try
        {
            var existentUserProfileId = await this.userProfileService
            .GetUserProfileIdByUserIdAsync(this.createUserProfileModel!.ApplicationUserId!,
            this.cancellationTokenSource.Token);
            if (existentUserProfileId != null)
            {
                await this.userProfileService
                .DeleteUserProfileByIdAsync(existentUserProfileId.Value,
                this.cancellationTokenSource.Token);
            }
            await this.userProfileService.CreateUserProfileAsync(this.createUserProfileModel,
            cancellationTokenSource.Token);
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message);
        }
    }
}
