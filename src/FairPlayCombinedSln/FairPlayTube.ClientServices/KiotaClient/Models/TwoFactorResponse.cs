// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace FairPlayTube.ClientServices.KiotaClient.Models {
    public class TwoFactorResponse : IParsable {
        /// <summary>The isMachineRemembered property</summary>
        public bool? IsMachineRemembered { get; set; }
        /// <summary>The isTwoFactorEnabled property</summary>
        public bool? IsTwoFactorEnabled { get; set; }
        /// <summary>The recoveryCodes property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? RecoveryCodes { get; set; }
#nullable restore
#else
        public List<string> RecoveryCodes { get; set; }
#endif
        /// <summary>The recoveryCodesLeft property</summary>
        public int? RecoveryCodesLeft { get; set; }
        /// <summary>The sharedKey property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SharedKey { get; set; }
#nullable restore
#else
        public string SharedKey { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static TwoFactorResponse CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new TwoFactorResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"isMachineRemembered", n => { IsMachineRemembered = n.GetBoolValue(); } },
                {"isTwoFactorEnabled", n => { IsTwoFactorEnabled = n.GetBoolValue(); } },
                {"recoveryCodes", n => { RecoveryCodes = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                {"recoveryCodesLeft", n => { RecoveryCodesLeft = n.GetIntValue(); } },
                {"sharedKey", n => { SharedKey = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("isMachineRemembered", IsMachineRemembered);
            writer.WriteBoolValue("isTwoFactorEnabled", IsTwoFactorEnabled);
            writer.WriteCollectionOfPrimitiveValues<string>("recoveryCodes", RecoveryCodes);
            writer.WriteIntValue("recoveryCodesLeft", RecoveryCodesLeft);
            writer.WriteStringValue("sharedKey", SharedKey);
        }
    }
}
