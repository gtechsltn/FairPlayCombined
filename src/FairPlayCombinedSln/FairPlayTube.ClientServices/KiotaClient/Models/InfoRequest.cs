// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace FairPlayTube.ClientServices.KiotaClient.Models {
    public class InfoRequest : IParsable {
        /// <summary>The newEmail property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? NewEmail { get; set; }
#nullable restore
#else
        public string NewEmail { get; set; }
#endif
        /// <summary>The newPassword property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? NewPassword { get; set; }
#nullable restore
#else
        public string NewPassword { get; set; }
#endif
        /// <summary>The oldPassword property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OldPassword { get; set; }
#nullable restore
#else
        public string OldPassword { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static InfoRequest CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new InfoRequest();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"newEmail", n => { NewEmail = n.GetStringValue(); } },
                {"newPassword", n => { NewPassword = n.GetStringValue(); } },
                {"oldPassword", n => { OldPassword = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("newEmail", NewEmail);
            writer.WriteStringValue("newPassword", NewPassword);
            writer.WriteStringValue("oldPassword", OldPassword);
        }
    }
}
