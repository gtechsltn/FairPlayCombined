// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace FairPlayTube.ClientServices.KiotaClient.Models {
    public class VideoInfoModel : IParsable {
        /// <summary>The accountId property</summary>
        public Guid? AccountId { get; set; }
        /// <summary>The applicationUserId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ApplicationUserId { get; set; }
#nullable restore
#else
        public string ApplicationUserId { get; set; }
#endif
        /// <summary>The description property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>The englishCaptions property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EnglishCaptions { get; set; }
#nullable restore
#else
        public string EnglishCaptions { get; set; }
#endif
        /// <summary>The externalVideoSourceUrl property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ExternalVideoSourceUrl { get; set; }
#nullable restore
#else
        public string ExternalVideoSourceUrl { get; set; }
#endif
        /// <summary>The fileName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FileName { get; set; }
#nullable restore
#else
        public string FileName { get; set; }
#endif
        /// <summary>The indexedVideoUrl property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? IndexedVideoUrl { get; set; }
#nullable restore
#else
        public string IndexedVideoUrl { get; set; }
#endif
        /// <summary>The indexingCost property</summary>
        public double? IndexingCost { get; set; }
        /// <summary>The lifetimeSessions property</summary>
        public int? LifetimeSessions { get; set; }
        /// <summary>The lifetimeViewers property</summary>
        public int? LifetimeViewers { get; set; }
        /// <summary>The lifetimeWatchTime property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LifetimeWatchTime { get; set; }
#nullable restore
#else
        public string LifetimeWatchTime { get; set; }
#endif
        /// <summary>The location property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Location { get; set; }
#nullable restore
#else
        public string Location { get; set; }
#endif
        /// <summary>The name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The price property</summary>
        public double? Price { get; set; }
        /// <summary>The publishedOnString property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PublishedOnString { get; set; }
#nullable restore
#else
        public string PublishedOnString { get; set; }
#endif
        /// <summary>The publishedUrl property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PublishedUrl { get; set; }
#nullable restore
#else
        public string PublishedUrl { get; set; }
#endif
        /// <summary>The rowCreationDateTime property</summary>
        public DateTimeOffset? RowCreationDateTime { get; set; }
        /// <summary>The thumbnailUrl property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ThumbnailUrl { get; set; }
#nullable restore
#else
        public string ThumbnailUrl { get; set; }
#endif
        /// <summary>The videoBloblUrl property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? VideoBloblUrl { get; set; }
#nullable restore
#else
        public string VideoBloblUrl { get; set; }
#endif
        /// <summary>The videoDurationInSeconds property</summary>
        public double? VideoDurationInSeconds { get; set; }
        /// <summary>The videoId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? VideoId { get; set; }
#nullable restore
#else
        public string VideoId { get; set; }
#endif
        /// <summary>The videoIndexingProcessingPercentage property</summary>
        public int? VideoIndexingProcessingPercentage { get; set; }
        /// <summary>The videoIndexSourceClass property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? VideoIndexSourceClass { get; set; }
#nullable restore
#else
        public string VideoIndexSourceClass { get; set; }
#endif
        /// <summary>The videoIndexStatusId property</summary>
        public int? VideoIndexStatusId { get; set; }
        /// <summary>The videoInfoId property</summary>
        public long? VideoInfoId { get; set; }
        /// <summary>The videoKeywords property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? VideoKeywords { get; set; }
#nullable restore
#else
        public List<string> VideoKeywords { get; set; }
#endif
        /// <summary>The videoLanguageCode property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? VideoLanguageCode { get; set; }
#nullable restore
#else
        public string VideoLanguageCode { get; set; }
#endif
        /// <summary>The videoTopics property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? VideoTopics { get; set; }
#nullable restore
#else
        public List<string> VideoTopics { get; set; }
#endif
        /// <summary>The videoVisibilityId property</summary>
        public int? VideoVisibilityId { get; set; }
        /// <summary>The youTubeVideoId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? YouTubeVideoId { get; set; }
#nullable restore
#else
        public string YouTubeVideoId { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static VideoInfoModel CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new VideoInfoModel();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"accountId", n => { AccountId = n.GetGuidValue(); } },
                {"applicationUserId", n => { ApplicationUserId = n.GetStringValue(); } },
                {"description", n => { Description = n.GetStringValue(); } },
                {"englishCaptions", n => { EnglishCaptions = n.GetStringValue(); } },
                {"externalVideoSourceUrl", n => { ExternalVideoSourceUrl = n.GetStringValue(); } },
                {"fileName", n => { FileName = n.GetStringValue(); } },
                {"indexedVideoUrl", n => { IndexedVideoUrl = n.GetStringValue(); } },
                {"indexingCost", n => { IndexingCost = n.GetDoubleValue(); } },
                {"lifetimeSessions", n => { LifetimeSessions = n.GetIntValue(); } },
                {"lifetimeViewers", n => { LifetimeViewers = n.GetIntValue(); } },
                {"lifetimeWatchTime", n => { LifetimeWatchTime = n.GetStringValue(); } },
                {"location", n => { Location = n.GetStringValue(); } },
                {"name", n => { Name = n.GetStringValue(); } },
                {"price", n => { Price = n.GetDoubleValue(); } },
                {"publishedOnString", n => { PublishedOnString = n.GetStringValue(); } },
                {"publishedUrl", n => { PublishedUrl = n.GetStringValue(); } },
                {"rowCreationDateTime", n => { RowCreationDateTime = n.GetDateTimeOffsetValue(); } },
                {"thumbnailUrl", n => { ThumbnailUrl = n.GetStringValue(); } },
                {"videoBloblUrl", n => { VideoBloblUrl = n.GetStringValue(); } },
                {"videoDurationInSeconds", n => { VideoDurationInSeconds = n.GetDoubleValue(); } },
                {"videoId", n => { VideoId = n.GetStringValue(); } },
                {"videoIndexSourceClass", n => { VideoIndexSourceClass = n.GetStringValue(); } },
                {"videoIndexStatusId", n => { VideoIndexStatusId = n.GetIntValue(); } },
                {"videoIndexingProcessingPercentage", n => { VideoIndexingProcessingPercentage = n.GetIntValue(); } },
                {"videoInfoId", n => { VideoInfoId = n.GetLongValue(); } },
                {"videoKeywords", n => { VideoKeywords = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                {"videoLanguageCode", n => { VideoLanguageCode = n.GetStringValue(); } },
                {"videoTopics", n => { VideoTopics = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                {"videoVisibilityId", n => { VideoVisibilityId = n.GetIntValue(); } },
                {"youTubeVideoId", n => { YouTubeVideoId = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteGuidValue("accountId", AccountId);
            writer.WriteStringValue("applicationUserId", ApplicationUserId);
            writer.WriteStringValue("description", Description);
            writer.WriteStringValue("englishCaptions", EnglishCaptions);
            writer.WriteStringValue("externalVideoSourceUrl", ExternalVideoSourceUrl);
            writer.WriteStringValue("fileName", FileName);
            writer.WriteStringValue("indexedVideoUrl", IndexedVideoUrl);
            writer.WriteDoubleValue("indexingCost", IndexingCost);
            writer.WriteIntValue("lifetimeSessions", LifetimeSessions);
            writer.WriteIntValue("lifetimeViewers", LifetimeViewers);
            writer.WriteStringValue("lifetimeWatchTime", LifetimeWatchTime);
            writer.WriteStringValue("location", Location);
            writer.WriteStringValue("name", Name);
            writer.WriteDoubleValue("price", Price);
            writer.WriteStringValue("publishedOnString", PublishedOnString);
            writer.WriteStringValue("publishedUrl", PublishedUrl);
            writer.WriteDateTimeOffsetValue("rowCreationDateTime", RowCreationDateTime);
            writer.WriteStringValue("thumbnailUrl", ThumbnailUrl);
            writer.WriteStringValue("videoBloblUrl", VideoBloblUrl);
            writer.WriteDoubleValue("videoDurationInSeconds", VideoDurationInSeconds);
            writer.WriteStringValue("videoId", VideoId);
            writer.WriteIntValue("videoIndexingProcessingPercentage", VideoIndexingProcessingPercentage);
            writer.WriteStringValue("videoIndexSourceClass", VideoIndexSourceClass);
            writer.WriteIntValue("videoIndexStatusId", VideoIndexStatusId);
            writer.WriteLongValue("videoInfoId", VideoInfoId);
            writer.WriteCollectionOfPrimitiveValues<string>("videoKeywords", VideoKeywords);
            writer.WriteStringValue("videoLanguageCode", VideoLanguageCode);
            writer.WriteCollectionOfPrimitiveValues<string>("videoTopics", VideoTopics);
            writer.WriteIntValue("videoVisibilityId", VideoVisibilityId);
            writer.WriteStringValue("youTubeVideoId", YouTubeVideoId);
        }
    }
}
