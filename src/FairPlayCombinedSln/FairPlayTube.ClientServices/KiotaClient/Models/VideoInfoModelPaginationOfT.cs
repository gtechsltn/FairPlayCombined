// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace FairPlayTube.ClientServices.KiotaClient.Models {
    public class VideoInfoModelPaginationOfT : IParsable {
        /// <summary>The items property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<VideoInfoModel>? Items { get; set; }
#nullable restore
#else
        public List<VideoInfoModel> Items { get; set; }
#endif
        /// <summary>The pageSize property</summary>
        public int? PageSize { get; set; }
        /// <summary>The totalItems property</summary>
        public int? TotalItems { get; set; }
        /// <summary>The totalPages property</summary>
        public int? TotalPages { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static VideoInfoModelPaginationOfT CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new VideoInfoModelPaginationOfT();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"items", n => { Items = n.GetCollectionOfObjectValues<VideoInfoModel>(VideoInfoModel.CreateFromDiscriminatorValue)?.ToList(); } },
                {"pageSize", n => { PageSize = n.GetIntValue(); } },
                {"totalItems", n => { TotalItems = n.GetIntValue(); } },
                {"totalPages", n => { TotalPages = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfObjectValues<VideoInfoModel>("items", Items);
            writer.WriteIntValue("pageSize", PageSize);
            writer.WriteIntValue("totalItems", TotalItems);
            writer.WriteIntValue("totalPages", TotalPages);
        }
    }
}
