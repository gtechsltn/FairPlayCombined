// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace FairPlayTube.ClientServices.KiotaClient.Models {
    public class TwoFactorRequest : IParsable {
        /// <summary>The enable property</summary>
        public bool? Enable { get; set; }
        /// <summary>The forgetMachine property</summary>
        public bool? ForgetMachine { get; set; }
        /// <summary>The resetRecoveryCodes property</summary>
        public bool? ResetRecoveryCodes { get; set; }
        /// <summary>The resetSharedKey property</summary>
        public bool? ResetSharedKey { get; set; }
        /// <summary>The twoFactorCode property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TwoFactorCode { get; set; }
#nullable restore
#else
        public string TwoFactorCode { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static TwoFactorRequest CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new TwoFactorRequest();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"enable", n => { Enable = n.GetBoolValue(); } },
                {"forgetMachine", n => { ForgetMachine = n.GetBoolValue(); } },
                {"resetRecoveryCodes", n => { ResetRecoveryCodes = n.GetBoolValue(); } },
                {"resetSharedKey", n => { ResetSharedKey = n.GetBoolValue(); } },
                {"twoFactorCode", n => { TwoFactorCode = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("enable", Enable);
            writer.WriteBoolValue("forgetMachine", ForgetMachine);
            writer.WriteBoolValue("resetRecoveryCodes", ResetRecoveryCodes);
            writer.WriteBoolValue("resetSharedKey", ResetSharedKey);
            writer.WriteStringValue("twoFactorCode", TwoFactorCode);
        }
    }
}
